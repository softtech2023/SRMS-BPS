'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8835
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Reports3"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Reports3
    Inherits Global.System.Data.DataSet
    
    Private tablestudentProfile As studentProfileDataTable
    
    Private tableClassReplacement As ClassReplacementDataTable
    
    Private tablecollectionReport1 As collectionReport1DataTable
    
    Private tableCAVRequest As CAVRequestDataTable
    
    Private tableTORNew As TORNewDataTable
    
    Private tableform137 As form137DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("studentProfile")) Is Nothing) Then
                MyBase.Tables.Add(New studentProfileDataTable(ds.Tables("studentProfile")))
            End If
            If (Not (ds.Tables("ClassReplacement")) Is Nothing) Then
                MyBase.Tables.Add(New ClassReplacementDataTable(ds.Tables("ClassReplacement")))
            End If
            If (Not (ds.Tables("collectionReport1")) Is Nothing) Then
                MyBase.Tables.Add(New collectionReport1DataTable(ds.Tables("collectionReport1")))
            End If
            If (Not (ds.Tables("CAVRequest")) Is Nothing) Then
                MyBase.Tables.Add(New CAVRequestDataTable(ds.Tables("CAVRequest")))
            End If
            If (Not (ds.Tables("TORNew")) Is Nothing) Then
                MyBase.Tables.Add(New TORNewDataTable(ds.Tables("TORNew")))
            End If
            If (Not (ds.Tables("form137")) Is Nothing) Then
                MyBase.Tables.Add(New form137DataTable(ds.Tables("form137")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property studentProfile() As studentProfileDataTable
        Get
            Return Me.tablestudentProfile
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClassReplacement() As ClassReplacementDataTable
        Get
            Return Me.tableClassReplacement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property collectionReport1() As collectionReport1DataTable
        Get
            Return Me.tablecollectionReport1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CAVRequest() As CAVRequestDataTable
        Get
            Return Me.tableCAVRequest
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TORNew() As TORNewDataTable
        Get
            Return Me.tableTORNew
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property form137() As form137DataTable
        Get
            Return Me.tableform137
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Reports3 = CType(MyBase.Clone,Reports3)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("studentProfile")) Is Nothing) Then
                MyBase.Tables.Add(New studentProfileDataTable(ds.Tables("studentProfile")))
            End If
            If (Not (ds.Tables("ClassReplacement")) Is Nothing) Then
                MyBase.Tables.Add(New ClassReplacementDataTable(ds.Tables("ClassReplacement")))
            End If
            If (Not (ds.Tables("collectionReport1")) Is Nothing) Then
                MyBase.Tables.Add(New collectionReport1DataTable(ds.Tables("collectionReport1")))
            End If
            If (Not (ds.Tables("CAVRequest")) Is Nothing) Then
                MyBase.Tables.Add(New CAVRequestDataTable(ds.Tables("CAVRequest")))
            End If
            If (Not (ds.Tables("TORNew")) Is Nothing) Then
                MyBase.Tables.Add(New TORNewDataTable(ds.Tables("TORNew")))
            End If
            If (Not (ds.Tables("form137")) Is Nothing) Then
                MyBase.Tables.Add(New form137DataTable(ds.Tables("form137")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablestudentProfile = CType(MyBase.Tables("studentProfile"),studentProfileDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestudentProfile) Is Nothing) Then
                Me.tablestudentProfile.InitVars
            End If
        End If
        Me.tableClassReplacement = CType(MyBase.Tables("ClassReplacement"),ClassReplacementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClassReplacement) Is Nothing) Then
                Me.tableClassReplacement.InitVars
            End If
        End If
        Me.tablecollectionReport1 = CType(MyBase.Tables("collectionReport1"),collectionReport1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablecollectionReport1) Is Nothing) Then
                Me.tablecollectionReport1.InitVars
            End If
        End If
        Me.tableCAVRequest = CType(MyBase.Tables("CAVRequest"),CAVRequestDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCAVRequest) Is Nothing) Then
                Me.tableCAVRequest.InitVars
            End If
        End If
        Me.tableTORNew = CType(MyBase.Tables("TORNew"),TORNewDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTORNew) Is Nothing) Then
                Me.tableTORNew.InitVars
            End If
        End If
        Me.tableform137 = CType(MyBase.Tables("form137"),form137DataTable)
        If (initTable = true) Then
            If (Not (Me.tableform137) Is Nothing) Then
                Me.tableform137.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Reports3"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Reports3.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablestudentProfile = New studentProfileDataTable
        MyBase.Tables.Add(Me.tablestudentProfile)
        Me.tableClassReplacement = New ClassReplacementDataTable
        MyBase.Tables.Add(Me.tableClassReplacement)
        Me.tablecollectionReport1 = New collectionReport1DataTable
        MyBase.Tables.Add(Me.tablecollectionReport1)
        Me.tableCAVRequest = New CAVRequestDataTable
        MyBase.Tables.Add(Me.tableCAVRequest)
        Me.tableTORNew = New TORNewDataTable
        MyBase.Tables.Add(Me.tableTORNew)
        Me.tableform137 = New form137DataTable
        MyBase.Tables.Add(Me.tableform137)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializestudentProfile() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClassReplacement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecollectionReport1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCAVRequest() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTORNew() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeform137() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Reports3 = New Reports3
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub studentProfileRowChangeEventHandler(ByVal sender As Object, ByVal e As studentProfileRowChangeEvent)
    
    Public Delegate Sub ClassReplacementRowChangeEventHandler(ByVal sender As Object, ByVal e As ClassReplacementRowChangeEvent)
    
    Public Delegate Sub collectionReport1RowChangeEventHandler(ByVal sender As Object, ByVal e As collectionReport1RowChangeEvent)
    
    Public Delegate Sub CAVRequestRowChangeEventHandler(ByVal sender As Object, ByVal e As CAVRequestRowChangeEvent)
    
    Public Delegate Sub TORNewRowChangeEventHandler(ByVal sender As Object, ByVal e As TORNewRowChangeEvent)
    
    Public Delegate Sub form137RowChangeEventHandler(ByVal sender As Object, ByVal e As form137RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class studentProfileDataTable
        Inherits Global.System.Data.TypedTableBase(Of studentProfileRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnCivilStatus As Global.System.Data.DataColumn
        
        Private columnBirthPlace As Global.System.Data.DataColumn
        
        Private columnCitizenship As Global.System.Data.DataColumn
        
        Private columnReligion As Global.System.Data.DataColumn
        
        Private columnBloodType As Global.System.Data.DataColumn
        
        Private columnTelNumber As Global.System.Data.DataColumn
        
        Private columnMobileNumber As Global.System.Data.DataColumn
        
        Private columnHighSchool As Global.System.Data.DataColumn
        
        Private columnHSAddress As Global.System.Data.DataColumn
        
        Private columnCollege As Global.System.Data.DataColumn
        
        Private columnCAddress As Global.System.Data.DataColumn
        
        Private columnRequirements As Global.System.Data.DataColumn
        
        Private columnEncoder As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnAdmissionDate As Global.System.Data.DataColumn
        
        Private columnGraduationDate As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnGuardianContact As Global.System.Data.DataColumn
        
        Private columnGuardianAddress As Global.System.Data.DataColumn
        
        Private columnImagePath As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnElementary As Global.System.Data.DataColumn
        
        Private columnElemAddress As Global.System.Data.DataColumn
        
        Private columnGuardianRelationship As Global.System.Data.DataColumn
        
        Private columnGuardianTelNo As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnFather As Global.System.Data.DataColumn
        
        Private columnFOccupation As Global.System.Data.DataColumn
        
        Private columnMother As Global.System.Data.DataColumn
        
        Private columnMOccupation As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnPronoun As Global.System.Data.DataColumn
        
        Private columnPronoun2 As Global.System.Data.DataColumn
        
        Private columnPronoun3 As Global.System.Data.DataColumn
        
        Private columnEthnicity As Global.System.Data.DataColumn
        
        Private columnParentsMonthly As Global.System.Data.DataColumn
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnBrgy As Global.System.Data.DataColumn
        
        Private columnSitio As Global.System.Data.DataColumn
        
        Private columnsettingsID As Global.System.Data.DataColumn
        
        Private columnsemstudentid As Global.System.Data.DataColumn
        
        Private columnStudentNumber1 As Global.System.Data.DataColumn
        
        Private columnFName As Global.System.Data.DataColumn
        
        Private columnMName As Global.System.Data.DataColumn
        
        Private columnLName As Global.System.Data.DataColumn
        
        Private columnCourse1 As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnTerm As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnStudeStatus As Global.System.Data.DataColumn
        
        Private columnScholarship As Global.System.Data.DataColumn
        
        Private columnDurationFrom As Global.System.Data.DataColumn
        
        Private columnDurationTo As Global.System.Data.DataColumn
        
        Private columnAssessmentDate As Global.System.Data.DataColumn
        
        Private columnAssessmentResult As Global.System.Data.DataColumn
        
        Private columnPayingStatus As Global.System.Data.DataColumn
        
        Private columnGrantAmount As Global.System.Data.DataColumn
        
        Private columnYearLevelStat As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnTrack As Global.System.Data.DataColumn
        
        Private columnQualification As Global.System.Data.DataColumn
        
        Private columnBalikAral As Global.System.Data.DataColumn
        
        Private columnIP As Global.System.Data.DataColumn
        
        Private columnFourPs As Global.System.Data.DataColumn
        
        Private columnRepeater As Global.System.Data.DataColumn
        
        Private columnTransferee As Global.System.Data.DataColumn
        
        Private columnEnrolledDate As Global.System.Data.DataColumn
        
        Private columnAdviser As Global.System.Data.DataColumn
        
        Private columnsettingsID1 As Global.System.Data.DataColumn
        
        Private columnsectionID As Global.System.Data.DataColumn
        
        Private columnsettingsID2 As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnSDS As Global.System.Data.DataColumn
        
        Private columnSchoolIDSHS As Global.System.Data.DataColumn
        
        Private columnSchoolIDJHS As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        Private columnRegistrarSHS As Global.System.Data.DataColumn
        
        Private columnRegistrarJHS As Global.System.Data.DataColumn
        
        Private columnGuidanceSHS As Global.System.Data.DataColumn
        
        Private columnGuidanceJHS As Global.System.Data.DataColumn
        
        Private columnmember1Prop As Global.System.Data.DataColumn
        
        Private columnmember2Prop As Global.System.Data.DataColumn
        
        Private columnregion As Global.System.Data.DataColumn
        
        Private columnadas1 As Global.System.Data.DataColumn
        
        Private columnadas1Position As Global.System.Data.DataColumn
        
        Private columnsdsPosition As Global.System.Data.DataColumn
        
        Private _columnRegion As Global.System.Data.DataColumn
        
        Private columnregionAddress As Global.System.Data.DataColumn
        
        Private columnschoolLogo As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columndepedLogo As Global.System.Data.DataColumn
        
        Private columnregionalDirector As Global.System.Data.DataColumn
        
        Private columndirectorPosition As Global.System.Data.DataColumn
        
        Private columndivisionAddress As Global.System.Data.DataColumn
        
        Private columnprofID As Global.System.Data.DataColumn
        
        Private columnprofImage As Global.System.Data.DataColumn
        
        Private columnStudentNumber2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "studentProfile"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CivilStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCivilStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthPlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CitizenshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCitizenship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReligionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReligion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BloodTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBloodType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MobileNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobileNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HighSchoolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHighSchool
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HSAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHSAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CollegeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCollege
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequirementsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequirements
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EncoderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEncoder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdmissionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdmissionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GraduationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGraduationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImagePathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImagePath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElementaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElementary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElemAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElemAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianRelationshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianRelationship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianTelNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianTelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FatherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFather
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMother
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PronounColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pronoun2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pronoun3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EthnicityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEthnicity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentsMonthlyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentsMonthly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BrgyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrgy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SitioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSitio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semstudentidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemstudentid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumber1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Course1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TermColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudeStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudeStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScholarshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScholarship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DurationFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurationFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DurationToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurationTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssessmentDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssessmentDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssessmentResultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssessmentResult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayingStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayingStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrantAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrantAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelStatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevelStat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QualificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQualification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BalikAralColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBalikAral
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FourPsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFourPs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepeaterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepeater
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransfereeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransferee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolledDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolledDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdviserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdviser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsID1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sectionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsectionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsID2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SDSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSDS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolIDSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolIDSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolIDJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolIDJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuidanceSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuidanceSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuidanceJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuidanceJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property member1PropColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmember1Prop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property member2PropColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmember2Prop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adas1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnadas1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adas1PositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadas1Position
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sdsPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsdsPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regionAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregionAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property depedLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndepedLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regionalDirectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregionalDirector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property directorPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndirectorPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property divisionAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndivisionAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property profIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprofID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property profImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprofImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumber2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As studentProfileRow
            Get
                Return CType(Me.Rows(index),studentProfileRow)
            End Get
        End Property
        
        Public Event studentProfileRowChanging As studentProfileRowChangeEventHandler
        
        Public Event studentProfileRowChanged As studentProfileRowChangeEventHandler
        
        Public Event studentProfileRowDeleting As studentProfileRowChangeEventHandler
        
        Public Event studentProfileRowDeleted As studentProfileRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddstudentProfileRow(ByVal row As studentProfileRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddstudentProfileRow( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Sex As String,  _
                    ByVal CivilStatus As String,  _
                    ByVal BirthPlace As String,  _
                    ByVal Citizenship As String,  _
                    ByVal Religion As String,  _
                    ByVal BloodType As String,  _
                    ByVal TelNumber As String,  _
                    ByVal MobileNumber As String,  _
                    ByVal HighSchool As String,  _
                    ByVal HSAddress As String,  _
                    ByVal College As String,  _
                    ByVal CAddress As String,  _
                    ByVal Requirements As String,  _
                    ByVal Encoder As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal AdmissionDate As Date,  _
                    ByVal GraduationDate As Date,  _
                    ByVal Guardian As String,  _
                    ByVal GuardianContact As String,  _
                    ByVal GuardianAddress As String,  _
                    ByVal ImagePath() As Byte,  _
                    ByVal Course As String,  _
                    ByVal Elementary As String,  _
                    ByVal ElemAddress As String,  _
                    ByVal GuardianRelationship As String,  _
                    ByVal GuardianTelNo As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Father As String,  _
                    ByVal FOccupation As String,  _
                    ByVal Mother As String,  _
                    ByVal MOccupation As String,  _
                    ByVal Age As String,  _
                    ByVal Title As String,  _
                    ByVal Pronoun As String,  _
                    ByVal Pronoun2 As String,  _
                    ByVal Pronoun3 As String,  _
                    ByVal Ethnicity As String,  _
                    ByVal ParentsMonthly As Double,  _
                    ByVal Province As String,  _
                    ByVal City As String,  _
                    ByVal Brgy As String,  _
                    ByVal Sitio As String,  _
                    ByVal settingsID As UInteger,  _
                    ByVal semstudentid As UInteger,  _
                    ByVal StudentNumber1 As String,  _
                    ByVal FName As String,  _
                    ByVal MName As String,  _
                    ByVal LName As String,  _
                    ByVal Course1 As String,  _
                    ByVal YearLevel As String,  _
                    ByVal Status As String,  _
                    ByVal Semester As String,  _
                    ByVal SY As String,  _
                    ByVal Term As String,  _
                    ByVal Section As String,  _
                    ByVal StudeStatus As String,  _
                    ByVal Scholarship As String,  _
                    ByVal DurationFrom As String,  _
                    ByVal DurationTo As String,  _
                    ByVal AssessmentDate As String,  _
                    ByVal AssessmentResult As String,  _
                    ByVal PayingStatus As String,  _
                    ByVal GrantAmount As Double,  _
                    ByVal YearLevelStat As String,  _
                    ByVal Major As String,  _
                    ByVal Track As String,  _
                    ByVal Qualification As String,  _
                    ByVal BalikAral As String,  _
                    ByVal IP As String,  _
                    ByVal FourPs As String,  _
                    ByVal Repeater As String,  _
                    ByVal Transferee As String,  _
                    ByVal EnrolledDate As Date,  _
                    ByVal Adviser As String,  _
                    ByVal settingsID1 As UInteger,  _
                    ByVal sectionID As UInteger,  _
                    ByVal settingsID2 As UInteger,  _
                    ByVal Division As String,  _
                    ByVal SDS As String,  _
                    ByVal SchoolIDSHS As String,  _
                    ByVal SchoolIDJHS As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal PropertyCustodian As String,  _
                    ByVal RegistrarSHS As String,  _
                    ByVal RegistrarJHS As String,  _
                    ByVal GuidanceSHS As String,  _
                    ByVal GuidanceJHS As String,  _
                    ByVal member1Prop As String,  _
                    ByVal member2Prop As String,  _
                    ByVal _region As String,  _
                    ByVal adas1 As String,  _
                    ByVal adas1Position As String,  _
                    ByVal sdsPosition As String,  _
                    ByVal __Region As String,  _
                    ByVal regionAddress As String,  _
                    ByVal schoolLogo() As Byte,  _
                    ByVal letterHead() As Byte,  _
                    ByVal depedLogo() As Byte,  _
                    ByVal regionalDirector As String,  _
                    ByVal directorPosition As String,  _
                    ByVal divisionAddress As String,  _
                    ByVal profID As UInteger,  _
                    ByVal profImage() As Byte,  _
                    ByVal StudentNumber2 As String) As studentProfileRow
            Dim rowstudentProfileRow As studentProfileRow = CType(Me.NewRow,studentProfileRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, FirstName, MiddleName, LastName, Sex, CivilStatus, BirthPlace, Citizenship, Religion, BloodType, TelNumber, MobileNumber, HighSchool, HSAddress, College, CAddress, Requirements, Encoder, BirthDate, AdmissionDate, GraduationDate, Guardian, GuardianContact, GuardianAddress, ImagePath, Course, Elementary, ElemAddress, GuardianRelationship, GuardianTelNo, EmailAddress, Father, FOccupation, Mother, MOccupation, Age, Title, Pronoun, Pronoun2, Pronoun3, Ethnicity, ParentsMonthly, Province, City, Brgy, Sitio, settingsID, semstudentid, StudentNumber1, FName, MName, LName, Course1, YearLevel, Status, Semester, SY, Term, Section, StudeStatus, Scholarship, DurationFrom, DurationTo, AssessmentDate, AssessmentResult, PayingStatus, GrantAmount, YearLevelStat, Major, Track, Qualification, BalikAral, IP, FourPs, Repeater, Transferee, EnrolledDate, Adviser, settingsID1, sectionID, settingsID2, Division, SDS, SchoolIDSHS, SchoolIDJHS, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, PropertyCustodian, RegistrarSHS, RegistrarJHS, GuidanceSHS, GuidanceJHS, member1Prop, member2Prop, _region, adas1, adas1Position, sdsPosition, __Region, regionAddress, schoolLogo, letterHead, depedLogo, regionalDirector, directorPosition, divisionAddress, profID, profImage, StudentNumber2}
            rowstudentProfileRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstudentProfileRow)
            Return rowstudentProfileRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As studentProfileRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),studentProfileRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As studentProfileDataTable = CType(MyBase.Clone,studentProfileDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New studentProfileDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnCivilStatus = MyBase.Columns("CivilStatus")
            Me.columnBirthPlace = MyBase.Columns("BirthPlace")
            Me.columnCitizenship = MyBase.Columns("Citizenship")
            Me.columnReligion = MyBase.Columns("Religion")
            Me.columnBloodType = MyBase.Columns("BloodType")
            Me.columnTelNumber = MyBase.Columns("TelNumber")
            Me.columnMobileNumber = MyBase.Columns("MobileNumber")
            Me.columnHighSchool = MyBase.Columns("HighSchool")
            Me.columnHSAddress = MyBase.Columns("HSAddress")
            Me.columnCollege = MyBase.Columns("College")
            Me.columnCAddress = MyBase.Columns("CAddress")
            Me.columnRequirements = MyBase.Columns("Requirements")
            Me.columnEncoder = MyBase.Columns("Encoder")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnAdmissionDate = MyBase.Columns("AdmissionDate")
            Me.columnGraduationDate = MyBase.Columns("GraduationDate")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnGuardianContact = MyBase.Columns("GuardianContact")
            Me.columnGuardianAddress = MyBase.Columns("GuardianAddress")
            Me.columnImagePath = MyBase.Columns("ImagePath")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnElementary = MyBase.Columns("Elementary")
            Me.columnElemAddress = MyBase.Columns("ElemAddress")
            Me.columnGuardianRelationship = MyBase.Columns("GuardianRelationship")
            Me.columnGuardianTelNo = MyBase.Columns("GuardianTelNo")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnFather = MyBase.Columns("Father")
            Me.columnFOccupation = MyBase.Columns("FOccupation")
            Me.columnMother = MyBase.Columns("Mother")
            Me.columnMOccupation = MyBase.Columns("MOccupation")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnPronoun = MyBase.Columns("Pronoun")
            Me.columnPronoun2 = MyBase.Columns("Pronoun2")
            Me.columnPronoun3 = MyBase.Columns("Pronoun3")
            Me.columnEthnicity = MyBase.Columns("Ethnicity")
            Me.columnParentsMonthly = MyBase.Columns("ParentsMonthly")
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnCity = MyBase.Columns("City")
            Me.columnBrgy = MyBase.Columns("Brgy")
            Me.columnSitio = MyBase.Columns("Sitio")
            Me.columnsettingsID = MyBase.Columns("settingsID")
            Me.columnsemstudentid = MyBase.Columns("semstudentid")
            Me.columnStudentNumber1 = MyBase.Columns("StudentNumber1")
            Me.columnFName = MyBase.Columns("FName")
            Me.columnMName = MyBase.Columns("MName")
            Me.columnLName = MyBase.Columns("LName")
            Me.columnCourse1 = MyBase.Columns("Course1")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnTerm = MyBase.Columns("Term")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnStudeStatus = MyBase.Columns("StudeStatus")
            Me.columnScholarship = MyBase.Columns("Scholarship")
            Me.columnDurationFrom = MyBase.Columns("DurationFrom")
            Me.columnDurationTo = MyBase.Columns("DurationTo")
            Me.columnAssessmentDate = MyBase.Columns("AssessmentDate")
            Me.columnAssessmentResult = MyBase.Columns("AssessmentResult")
            Me.columnPayingStatus = MyBase.Columns("PayingStatus")
            Me.columnGrantAmount = MyBase.Columns("GrantAmount")
            Me.columnYearLevelStat = MyBase.Columns("YearLevelStat")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnTrack = MyBase.Columns("Track")
            Me.columnQualification = MyBase.Columns("Qualification")
            Me.columnBalikAral = MyBase.Columns("BalikAral")
            Me.columnIP = MyBase.Columns("IP")
            Me.columnFourPs = MyBase.Columns("FourPs")
            Me.columnRepeater = MyBase.Columns("Repeater")
            Me.columnTransferee = MyBase.Columns("Transferee")
            Me.columnEnrolledDate = MyBase.Columns("EnrolledDate")
            Me.columnAdviser = MyBase.Columns("Adviser")
            Me.columnsettingsID1 = MyBase.Columns("settingsID1")
            Me.columnsectionID = MyBase.Columns("sectionID")
            Me.columnsettingsID2 = MyBase.Columns("settingsID2")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnSDS = MyBase.Columns("SDS")
            Me.columnSchoolIDSHS = MyBase.Columns("SchoolIDSHS")
            Me.columnSchoolIDJHS = MyBase.Columns("SchoolIDJHS")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
            Me.columnRegistrarSHS = MyBase.Columns("RegistrarSHS")
            Me.columnRegistrarJHS = MyBase.Columns("RegistrarJHS")
            Me.columnGuidanceSHS = MyBase.Columns("GuidanceSHS")
            Me.columnGuidanceJHS = MyBase.Columns("GuidanceJHS")
            Me.columnmember1Prop = MyBase.Columns("member1Prop")
            Me.columnmember2Prop = MyBase.Columns("member2Prop")
            Me.columnregion = MyBase.Columns("region")
            Me.columnadas1 = MyBase.Columns("adas1")
            Me.columnadas1Position = MyBase.Columns("adas1Position")
            Me.columnsdsPosition = MyBase.Columns("sdsPosition")
            Me._columnRegion = MyBase.Columns("Region")
            Me.columnregionAddress = MyBase.Columns("regionAddress")
            Me.columnschoolLogo = MyBase.Columns("schoolLogo")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columndepedLogo = MyBase.Columns("depedLogo")
            Me.columnregionalDirector = MyBase.Columns("regionalDirector")
            Me.columndirectorPosition = MyBase.Columns("directorPosition")
            Me.columndivisionAddress = MyBase.Columns("divisionAddress")
            Me.columnprofID = MyBase.Columns("profID")
            Me.columnprofImage = MyBase.Columns("profImage")
            Me.columnStudentNumber2 = MyBase.Columns("StudentNumber2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnCivilStatus = New Global.System.Data.DataColumn("CivilStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCivilStatus)
            Me.columnBirthPlace = New Global.System.Data.DataColumn("BirthPlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthPlace)
            Me.columnCitizenship = New Global.System.Data.DataColumn("Citizenship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCitizenship)
            Me.columnReligion = New Global.System.Data.DataColumn("Religion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReligion)
            Me.columnBloodType = New Global.System.Data.DataColumn("BloodType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBloodType)
            Me.columnTelNumber = New Global.System.Data.DataColumn("TelNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelNumber)
            Me.columnMobileNumber = New Global.System.Data.DataColumn("MobileNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobileNumber)
            Me.columnHighSchool = New Global.System.Data.DataColumn("HighSchool", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHighSchool)
            Me.columnHSAddress = New Global.System.Data.DataColumn("HSAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHSAddress)
            Me.columnCollege = New Global.System.Data.DataColumn("College", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCollege)
            Me.columnCAddress = New Global.System.Data.DataColumn("CAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAddress)
            Me.columnRequirements = New Global.System.Data.DataColumn("Requirements", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequirements)
            Me.columnEncoder = New Global.System.Data.DataColumn("Encoder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEncoder)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnAdmissionDate = New Global.System.Data.DataColumn("AdmissionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdmissionDate)
            Me.columnGraduationDate = New Global.System.Data.DataColumn("GraduationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGraduationDate)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnGuardianContact = New Global.System.Data.DataColumn("GuardianContact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianContact)
            Me.columnGuardianAddress = New Global.System.Data.DataColumn("GuardianAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianAddress)
            Me.columnImagePath = New Global.System.Data.DataColumn("ImagePath", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImagePath)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnElementary = New Global.System.Data.DataColumn("Elementary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElementary)
            Me.columnElemAddress = New Global.System.Data.DataColumn("ElemAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElemAddress)
            Me.columnGuardianRelationship = New Global.System.Data.DataColumn("GuardianRelationship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianRelationship)
            Me.columnGuardianTelNo = New Global.System.Data.DataColumn("GuardianTelNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianTelNo)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnFather = New Global.System.Data.DataColumn("Father", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFather)
            Me.columnFOccupation = New Global.System.Data.DataColumn("FOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOccupation)
            Me.columnMother = New Global.System.Data.DataColumn("Mother", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMother)
            Me.columnMOccupation = New Global.System.Data.DataColumn("MOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOccupation)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnPronoun = New Global.System.Data.DataColumn("Pronoun", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun)
            Me.columnPronoun2 = New Global.System.Data.DataColumn("Pronoun2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun2)
            Me.columnPronoun3 = New Global.System.Data.DataColumn("Pronoun3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun3)
            Me.columnEthnicity = New Global.System.Data.DataColumn("Ethnicity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEthnicity)
            Me.columnParentsMonthly = New Global.System.Data.DataColumn("ParentsMonthly", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentsMonthly)
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnBrgy = New Global.System.Data.DataColumn("Brgy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrgy)
            Me.columnSitio = New Global.System.Data.DataColumn("Sitio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSitio)
            Me.columnsettingsID = New Global.System.Data.DataColumn("settingsID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID)
            Me.columnsemstudentid = New Global.System.Data.DataColumn("semstudentid", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemstudentid)
            Me.columnStudentNumber1 = New Global.System.Data.DataColumn("StudentNumber1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber1)
            Me.columnFName = New Global.System.Data.DataColumn("FName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFName)
            Me.columnMName = New Global.System.Data.DataColumn("MName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMName)
            Me.columnLName = New Global.System.Data.DataColumn("LName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLName)
            Me.columnCourse1 = New Global.System.Data.DataColumn("Course1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse1)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnTerm = New Global.System.Data.DataColumn("Term", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerm)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnStudeStatus = New Global.System.Data.DataColumn("StudeStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudeStatus)
            Me.columnScholarship = New Global.System.Data.DataColumn("Scholarship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScholarship)
            Me.columnDurationFrom = New Global.System.Data.DataColumn("DurationFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurationFrom)
            Me.columnDurationTo = New Global.System.Data.DataColumn("DurationTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurationTo)
            Me.columnAssessmentDate = New Global.System.Data.DataColumn("AssessmentDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssessmentDate)
            Me.columnAssessmentResult = New Global.System.Data.DataColumn("AssessmentResult", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssessmentResult)
            Me.columnPayingStatus = New Global.System.Data.DataColumn("PayingStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayingStatus)
            Me.columnGrantAmount = New Global.System.Data.DataColumn("GrantAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrantAmount)
            Me.columnYearLevelStat = New Global.System.Data.DataColumn("YearLevelStat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevelStat)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnTrack = New Global.System.Data.DataColumn("Track", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrack)
            Me.columnQualification = New Global.System.Data.DataColumn("Qualification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQualification)
            Me.columnBalikAral = New Global.System.Data.DataColumn("BalikAral", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBalikAral)
            Me.columnIP = New Global.System.Data.DataColumn("IP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIP)
            Me.columnFourPs = New Global.System.Data.DataColumn("FourPs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFourPs)
            Me.columnRepeater = New Global.System.Data.DataColumn("Repeater", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepeater)
            Me.columnTransferee = New Global.System.Data.DataColumn("Transferee", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransferee)
            Me.columnEnrolledDate = New Global.System.Data.DataColumn("EnrolledDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolledDate)
            Me.columnAdviser = New Global.System.Data.DataColumn("Adviser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdviser)
            Me.columnsettingsID1 = New Global.System.Data.DataColumn("settingsID1", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID1)
            Me.columnsectionID = New Global.System.Data.DataColumn("sectionID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsectionID)
            Me.columnsettingsID2 = New Global.System.Data.DataColumn("settingsID2", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID2)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnSDS = New Global.System.Data.DataColumn("SDS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSDS)
            Me.columnSchoolIDSHS = New Global.System.Data.DataColumn("SchoolIDSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolIDSHS)
            Me.columnSchoolIDJHS = New Global.System.Data.DataColumn("SchoolIDJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolIDJHS)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columnRegistrarSHS = New Global.System.Data.DataColumn("RegistrarSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarSHS)
            Me.columnRegistrarJHS = New Global.System.Data.DataColumn("RegistrarJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarJHS)
            Me.columnGuidanceSHS = New Global.System.Data.DataColumn("GuidanceSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuidanceSHS)
            Me.columnGuidanceJHS = New Global.System.Data.DataColumn("GuidanceJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuidanceJHS)
            Me.columnmember1Prop = New Global.System.Data.DataColumn("member1Prop", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmember1Prop)
            Me.columnmember2Prop = New Global.System.Data.DataColumn("member2Prop", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmember2Prop)
            Me.columnregion = New Global.System.Data.DataColumn("region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnregion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "regionColumn")
            Me.columnregion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnregion")
            Me.columnregion.ExtendedProperties.Add("Generator_UserColumnName", "region")
            MyBase.Columns.Add(Me.columnregion)
            Me.columnadas1 = New Global.System.Data.DataColumn("adas1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadas1)
            Me.columnadas1Position = New Global.System.Data.DataColumn("adas1Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadas1Position)
            Me.columnsdsPosition = New Global.System.Data.DataColumn("sdsPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsdsPosition)
            Me._columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "__Region")
            Me._columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnRegion")
            Me._columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me._columnRegion)
            Me.columnregionAddress = New Global.System.Data.DataColumn("regionAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregionAddress)
            Me.columnschoolLogo = New Global.System.Data.DataColumn("schoolLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolLogo)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columndepedLogo = New Global.System.Data.DataColumn("depedLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndepedLogo)
            Me.columnregionalDirector = New Global.System.Data.DataColumn("regionalDirector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregionalDirector)
            Me.columndirectorPosition = New Global.System.Data.DataColumn("directorPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirectorPosition)
            Me.columndivisionAddress = New Global.System.Data.DataColumn("divisionAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndivisionAddress)
            Me.columnprofID = New Global.System.Data.DataColumn("profID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprofID)
            Me.columnprofImage = New Global.System.Data.DataColumn("profImage", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprofImage)
            Me.columnStudentNumber2 = New Global.System.Data.DataColumn("StudentNumber2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFirstName.MaxLength = 60
            Me.columnMiddleName.MaxLength = 60
            Me.columnLastName.MaxLength = 60
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnCivilStatus.AllowDBNull = false
            Me.columnCivilStatus.MaxLength = 45
            Me.columnBirthPlace.AllowDBNull = false
            Me.columnBirthPlace.MaxLength = 250
            Me.columnCitizenship.AllowDBNull = false
            Me.columnCitizenship.MaxLength = 45
            Me.columnReligion.AllowDBNull = false
            Me.columnReligion.MaxLength = 100
            Me.columnBloodType.AllowDBNull = false
            Me.columnBloodType.MaxLength = 45
            Me.columnTelNumber.AllowDBNull = false
            Me.columnTelNumber.MaxLength = 45
            Me.columnMobileNumber.AllowDBNull = false
            Me.columnMobileNumber.MaxLength = 45
            Me.columnHighSchool.AllowDBNull = false
            Me.columnHighSchool.MaxLength = 150
            Me.columnHSAddress.AllowDBNull = false
            Me.columnHSAddress.MaxLength = 150
            Me.columnCollege.AllowDBNull = false
            Me.columnCollege.MaxLength = 150
            Me.columnCAddress.AllowDBNull = false
            Me.columnCAddress.MaxLength = 150
            Me.columnRequirements.AllowDBNull = false
            Me.columnRequirements.MaxLength = 65535
            Me.columnEncoder.AllowDBNull = false
            Me.columnEncoder.MaxLength = 100
            Me.columnBirthDate.AllowDBNull = false
            Me.columnAdmissionDate.AllowDBNull = false
            Me.columnGraduationDate.AllowDBNull = false
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 150
            Me.columnGuardianContact.AllowDBNull = false
            Me.columnGuardianContact.MaxLength = 45
            Me.columnGuardianAddress.AllowDBNull = false
            Me.columnGuardianAddress.MaxLength = 250
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 250
            Me.columnElementary.AllowDBNull = false
            Me.columnElementary.MaxLength = 150
            Me.columnElemAddress.AllowDBNull = false
            Me.columnElemAddress.MaxLength = 150
            Me.columnGuardianRelationship.AllowDBNull = false
            Me.columnGuardianRelationship.MaxLength = 65
            Me.columnGuardianTelNo.AllowDBNull = false
            Me.columnGuardianTelNo.MaxLength = 45
            Me.columnEmailAddress.AllowDBNull = false
            Me.columnEmailAddress.MaxLength = 65
            Me.columnFather.AllowDBNull = false
            Me.columnFather.MaxLength = 65
            Me.columnFOccupation.AllowDBNull = false
            Me.columnFOccupation.MaxLength = 65
            Me.columnMother.AllowDBNull = false
            Me.columnMother.MaxLength = 65
            Me.columnMOccupation.AllowDBNull = false
            Me.columnMOccupation.MaxLength = 65
            Me.columnAge.AllowDBNull = false
            Me.columnAge.MaxLength = 2
            Me.columnTitle.AllowDBNull = false
            Me.columnTitle.MaxLength = 45
            Me.columnPronoun.AllowDBNull = false
            Me.columnPronoun.MaxLength = 45
            Me.columnPronoun2.AllowDBNull = false
            Me.columnPronoun2.MaxLength = 45
            Me.columnPronoun3.AllowDBNull = false
            Me.columnPronoun3.MaxLength = 45
            Me.columnEthnicity.AllowDBNull = false
            Me.columnEthnicity.MaxLength = 100
            Me.columnParentsMonthly.AllowDBNull = false
            Me.columnProvince.AllowDBNull = false
            Me.columnProvince.MaxLength = 65
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 65
            Me.columnBrgy.AllowDBNull = false
            Me.columnBrgy.MaxLength = 65
            Me.columnSitio.AllowDBNull = false
            Me.columnSitio.MaxLength = 65
            Me.columnsettingsID.AllowDBNull = false
            Me.columnsemstudentid.AllowDBNull = false
            Me.columnStudentNumber1.MaxLength = 45
            Me.columnFName.MaxLength = 45
            Me.columnMName.MaxLength = 45
            Me.columnLName.MaxLength = 45
            Me.columnCourse1.MaxLength = 250
            Me.columnYearLevel.MaxLength = 45
            Me.columnStatus.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnTerm.MaxLength = 45
            Me.columnSection.MaxLength = 150
            Me.columnStudeStatus.AllowDBNull = false
            Me.columnStudeStatus.MaxLength = 45
            Me.columnScholarship.AllowDBNull = false
            Me.columnScholarship.MaxLength = 150
            Me.columnDurationFrom.AllowDBNull = false
            Me.columnDurationFrom.MaxLength = 45
            Me.columnDurationTo.AllowDBNull = false
            Me.columnDurationTo.MaxLength = 45
            Me.columnAssessmentDate.AllowDBNull = false
            Me.columnAssessmentDate.MaxLength = 45
            Me.columnAssessmentResult.AllowDBNull = false
            Me.columnAssessmentResult.MaxLength = 45
            Me.columnPayingStatus.AllowDBNull = false
            Me.columnPayingStatus.MaxLength = 45
            Me.columnGrantAmount.AllowDBNull = false
            Me.columnYearLevelStat.AllowDBNull = false
            Me.columnYearLevelStat.MaxLength = 45
            Me.columnMajor.AllowDBNull = false
            Me.columnMajor.MaxLength = 65
            Me.columnTrack.AllowDBNull = false
            Me.columnTrack.MaxLength = 100
            Me.columnQualification.AllowDBNull = false
            Me.columnQualification.MaxLength = 100
            Me.columnBalikAral.AllowDBNull = false
            Me.columnBalikAral.MaxLength = 45
            Me.columnIP.AllowDBNull = false
            Me.columnIP.MaxLength = 45
            Me.columnFourPs.AllowDBNull = false
            Me.columnFourPs.MaxLength = 45
            Me.columnRepeater.AllowDBNull = false
            Me.columnRepeater.MaxLength = 45
            Me.columnTransferee.AllowDBNull = false
            Me.columnTransferee.MaxLength = 45
            Me.columnEnrolledDate.AllowDBNull = false
            Me.columnAdviser.AllowDBNull = false
            Me.columnAdviser.MaxLength = 100
            Me.columnsettingsID1.AllowDBNull = false
            Me.columnsectionID.AllowDBNull = false
            Me.columnsettingsID2.AllowDBNull = false
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnSDS.MaxLength = 65
            Me.columnSchoolIDSHS.AllowDBNull = false
            Me.columnSchoolIDSHS.MaxLength = 45
            Me.columnSchoolIDJHS.AllowDBNull = false
            Me.columnSchoolIDJHS.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 65
            Me.columnRegistrarSHS.AllowDBNull = false
            Me.columnRegistrarSHS.MaxLength = 65
            Me.columnRegistrarJHS.AllowDBNull = false
            Me.columnRegistrarJHS.MaxLength = 65
            Me.columnGuidanceSHS.AllowDBNull = false
            Me.columnGuidanceSHS.MaxLength = 65
            Me.columnGuidanceJHS.AllowDBNull = false
            Me.columnGuidanceJHS.MaxLength = 65
            Me.columnmember1Prop.AllowDBNull = false
            Me.columnmember1Prop.MaxLength = 65
            Me.columnmember2Prop.AllowDBNull = false
            Me.columnmember2Prop.MaxLength = 65
            Me.columnregion.AllowDBNull = false
            Me.columnregion.MaxLength = 45
            Me.columnadas1.AllowDBNull = false
            Me.columnadas1.MaxLength = 100
            Me.columnadas1Position.AllowDBNull = false
            Me.columnadas1Position.MaxLength = 65
            Me.columnsdsPosition.AllowDBNull = false
            Me.columnsdsPosition.MaxLength = 45
            Me._columnRegion.MaxLength = 45
            Me.columnregionAddress.AllowDBNull = false
            Me.columnregionAddress.MaxLength = 150
            Me.columnregionalDirector.AllowDBNull = false
            Me.columnregionalDirector.MaxLength = 60
            Me.columndirectorPosition.AllowDBNull = false
            Me.columndirectorPosition.MaxLength = 60
            Me.columndivisionAddress.AllowDBNull = false
            Me.columndivisionAddress.MaxLength = 100
            Me.columnprofID.AllowDBNull = false
            Me.columnStudentNumber2.AllowDBNull = false
            Me.columnStudentNumber2.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewstudentProfileRow() As studentProfileRow
            Return CType(Me.NewRow,studentProfileRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New studentProfileRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(studentProfileRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.studentProfileRowChangedEvent) Is Nothing) Then
                RaiseEvent studentProfileRowChanged(Me, New studentProfileRowChangeEvent(CType(e.Row,studentProfileRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.studentProfileRowChangingEvent) Is Nothing) Then
                RaiseEvent studentProfileRowChanging(Me, New studentProfileRowChangeEvent(CType(e.Row,studentProfileRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.studentProfileRowDeletedEvent) Is Nothing) Then
                RaiseEvent studentProfileRowDeleted(Me, New studentProfileRowChangeEvent(CType(e.Row,studentProfileRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.studentProfileRowDeletingEvent) Is Nothing) Then
                RaiseEvent studentProfileRowDeleting(Me, New studentProfileRowChangeEvent(CType(e.Row,studentProfileRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovestudentProfileRow(ByVal row As studentProfileRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports3 = New Reports3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "studentProfileDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClassReplacementDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClassReplacementRow)
        
        Private columnIDNumber As Global.System.Data.DataColumn
        
        Private columnempPosition As Global.System.Data.DataColumn
        
        Private columnschedTime As Global.System.Data.DataColumn
        
        Private columnsubject As Global.System.Data.DataColumn
        
        Private columngradeLevel As Global.System.Data.DataColumn
        
        Private columnreplacement As Global.System.Data.DataColumn
        
        Private columnapplicableDate As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columndateFrom As Global.System.Data.DataColumn
        
        Private columndateTo As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClassReplacement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property empPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnempPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schedTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschedTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradeLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradeLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property replacementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreplacement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property applicableDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapplicableDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClassReplacementRow
            Get
                Return CType(Me.Rows(index),ClassReplacementRow)
            End Get
        End Property
        
        Public Event ClassReplacementRowChanging As ClassReplacementRowChangeEventHandler
        
        Public Event ClassReplacementRowChanged As ClassReplacementRowChangeEventHandler
        
        Public Event ClassReplacementRowDeleting As ClassReplacementRowChangeEventHandler
        
        Public Event ClassReplacementRowDeleted As ClassReplacementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClassReplacementRow(ByVal row As ClassReplacementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClassReplacementRow( _
                    ByVal IDNumber As String,  _
                    ByVal empPosition As String,  _
                    ByVal schedTime As String,  _
                    ByVal subject As String,  _
                    ByVal gradeLevel As String,  _
                    ByVal replacement As String,  _
                    ByVal applicableDate As String,  _
                    ByVal Division As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal _Region As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal dateFrom As Date,  _
                    ByVal dateTo As Date,  _
                    ByVal letterHead() As Byte) As ClassReplacementRow
            Dim rowClassReplacementRow As ClassReplacementRow = CType(Me.NewRow,ClassReplacementRow)
            Dim columnValuesArray() As Object = New Object() {IDNumber, empPosition, schedTime, subject, gradeLevel, replacement, applicableDate, Division, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, _Region, FirstName, MiddleName, LastName, dateFrom, dateTo, letterHead}
            rowClassReplacementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClassReplacementRow)
            Return rowClassReplacementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDNumber(ByVal IDNumber As String) As ClassReplacementRow
            Return CType(Me.Rows.Find(New Object() {IDNumber}),ClassReplacementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClassReplacementDataTable = CType(MyBase.Clone,ClassReplacementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClassReplacementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDNumber = MyBase.Columns("IDNumber")
            Me.columnempPosition = MyBase.Columns("empPosition")
            Me.columnschedTime = MyBase.Columns("schedTime")
            Me.columnsubject = MyBase.Columns("subject")
            Me.columngradeLevel = MyBase.Columns("gradeLevel")
            Me.columnreplacement = MyBase.Columns("replacement")
            Me.columnapplicableDate = MyBase.Columns("applicableDate")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnRegion = MyBase.Columns("Region")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columndateFrom = MyBase.Columns("dateFrom")
            Me.columndateTo = MyBase.Columns("dateTo")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDNumber = New Global.System.Data.DataColumn("IDNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDNumber)
            Me.columnempPosition = New Global.System.Data.DataColumn("empPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnempPosition)
            Me.columnschedTime = New Global.System.Data.DataColumn("schedTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschedTime)
            Me.columnsubject = New Global.System.Data.DataColumn("subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubject)
            Me.columngradeLevel = New Global.System.Data.DataColumn("gradeLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradeLevel)
            Me.columnreplacement = New Global.System.Data.DataColumn("replacement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreplacement)
            Me.columnapplicableDate = New Global.System.Data.DataColumn("applicableDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapplicableDate)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columndateFrom = New Global.System.Data.DataColumn("dateFrom", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateFrom)
            Me.columndateTo = New Global.System.Data.DataColumn("dateTo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateTo)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDNumber}, true))
            Me.columnIDNumber.AllowDBNull = false
            Me.columnIDNumber.Unique = true
            Me.columnIDNumber.MaxLength = 25
            Me.columnempPosition.AllowDBNull = false
            Me.columnempPosition.MaxLength = 65
            Me.columnschedTime.AllowDBNull = false
            Me.columnschedTime.MaxLength = 65
            Me.columnsubject.AllowDBNull = false
            Me.columnsubject.MaxLength = 65
            Me.columngradeLevel.AllowDBNull = false
            Me.columngradeLevel.MaxLength = 65
            Me.columnreplacement.AllowDBNull = false
            Me.columnreplacement.MaxLength = 65
            Me.columnapplicableDate.AllowDBNull = false
            Me.columnapplicableDate.MaxLength = 65
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnRegion.MaxLength = 45
            Me.columnFirstName.MaxLength = 45
            Me.columnMiddleName.MaxLength = 65
            Me.columnLastName.MaxLength = 65
            Me.columndateFrom.AllowDBNull = false
            Me.columndateTo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClassReplacementRow() As ClassReplacementRow
            Return CType(Me.NewRow,ClassReplacementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClassReplacementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClassReplacementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClassReplacementRowChangedEvent) Is Nothing) Then
                RaiseEvent ClassReplacementRowChanged(Me, New ClassReplacementRowChangeEvent(CType(e.Row,ClassReplacementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClassReplacementRowChangingEvent) Is Nothing) Then
                RaiseEvent ClassReplacementRowChanging(Me, New ClassReplacementRowChangeEvent(CType(e.Row,ClassReplacementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClassReplacementRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClassReplacementRowDeleted(Me, New ClassReplacementRowChangeEvent(CType(e.Row,ClassReplacementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClassReplacementRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClassReplacementRowDeleting(Me, New ClassReplacementRowChangeEvent(CType(e.Row,ClassReplacementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClassReplacementRow(ByVal row As ClassReplacementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports3 = New Reports3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClassReplacementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class collectionReport1DataTable
        Inherits Global.System.Data.TypedTableBase(Of collectionReport1Row)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnPDate As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnORNumber As Global.System.Data.DataColumn
        
        Private columnCashier As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "collectionReport1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As collectionReport1Row
            Get
                Return CType(Me.Rows(index),collectionReport1Row)
            End Get
        End Property
        
        Public Event collectionReport1RowChanging As collectionReport1RowChangeEventHandler
        
        Public Event collectionReport1RowChanged As collectionReport1RowChangeEventHandler
        
        Public Event collectionReport1RowDeleting As collectionReport1RowChangeEventHandler
        
        Public Event collectionReport1RowDeleted As collectionReport1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcollectionReport1Row(ByVal row As collectionReport1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcollectionReport1Row(ByVal StudentNumber As String, ByVal StudentName As String, ByVal PDate As Date, ByVal Amount As Double, ByVal ORNumber As String, ByVal Cashier As String, ByVal Course As String, ByVal YearLevel As String, ByVal Sem As String, ByVal SY As String, ByVal SchoolName As String, ByVal SchoolAddress As String, ByVal description As String, ByVal letterHead() As Byte) As collectionReport1Row
            Dim rowcollectionReport1Row As collectionReport1Row = CType(Me.NewRow,collectionReport1Row)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, StudentName, PDate, Amount, ORNumber, Cashier, Course, YearLevel, Sem, SY, SchoolName, SchoolAddress, description, letterHead}
            rowcollectionReport1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowcollectionReport1Row)
            Return rowcollectionReport1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As collectionReport1Row
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),collectionReport1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As collectionReport1DataTable = CType(MyBase.Clone,collectionReport1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New collectionReport1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnPDate = MyBase.Columns("PDate")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnORNumber = MyBase.Columns("ORNumber")
            Me.columnCashier = MyBase.Columns("Cashier")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columndescription = MyBase.Columns("description")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnPDate = New Global.System.Data.DataColumn("PDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDate)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnORNumber = New Global.System.Data.DataColumn("ORNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORNumber)
            Me.columnCashier = New Global.System.Data.DataColumn("Cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashier)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudentName.MaxLength = 183
            Me.columnPDate.AllowDBNull = false
            Me.columnAmount.AllowDBNull = false
            Me.columnORNumber.AllowDBNull = false
            Me.columnORNumber.MaxLength = 45
            Me.columnCashier.AllowDBNull = false
            Me.columnCashier.MaxLength = 45
            Me.columnCourse.MaxLength = 45
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columndescription.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcollectionReport1Row() As collectionReport1Row
            Return CType(Me.NewRow,collectionReport1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New collectionReport1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(collectionReport1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.collectionReport1RowChangedEvent) Is Nothing) Then
                RaiseEvent collectionReport1RowChanged(Me, New collectionReport1RowChangeEvent(CType(e.Row,collectionReport1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.collectionReport1RowChangingEvent) Is Nothing) Then
                RaiseEvent collectionReport1RowChanging(Me, New collectionReport1RowChangeEvent(CType(e.Row,collectionReport1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.collectionReport1RowDeletedEvent) Is Nothing) Then
                RaiseEvent collectionReport1RowDeleted(Me, New collectionReport1RowChangeEvent(CType(e.Row,collectionReport1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.collectionReport1RowDeletingEvent) Is Nothing) Then
                RaiseEvent collectionReport1RowDeleting(Me, New collectionReport1RowChangeEvent(CType(e.Row,collectionReport1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecollectionReport1Row(ByVal row As collectionReport1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports3 = New Reports3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "collectionReport1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CAVRequestDataTable
        Inherits Global.System.Data.TypedTableBase(Of CAVRequestRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnBirthPlace As Global.System.Data.DataColumn
        
        Private columnpresentAddress As Global.System.Data.DataColumn
        
        Private columnMobileNumber As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolIDJHS As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnRegion1 As Global.System.Data.DataColumn
        
        Private columnctrlNo As Global.System.Data.DataColumn
        
        Private columnapplicationDate As Global.System.Data.DataColumn
        
        Private columnpurpose As Global.System.Data.DataColumn
        
        Private columnreleasedDate As Global.System.Data.DataColumn
        
        Private columnPronoun3 As Global.System.Data.DataColumn
        
        Private columnregionAddress As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CAVRequest"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthPlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property presentAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpresentAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MobileNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobileNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolIDJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolIDJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Region1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctrlNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctrlNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property applicationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapplicationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property purposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpurpose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property releasedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreleasedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pronoun3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regionAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregionAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CAVRequestRow
            Get
                Return CType(Me.Rows(index),CAVRequestRow)
            End Get
        End Property
        
        Public Event CAVRequestRowChanging As CAVRequestRowChangeEventHandler
        
        Public Event CAVRequestRowChanged As CAVRequestRowChangeEventHandler
        
        Public Event CAVRequestRowDeleting As CAVRequestRowChangeEventHandler
        
        Public Event CAVRequestRowDeleted As CAVRequestRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCAVRequestRow(ByVal row As CAVRequestRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCAVRequestRow( _
                    ByVal StudentNumber As String,  _
                    ByVal StudentName As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal BirthPlace As String,  _
                    ByVal presentAddress As String,  _
                    ByVal MobileNumber As String,  _
                    ByVal SY As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolIDJHS As String,  _
                    ByVal _Region As String,  _
                    ByVal Division As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal Region1 As String,  _
                    ByVal ctrlNo As String,  _
                    ByVal applicationDate As Date,  _
                    ByVal purpose As String,  _
                    ByVal releasedDate As String,  _
                    ByVal Pronoun3 As String,  _
                    ByVal regionAddress As String,  _
                    ByVal letterHead() As Byte) As CAVRequestRow
            Dim rowCAVRequestRow As CAVRequestRow = CType(Me.NewRow,CAVRequestRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, StudentName, BirthDate, BirthPlace, presentAddress, MobileNumber, SY, SchoolName, SchoolAddress, SchoolIDJHS, _Region, Division, SchoolHead, sHeadPosition, Region1, ctrlNo, applicationDate, purpose, releasedDate, Pronoun3, regionAddress, letterHead}
            rowCAVRequestRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCAVRequestRow)
            Return rowCAVRequestRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumberctrlNo(ByVal StudentNumber As String, ByVal ctrlNo As String) As CAVRequestRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber, ctrlNo}),CAVRequestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CAVRequestDataTable = CType(MyBase.Clone,CAVRequestDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CAVRequestDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnBirthPlace = MyBase.Columns("BirthPlace")
            Me.columnpresentAddress = MyBase.Columns("presentAddress")
            Me.columnMobileNumber = MyBase.Columns("MobileNumber")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolIDJHS = MyBase.Columns("SchoolIDJHS")
            Me.columnRegion = MyBase.Columns("Region")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnRegion1 = MyBase.Columns("Region1")
            Me.columnctrlNo = MyBase.Columns("ctrlNo")
            Me.columnapplicationDate = MyBase.Columns("applicationDate")
            Me.columnpurpose = MyBase.Columns("purpose")
            Me.columnreleasedDate = MyBase.Columns("releasedDate")
            Me.columnPronoun3 = MyBase.Columns("Pronoun3")
            Me.columnregionAddress = MyBase.Columns("regionAddress")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnBirthPlace = New Global.System.Data.DataColumn("BirthPlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthPlace)
            Me.columnpresentAddress = New Global.System.Data.DataColumn("presentAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpresentAddress)
            Me.columnMobileNumber = New Global.System.Data.DataColumn("MobileNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobileNumber)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolIDJHS = New Global.System.Data.DataColumn("SchoolIDJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolIDJHS)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnRegion1 = New Global.System.Data.DataColumn("Region1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegion1)
            Me.columnctrlNo = New Global.System.Data.DataColumn("ctrlNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctrlNo)
            Me.columnapplicationDate = New Global.System.Data.DataColumn("applicationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapplicationDate)
            Me.columnpurpose = New Global.System.Data.DataColumn("purpose", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpurpose)
            Me.columnreleasedDate = New Global.System.Data.DataColumn("releasedDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreleasedDate)
            Me.columnPronoun3 = New Global.System.Data.DataColumn("Pronoun3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun3)
            Me.columnregionAddress = New Global.System.Data.DataColumn("regionAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregionAddress)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber, Me.columnctrlNo}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudentName.MaxLength = 182
            Me.columnBirthDate.AllowDBNull = false
            Me.columnBirthPlace.AllowDBNull = false
            Me.columnBirthPlace.MaxLength = 250
            Me.columnpresentAddress.MaxLength = 263
            Me.columnMobileNumber.AllowDBNull = false
            Me.columnMobileNumber.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolIDJHS.AllowDBNull = false
            Me.columnSchoolIDJHS.MaxLength = 45
            Me.columnRegion.MaxLength = 45
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnRegion1.MaxLength = 45
            Me.columnctrlNo.AllowDBNull = false
            Me.columnctrlNo.MaxLength = 12
            Me.columnapplicationDate.AllowDBNull = false
            Me.columnpurpose.AllowDBNull = false
            Me.columnpurpose.MaxLength = 60
            Me.columnreleasedDate.AllowDBNull = false
            Me.columnreleasedDate.MaxLength = 45
            Me.columnPronoun3.AllowDBNull = false
            Me.columnPronoun3.MaxLength = 45
            Me.columnregionAddress.AllowDBNull = false
            Me.columnregionAddress.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCAVRequestRow() As CAVRequestRow
            Return CType(Me.NewRow,CAVRequestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CAVRequestRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CAVRequestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CAVRequestRowChangedEvent) Is Nothing) Then
                RaiseEvent CAVRequestRowChanged(Me, New CAVRequestRowChangeEvent(CType(e.Row,CAVRequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CAVRequestRowChangingEvent) Is Nothing) Then
                RaiseEvent CAVRequestRowChanging(Me, New CAVRequestRowChangeEvent(CType(e.Row,CAVRequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CAVRequestRowDeletedEvent) Is Nothing) Then
                RaiseEvent CAVRequestRowDeleted(Me, New CAVRequestRowChangeEvent(CType(e.Row,CAVRequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CAVRequestRowDeletingEvent) Is Nothing) Then
                RaiseEvent CAVRequestRowDeleting(Me, New CAVRequestRowChangeEvent(CType(e.Row,CAVRequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCAVRequestRow(ByVal row As CAVRequestRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports3 = New Reports3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CAVRequestDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TORNewDataTable
        Inherits Global.System.Data.TypedTableBase(Of TORNewRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnPGrade As Global.System.Data.DataColumn
        
        Private columnMGrade As Global.System.Data.DataColumn
        
        Private columnFGrade As Global.System.Data.DataColumn
        
        Private columnAverage As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnImagePath As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnTrack As Global.System.Data.DataColumn
        
        Private columnQualification As Global.System.Data.DataColumn
        
        Private columnAdviser As Global.System.Data.DataColumn
        
        Private columnPFinalGrade As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnSchoolIDSHS As Global.System.Data.DataColumn
        
        Private columnSchoolIDJHS As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnschoolLogo As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columndepedLogo As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnRegistrarSHS As Global.System.Data.DataColumn
        
        Private columnRegistrarJHS As Global.System.Data.DataColumn
        
        Private columnSemSem As Global.System.Data.DataColumn
        
        Private columnSemSY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TORNew"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImagePathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImagePath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QualificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQualification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdviserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdviser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFinalGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPFinalGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolIDSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolIDSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolIDJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolIDJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property depedLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndepedLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemSemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemSYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TORNewRow
            Get
                Return CType(Me.Rows(index),TORNewRow)
            End Get
        End Property
        
        Public Event TORNewRowChanging As TORNewRowChangeEventHandler
        
        Public Event TORNewRowChanged As TORNewRowChangeEventHandler
        
        Public Event TORNewRowDeleting As TORNewRowChangeEventHandler
        
        Public Event TORNewRowDeleted As TORNewRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTORNewRow(ByVal row As TORNewRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTORNewRow( _
                    ByVal StudentNumber As String,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal Sex As String,  _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal PGrade As Double,  _
                    ByVal MGrade As Double,  _
                    ByVal FGrade As Double,  _
                    ByVal Average As Double,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal ImagePath() As Byte,  _
                    ByVal BirthDate As Date,  _
                    ByVal YearLevel As String,  _
                    ByVal Semester As String,  _
                    ByVal Track As String,  _
                    ByVal Qualification As String,  _
                    ByVal Adviser As String,  _
                    ByVal PFinalGrade As Double,  _
                    ByVal Division As String,  _
                    ByVal SchoolIDSHS As String,  _
                    ByVal SchoolIDJHS As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal schoolLogo() As Byte,  _
                    ByVal letterHead() As Byte,  _
                    ByVal depedLogo() As Byte,  _
                    ByVal Section As String,  _
                    ByVal RegistrarSHS As String,  _
                    ByVal RegistrarJHS As String,  _
                    ByVal SemSem As String,  _
                    ByVal SemSY As String) As TORNewRow
            Dim rowTORNewRow As TORNewRow = CType(Me.NewRow,TORNewRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, LastName, FirstName, MiddleName, Sex, SubjectCode, Description, PGrade, MGrade, FGrade, Average, SchoolName, SchoolAddress, ImagePath, BirthDate, YearLevel, Semester, Track, Qualification, Adviser, PFinalGrade, Division, SchoolIDSHS, SchoolIDJHS, SchoolHead, sHeadPosition, schoolLogo, letterHead, depedLogo, Section, RegistrarSHS, RegistrarJHS, SemSem, SemSY}
            rowTORNewRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTORNewRow)
            Return rowTORNewRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As TORNewRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),TORNewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TORNewDataTable = CType(MyBase.Clone,TORNewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TORNewDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnPGrade = MyBase.Columns("PGrade")
            Me.columnMGrade = MyBase.Columns("MGrade")
            Me.columnFGrade = MyBase.Columns("FGrade")
            Me.columnAverage = MyBase.Columns("Average")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnImagePath = MyBase.Columns("ImagePath")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnTrack = MyBase.Columns("Track")
            Me.columnQualification = MyBase.Columns("Qualification")
            Me.columnAdviser = MyBase.Columns("Adviser")
            Me.columnPFinalGrade = MyBase.Columns("PFinalGrade")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnSchoolIDSHS = MyBase.Columns("SchoolIDSHS")
            Me.columnSchoolIDJHS = MyBase.Columns("SchoolIDJHS")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnschoolLogo = MyBase.Columns("schoolLogo")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columndepedLogo = MyBase.Columns("depedLogo")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnRegistrarSHS = MyBase.Columns("RegistrarSHS")
            Me.columnRegistrarJHS = MyBase.Columns("RegistrarJHS")
            Me.columnSemSem = MyBase.Columns("SemSem")
            Me.columnSemSY = MyBase.Columns("SemSY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnPGrade = New Global.System.Data.DataColumn("PGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGrade)
            Me.columnMGrade = New Global.System.Data.DataColumn("MGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMGrade)
            Me.columnFGrade = New Global.System.Data.DataColumn("FGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGrade)
            Me.columnAverage = New Global.System.Data.DataColumn("Average", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverage)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnImagePath = New Global.System.Data.DataColumn("ImagePath", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImagePath)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnTrack = New Global.System.Data.DataColumn("Track", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrack)
            Me.columnQualification = New Global.System.Data.DataColumn("Qualification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQualification)
            Me.columnAdviser = New Global.System.Data.DataColumn("Adviser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdviser)
            Me.columnPFinalGrade = New Global.System.Data.DataColumn("PFinalGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPFinalGrade)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnSchoolIDSHS = New Global.System.Data.DataColumn("SchoolIDSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolIDSHS)
            Me.columnSchoolIDJHS = New Global.System.Data.DataColumn("SchoolIDJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolIDJHS)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnschoolLogo = New Global.System.Data.DataColumn("schoolLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolLogo)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columndepedLogo = New Global.System.Data.DataColumn("depedLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndepedLogo)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnRegistrarSHS = New Global.System.Data.DataColumn("RegistrarSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarSHS)
            Me.columnRegistrarJHS = New Global.System.Data.DataColumn("RegistrarJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarJHS)
            Me.columnSemSem = New Global.System.Data.DataColumn("SemSem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemSem)
            Me.columnSemSY = New Global.System.Data.DataColumn("SemSY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemSY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnLastName.MaxLength = 60
            Me.columnFirstName.MaxLength = 60
            Me.columnMiddleName.MaxLength = 60
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 45
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 150
            Me.columnPGrade.AllowDBNull = false
            Me.columnMGrade.AllowDBNull = false
            Me.columnFGrade.AllowDBNull = false
            Me.columnAverage.AllowDBNull = false
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnBirthDate.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnSemester.AllowDBNull = false
            Me.columnSemester.MaxLength = 45
            Me.columnTrack.AllowDBNull = false
            Me.columnTrack.MaxLength = 100
            Me.columnQualification.AllowDBNull = false
            Me.columnQualification.MaxLength = 100
            Me.columnAdviser.AllowDBNull = false
            Me.columnAdviser.MaxLength = 100
            Me.columnPFinalGrade.AllowDBNull = false
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnSchoolIDSHS.AllowDBNull = false
            Me.columnSchoolIDSHS.MaxLength = 45
            Me.columnSchoolIDJHS.AllowDBNull = false
            Me.columnSchoolIDJHS.MaxLength = 45
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnSection.MaxLength = 150
            Me.columnRegistrarSHS.AllowDBNull = false
            Me.columnRegistrarSHS.MaxLength = 65
            Me.columnRegistrarJHS.AllowDBNull = false
            Me.columnRegistrarJHS.MaxLength = 65
            Me.columnSemSem.MaxLength = 45
            Me.columnSemSY.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTORNewRow() As TORNewRow
            Return CType(Me.NewRow,TORNewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TORNewRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TORNewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TORNewRowChangedEvent) Is Nothing) Then
                RaiseEvent TORNewRowChanged(Me, New TORNewRowChangeEvent(CType(e.Row,TORNewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TORNewRowChangingEvent) Is Nothing) Then
                RaiseEvent TORNewRowChanging(Me, New TORNewRowChangeEvent(CType(e.Row,TORNewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TORNewRowDeletedEvent) Is Nothing) Then
                RaiseEvent TORNewRowDeleted(Me, New TORNewRowChangeEvent(CType(e.Row,TORNewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TORNewRowDeletingEvent) Is Nothing) Then
                RaiseEvent TORNewRowDeleting(Me, New TORNewRowChangeEvent(CType(e.Row,TORNewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTORNewRow(ByVal row As TORNewRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports3 = New Reports3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TORNewDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class form137DataTable
        Inherits Global.System.Data.TypedTableBase(Of form137Row)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnBirthPlace As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnGuardianAddress As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnQualification As Global.System.Data.DataColumn
        
        Private columnSemSem As Global.System.Data.DataColumn
        
        Private columnSemSY As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnPGrade As Global.System.Data.DataColumn
        
        Private columnMGrade As Global.System.Data.DataColumn
        
        Private columnPFinalGrade As Global.System.Data.DataColumn
        
        Private columnFGrade As Global.System.Data.DataColumn
        
        Private columnAverage As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnSchoolIDSHS As Global.System.Data.DataColumn
        
        Private columnSchoolIDJHS As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnRegistrarSHS As Global.System.Data.DataColumn
        
        Private columnRegistrarJHS As Global.System.Data.DataColumn
        
        Private columnSchoolName1 As Global.System.Data.DataColumn
        
        Private columnguardianOccupation As Global.System.Data.DataColumn
        
        Private columnElementary As Global.System.Data.DataColumn
        
        Private columnElemAddress As Global.System.Data.DataColumn
        
        Private columnelemSY As Global.System.Data.DataColumn
        
        Private columnHighSchool As Global.System.Data.DataColumn
        
        Private columnHSAddress As Global.System.Data.DataColumn
        
        Private columnelemAve As Global.System.Data.DataColumn
        
        Private columnshsEligibility As Global.System.Data.DataColumn
        
        Private columnjhsAve As Global.System.Data.DataColumn
        
        Private columnjhsGradDate As Global.System.Data.DataColumn
        
        Private columnjhsExamDate As Global.System.Data.DataColumn
        
        Private columnprofImage As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columntrack As Global.System.Data.DataColumn
        
        Private columnstrand As Global.System.Data.DataColumn
        
        Private columnadviser As Global.System.Data.DataColumn
        
        Private columnAdviser1 As Global.System.Data.DataColumn
        
        Private columnbatch As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "form137"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthPlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QualificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQualification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemSemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemSYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFinalGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPFinalGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolIDSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolIDSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolIDJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolIDJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property guardianOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnguardianOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElementaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElementary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElemAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElemAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elemSYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelemSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HighSchoolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHighSchool
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HSAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHSAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elemAveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelemAve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property shsEligibilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshsEligibility
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jhsAveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjhsAve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jhsGradDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjhsGradDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jhsExamDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjhsExamDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property profImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprofImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adviserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadviser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Adviser1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdviser1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property batchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbatch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As form137Row
            Get
                Return CType(Me.Rows(index),form137Row)
            End Get
        End Property
        
        Public Event form137RowChanging As form137RowChangeEventHandler
        
        Public Event form137RowChanged As form137RowChangeEventHandler
        
        Public Event form137RowDeleting As form137RowChangeEventHandler
        
        Public Event form137RowDeleted As form137RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addform137Row(ByVal row As form137Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addform137Row( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal BirthPlace As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal Guardian As String,  _
                    ByVal GuardianAddress As String,  _
                    ByVal Sex As String,  _
                    ByVal YearLevel As String,  _
                    ByVal Semester As String,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal Section As String,  _
                    ByVal Qualification As String,  _
                    ByVal SemSem As String,  _
                    ByVal SemSY As String,  _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal PGrade As Double,  _
                    ByVal MGrade As Double,  _
                    ByVal PFinalGrade As Double,  _
                    ByVal FGrade As Double,  _
                    ByVal Average As Double,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal Division As String,  _
                    ByVal SchoolIDSHS As String,  _
                    ByVal SchoolIDJHS As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal RegistrarSHS As String,  _
                    ByVal RegistrarJHS As String,  _
                    ByVal SchoolName1 As String,  _
                    ByVal guardianOccupation As String,  _
                    ByVal Elementary As String,  _
                    ByVal ElemAddress As String,  _
                    ByVal elemSY As String,  _
                    ByVal HighSchool As String,  _
                    ByVal HSAddress As String,  _
                    ByVal elemAve As String,  _
                    ByVal shsEligibility As String,  _
                    ByVal jhsAve As String,  _
                    ByVal jhsGradDate As String,  _
                    ByVal jhsExamDate As String,  _
                    ByVal profImage() As Byte,  _
                    ByVal letterHead() As Byte,  _
                    ByVal track As String,  _
                    ByVal strand As String,  _
                    ByVal adviser As String,  _
                    ByVal Adviser1 As String,  _
                    ByVal batch As String) As form137Row
            Dim rowform137Row As form137Row = CType(Me.NewRow,form137Row)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, FirstName, MiddleName, LastName, BirthPlace, BirthDate, Guardian, GuardianAddress, Sex, YearLevel, Semester, Sem, SY, Section, Qualification, SemSem, SemSY, SubjectCode, Description, PGrade, MGrade, PFinalGrade, FGrade, Average, SchoolName, SchoolAddress, Division, SchoolIDSHS, SchoolIDJHS, SchoolHead, sHeadPosition, RegistrarSHS, RegistrarJHS, SchoolName1, guardianOccupation, Elementary, ElemAddress, elemSY, HighSchool, HSAddress, elemAve, shsEligibility, jhsAve, jhsGradDate, jhsExamDate, profImage, letterHead, track, strand, adviser, Adviser1, batch}
            rowform137Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowform137Row)
            Return rowform137Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As form137Row
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),form137Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As form137DataTable = CType(MyBase.Clone,form137DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New form137DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnBirthPlace = MyBase.Columns("BirthPlace")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnGuardianAddress = MyBase.Columns("GuardianAddress")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnQualification = MyBase.Columns("Qualification")
            Me.columnSemSem = MyBase.Columns("SemSem")
            Me.columnSemSY = MyBase.Columns("SemSY")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnPGrade = MyBase.Columns("PGrade")
            Me.columnMGrade = MyBase.Columns("MGrade")
            Me.columnPFinalGrade = MyBase.Columns("PFinalGrade")
            Me.columnFGrade = MyBase.Columns("FGrade")
            Me.columnAverage = MyBase.Columns("Average")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnSchoolIDSHS = MyBase.Columns("SchoolIDSHS")
            Me.columnSchoolIDJHS = MyBase.Columns("SchoolIDJHS")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnRegistrarSHS = MyBase.Columns("RegistrarSHS")
            Me.columnRegistrarJHS = MyBase.Columns("RegistrarJHS")
            Me.columnSchoolName1 = MyBase.Columns("SchoolName1")
            Me.columnguardianOccupation = MyBase.Columns("guardianOccupation")
            Me.columnElementary = MyBase.Columns("Elementary")
            Me.columnElemAddress = MyBase.Columns("ElemAddress")
            Me.columnelemSY = MyBase.Columns("elemSY")
            Me.columnHighSchool = MyBase.Columns("HighSchool")
            Me.columnHSAddress = MyBase.Columns("HSAddress")
            Me.columnelemAve = MyBase.Columns("elemAve")
            Me.columnshsEligibility = MyBase.Columns("shsEligibility")
            Me.columnjhsAve = MyBase.Columns("jhsAve")
            Me.columnjhsGradDate = MyBase.Columns("jhsGradDate")
            Me.columnjhsExamDate = MyBase.Columns("jhsExamDate")
            Me.columnprofImage = MyBase.Columns("profImage")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columntrack = MyBase.Columns("track")
            Me.columnstrand = MyBase.Columns("strand")
            Me.columnadviser = MyBase.Columns("adviser")
            Me.columnAdviser1 = MyBase.Columns("Adviser1")
            Me.columnbatch = MyBase.Columns("batch")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnBirthPlace = New Global.System.Data.DataColumn("BirthPlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthPlace)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnGuardianAddress = New Global.System.Data.DataColumn("GuardianAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianAddress)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnQualification = New Global.System.Data.DataColumn("Qualification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQualification)
            Me.columnSemSem = New Global.System.Data.DataColumn("SemSem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemSem)
            Me.columnSemSY = New Global.System.Data.DataColumn("SemSY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemSY)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnPGrade = New Global.System.Data.DataColumn("PGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGrade)
            Me.columnMGrade = New Global.System.Data.DataColumn("MGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMGrade)
            Me.columnPFinalGrade = New Global.System.Data.DataColumn("PFinalGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPFinalGrade)
            Me.columnFGrade = New Global.System.Data.DataColumn("FGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGrade)
            Me.columnAverage = New Global.System.Data.DataColumn("Average", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverage)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnSchoolIDSHS = New Global.System.Data.DataColumn("SchoolIDSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolIDSHS)
            Me.columnSchoolIDJHS = New Global.System.Data.DataColumn("SchoolIDJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolIDJHS)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnRegistrarSHS = New Global.System.Data.DataColumn("RegistrarSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarSHS)
            Me.columnRegistrarJHS = New Global.System.Data.DataColumn("RegistrarJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarJHS)
            Me.columnSchoolName1 = New Global.System.Data.DataColumn("SchoolName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName1)
            Me.columnguardianOccupation = New Global.System.Data.DataColumn("guardianOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnguardianOccupation)
            Me.columnElementary = New Global.System.Data.DataColumn("Elementary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElementary)
            Me.columnElemAddress = New Global.System.Data.DataColumn("ElemAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElemAddress)
            Me.columnelemSY = New Global.System.Data.DataColumn("elemSY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelemSY)
            Me.columnHighSchool = New Global.System.Data.DataColumn("HighSchool", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHighSchool)
            Me.columnHSAddress = New Global.System.Data.DataColumn("HSAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHSAddress)
            Me.columnelemAve = New Global.System.Data.DataColumn("elemAve", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelemAve)
            Me.columnshsEligibility = New Global.System.Data.DataColumn("shsEligibility", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshsEligibility)
            Me.columnjhsAve = New Global.System.Data.DataColumn("jhsAve", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjhsAve)
            Me.columnjhsGradDate = New Global.System.Data.DataColumn("jhsGradDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjhsGradDate)
            Me.columnjhsExamDate = New Global.System.Data.DataColumn("jhsExamDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjhsExamDate)
            Me.columnprofImage = New Global.System.Data.DataColumn("profImage", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprofImage)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columntrack = New Global.System.Data.DataColumn("track", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrack)
            Me.columnstrand = New Global.System.Data.DataColumn("strand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrand)
            Me.columnadviser = New Global.System.Data.DataColumn("adviser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadviser)
            Me.columnAdviser1 = New Global.System.Data.DataColumn("Adviser1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdviser1)
            Me.columnbatch = New Global.System.Data.DataColumn("batch", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbatch)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFirstName.MaxLength = 60
            Me.columnMiddleName.MaxLength = 60
            Me.columnLastName.MaxLength = 60
            Me.columnBirthPlace.AllowDBNull = false
            Me.columnBirthPlace.MaxLength = 250
            Me.columnBirthDate.AllowDBNull = false
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 150
            Me.columnGuardianAddress.AllowDBNull = false
            Me.columnGuardianAddress.MaxLength = 250
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnSection.AllowDBNull = false
            Me.columnSection.MaxLength = 150
            Me.columnQualification.AllowDBNull = false
            Me.columnQualification.MaxLength = 100
            Me.columnSemSem.MaxLength = 45
            Me.columnSemSY.MaxLength = 45
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 45
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 150
            Me.columnPGrade.AllowDBNull = false
            Me.columnMGrade.AllowDBNull = false
            Me.columnPFinalGrade.AllowDBNull = false
            Me.columnFGrade.AllowDBNull = false
            Me.columnAverage.AllowDBNull = false
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnSchoolIDSHS.AllowDBNull = false
            Me.columnSchoolIDSHS.MaxLength = 45
            Me.columnSchoolIDJHS.AllowDBNull = false
            Me.columnSchoolIDJHS.MaxLength = 45
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnRegistrarSHS.AllowDBNull = false
            Me.columnRegistrarSHS.MaxLength = 65
            Me.columnRegistrarJHS.AllowDBNull = false
            Me.columnRegistrarJHS.MaxLength = 65
            Me.columnSchoolName1.AllowDBNull = false
            Me.columnSchoolName1.MaxLength = 150
            Me.columnguardianOccupation.AllowDBNull = false
            Me.columnguardianOccupation.MaxLength = 65
            Me.columnElementary.AllowDBNull = false
            Me.columnElementary.MaxLength = 150
            Me.columnElemAddress.AllowDBNull = false
            Me.columnElemAddress.MaxLength = 150
            Me.columnelemSY.AllowDBNull = false
            Me.columnelemSY.MaxLength = 45
            Me.columnHighSchool.AllowDBNull = false
            Me.columnHighSchool.MaxLength = 150
            Me.columnHSAddress.AllowDBNull = false
            Me.columnHSAddress.MaxLength = 150
            Me.columnelemAve.AllowDBNull = false
            Me.columnelemAve.MaxLength = 45
            Me.columnshsEligibility.AllowDBNull = false
            Me.columnshsEligibility.MaxLength = 65
            Me.columnjhsAve.AllowDBNull = false
            Me.columnjhsAve.MaxLength = 45
            Me.columnjhsGradDate.AllowDBNull = false
            Me.columnjhsGradDate.MaxLength = 65
            Me.columnjhsExamDate.AllowDBNull = false
            Me.columnjhsExamDate.MaxLength = 65
            Me.columntrack.AllowDBNull = false
            Me.columntrack.MaxLength = 150
            Me.columnstrand.AllowDBNull = false
            Me.columnstrand.MaxLength = 150
            Me.columnadviser.AllowDBNull = false
            Me.columnadviser.MaxLength = 150
            Me.columnAdviser1.AllowDBNull = false
            Me.columnAdviser1.MaxLength = 100
            Me.columnbatch.MaxLength = 92
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newform137Row() As form137Row
            Return CType(Me.NewRow,form137Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New form137Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(form137Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.form137RowChangedEvent) Is Nothing) Then
                RaiseEvent form137RowChanged(Me, New form137RowChangeEvent(CType(e.Row,form137Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.form137RowChangingEvent) Is Nothing) Then
                RaiseEvent form137RowChanging(Me, New form137RowChangeEvent(CType(e.Row,form137Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.form137RowDeletedEvent) Is Nothing) Then
                RaiseEvent form137RowDeleted(Me, New form137RowChangeEvent(CType(e.Row,form137Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.form137RowDeletingEvent) Is Nothing) Then
                RaiseEvent form137RowDeleting(Me, New form137RowChangeEvent(CType(e.Row,form137Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeform137Row(ByVal row As form137Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports3 = New Reports3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "form137DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class studentProfileRow
        Inherits Global.System.Data.DataRow
        
        Private tablestudentProfile As studentProfileDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestudentProfile = CType(Me.Table,studentProfileDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablestudentProfile.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tablestudentProfile.SexColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CivilStatus() As String
            Get
                Return CType(Me(Me.tablestudentProfile.CivilStatusColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.CivilStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthPlace() As String
            Get
                Return CType(Me(Me.tablestudentProfile.BirthPlaceColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.BirthPlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Citizenship() As String
            Get
                Return CType(Me(Me.tablestudentProfile.CitizenshipColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.CitizenshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Religion() As String
            Get
                Return CType(Me(Me.tablestudentProfile.ReligionColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.ReligionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BloodType() As String
            Get
                Return CType(Me(Me.tablestudentProfile.BloodTypeColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.BloodTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelNumber() As String
            Get
                Return CType(Me(Me.tablestudentProfile.TelNumberColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.TelNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MobileNumber() As String
            Get
                Return CType(Me(Me.tablestudentProfile.MobileNumberColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.MobileNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HighSchool() As String
            Get
                Return CType(Me(Me.tablestudentProfile.HighSchoolColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.HighSchoolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HSAddress() As String
            Get
                Return CType(Me(Me.tablestudentProfile.HSAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.HSAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property College() As String
            Get
                Return CType(Me(Me.tablestudentProfile.CollegeColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.CollegeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAddress() As String
            Get
                Return CType(Me(Me.tablestudentProfile.CAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.CAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Requirements() As String
            Get
                Return CType(Me(Me.tablestudentProfile.RequirementsColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.RequirementsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Encoder() As String
            Get
                Return CType(Me(Me.tablestudentProfile.EncoderColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.EncoderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Return CType(Me(Me.tablestudentProfile.BirthDateColumn),Date)
            End Get
            Set
                Me(Me.tablestudentProfile.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdmissionDate() As Date
            Get
                Return CType(Me(Me.tablestudentProfile.AdmissionDateColumn),Date)
            End Get
            Set
                Me(Me.tablestudentProfile.AdmissionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GraduationDate() As Date
            Get
                Return CType(Me(Me.tablestudentProfile.GraduationDateColumn),Date)
            End Get
            Set
                Me(Me.tablestudentProfile.GraduationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tablestudentProfile.GuardianColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianContact() As String
            Get
                Return CType(Me(Me.tablestudentProfile.GuardianContactColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.GuardianContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianAddress() As String
            Get
                Return CType(Me(Me.tablestudentProfile.GuardianAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.GuardianAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImagePath() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.ImagePathColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImagePath' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.ImagePathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tablestudentProfile.CourseColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Elementary() As String
            Get
                Return CType(Me(Me.tablestudentProfile.ElementaryColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.ElementaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ElemAddress() As String
            Get
                Return CType(Me(Me.tablestudentProfile.ElemAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.ElemAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianRelationship() As String
            Get
                Return CType(Me(Me.tablestudentProfile.GuardianRelationshipColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.GuardianRelationshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianTelNo() As String
            Get
                Return CType(Me(Me.tablestudentProfile.GuardianTelNoColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.GuardianTelNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Return CType(Me(Me.tablestudentProfile.EmailAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Father() As String
            Get
                Return CType(Me(Me.tablestudentProfile.FatherColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.FatherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOccupation() As String
            Get
                Return CType(Me(Me.tablestudentProfile.FOccupationColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.FOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mother() As String
            Get
                Return CType(Me(Me.tablestudentProfile.MotherColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.MotherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOccupation() As String
            Get
                Return CType(Me(Me.tablestudentProfile.MOccupationColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.MOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As String
            Get
                Return CType(Me(Me.tablestudentProfile.AgeColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Return CType(Me(Me.tablestudentProfile.TitleColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun() As String
            Get
                Return CType(Me(Me.tablestudentProfile.PronounColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.PronounColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun2() As String
            Get
                Return CType(Me(Me.tablestudentProfile.Pronoun2Column),String)
            End Get
            Set
                Me(Me.tablestudentProfile.Pronoun2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun3() As String
            Get
                Return CType(Me(Me.tablestudentProfile.Pronoun3Column),String)
            End Get
            Set
                Me(Me.tablestudentProfile.Pronoun3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ethnicity() As String
            Get
                Return CType(Me(Me.tablestudentProfile.EthnicityColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.EthnicityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParentsMonthly() As Double
            Get
                Return CType(Me(Me.tablestudentProfile.ParentsMonthlyColumn),Double)
            End Get
            Set
                Me(Me.tablestudentProfile.ParentsMonthlyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As String
            Get
                Return CType(Me(Me.tablestudentProfile.ProvinceColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tablestudentProfile.CityColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Brgy() As String
            Get
                Return CType(Me(Me.tablestudentProfile.BrgyColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.BrgyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sitio() As String
            Get
                Return CType(Me(Me.tablestudentProfile.SitioColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.SitioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID() As UInteger
            Get
                Return CType(Me(Me.tablestudentProfile.settingsIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablestudentProfile.settingsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semstudentid() As UInteger
            Get
                Return CType(Me(Me.tablestudentProfile.semstudentidColumn),UInteger)
            End Get
            Set
                Me(Me.tablestudentProfile.semstudentidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber1() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.StudentNumber1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentNumber1' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.StudentNumber1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.FNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FName' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.FNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.MNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MName' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.MNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.LNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LName' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.LNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course1() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.Course1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course1' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.Course1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Term() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.TermColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Term' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.TermColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudeStatus() As String
            Get
                Return CType(Me(Me.tablestudentProfile.StudeStatusColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.StudeStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Scholarship() As String
            Get
                Return CType(Me(Me.tablestudentProfile.ScholarshipColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.ScholarshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DurationFrom() As String
            Get
                Return CType(Me(Me.tablestudentProfile.DurationFromColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.DurationFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DurationTo() As String
            Get
                Return CType(Me(Me.tablestudentProfile.DurationToColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.DurationToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssessmentDate() As String
            Get
                Return CType(Me(Me.tablestudentProfile.AssessmentDateColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.AssessmentDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssessmentResult() As String
            Get
                Return CType(Me(Me.tablestudentProfile.AssessmentResultColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.AssessmentResultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayingStatus() As String
            Get
                Return CType(Me(Me.tablestudentProfile.PayingStatusColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.PayingStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrantAmount() As Double
            Get
                Return CType(Me(Me.tablestudentProfile.GrantAmountColumn),Double)
            End Get
            Set
                Me(Me.tablestudentProfile.GrantAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevelStat() As String
            Get
                Return CType(Me(Me.tablestudentProfile.YearLevelStatColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.YearLevelStatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Major() As String
            Get
                Return CType(Me(Me.tablestudentProfile.MajorColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Track() As String
            Get
                Return CType(Me(Me.tablestudentProfile.TrackColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.TrackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qualification() As String
            Get
                Return CType(Me(Me.tablestudentProfile.QualificationColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.QualificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BalikAral() As String
            Get
                Return CType(Me(Me.tablestudentProfile.BalikAralColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.BalikAralColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IP() As String
            Get
                Return CType(Me(Me.tablestudentProfile.IPColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.IPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FourPs() As String
            Get
                Return CType(Me(Me.tablestudentProfile.FourPsColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.FourPsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Repeater() As String
            Get
                Return CType(Me(Me.tablestudentProfile.RepeaterColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.RepeaterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transferee() As String
            Get
                Return CType(Me(Me.tablestudentProfile.TransfereeColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.TransfereeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnrolledDate() As Date
            Get
                Return CType(Me(Me.tablestudentProfile.EnrolledDateColumn),Date)
            End Get
            Set
                Me(Me.tablestudentProfile.EnrolledDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adviser() As String
            Get
                Return CType(Me(Me.tablestudentProfile.AdviserColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.AdviserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID1() As UInteger
            Get
                Return CType(Me(Me.tablestudentProfile.settingsID1Column),UInteger)
            End Get
            Set
                Me(Me.tablestudentProfile.settingsID1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sectionID() As UInteger
            Get
                Return CType(Me(Me.tablestudentProfile.sectionIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablestudentProfile.sectionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID2() As UInteger
            Get
                Return CType(Me(Me.tablestudentProfile.settingsID2Column),UInteger)
            End Get
            Set
                Me(Me.tablestudentProfile.settingsID2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tablestudentProfile.DivisionColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SDS() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.SDSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SDS' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.SDSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolIDSHS() As String
            Get
                Return CType(Me(Me.tablestudentProfile.SchoolIDSHSColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.SchoolIDSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolIDJHS() As String
            Get
                Return CType(Me(Me.tablestudentProfile.SchoolIDJHSColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.SchoolIDJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablestudentProfile.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablestudentProfile.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablestudentProfile.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tablestudentProfile.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tablestudentProfile.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.PropertyCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarSHS() As String
            Get
                Return CType(Me(Me.tablestudentProfile.RegistrarSHSColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.RegistrarSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarJHS() As String
            Get
                Return CType(Me(Me.tablestudentProfile.RegistrarJHSColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.RegistrarJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuidanceSHS() As String
            Get
                Return CType(Me(Me.tablestudentProfile.GuidanceSHSColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.GuidanceSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuidanceJHS() As String
            Get
                Return CType(Me(Me.tablestudentProfile.GuidanceJHSColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.GuidanceJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property member1Prop() As String
            Get
                Return CType(Me(Me.tablestudentProfile.member1PropColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.member1PropColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property member2Prop() As String
            Get
                Return CType(Me(Me.tablestudentProfile.member2PropColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.member2PropColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _region() As String
            Get
                Return CType(Me(Me.tablestudentProfile.regionColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.regionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adas1() As String
            Get
                Return CType(Me(Me.tablestudentProfile.adas1Column),String)
            End Get
            Set
                Me(Me.tablestudentProfile.adas1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adas1Position() As String
            Get
                Return CType(Me(Me.tablestudentProfile.adas1PositionColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.adas1PositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sdsPosition() As String
            Get
                Return CType(Me(Me.tablestudentProfile.sdsPositionColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.sdsPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __Region() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile._RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile._RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regionAddress() As String
            Get
                Return CType(Me(Me.tablestudentProfile.regionAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.regionAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.schoolLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolLogo' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.schoolLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property depedLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.depedLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'depedLogo' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.depedLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regionalDirector() As String
            Get
                Return CType(Me(Me.tablestudentProfile.regionalDirectorColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.regionalDirectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property directorPosition() As String
            Get
                Return CType(Me(Me.tablestudentProfile.directorPositionColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.directorPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property divisionAddress() As String
            Get
                Return CType(Me(Me.tablestudentProfile.divisionAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudentProfile.divisionAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property profID() As UInteger
            Get
                Return CType(Me(Me.tablestudentProfile.profIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablestudentProfile.profIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property profImage() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablestudentProfile.profImageColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'profImage' in table 'studentProfile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentProfile.profImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber2() As String
            Get
                Return CType(Me(Me.tablestudentProfile.StudentNumber2Column),String)
            End Get
            Set
                Me(Me.tablestudentProfile.StudentNumber2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tablestudentProfile.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tablestudentProfile.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tablestudentProfile.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImagePathNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.ImagePathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImagePathNull()
            Me(Me.tablestudentProfile.ImagePathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNumber1Null() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.StudentNumber1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNumber1Null()
            Me(Me.tablestudentProfile.StudentNumber1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFNameNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.FNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFNameNull()
            Me(Me.tablestudentProfile.FNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMNameNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.MNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMNameNull()
            Me(Me.tablestudentProfile.MNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLNameNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.LNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLNameNull()
            Me(Me.tablestudentProfile.LNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourse1Null() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.Course1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourse1Null()
            Me(Me.tablestudentProfile.Course1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tablestudentProfile.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tablestudentProfile.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tablestudentProfile.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tablestudentProfile.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTermNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.TermColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTermNull()
            Me(Me.tablestudentProfile.TermColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tablestudentProfile.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSDSNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.SDSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSDSNull()
            Me(Me.tablestudentProfile.SDSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__RegionNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile._RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__RegionNull()
            Me(Me.tablestudentProfile._RegionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolLogoNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.schoolLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolLogoNull()
            Me(Me.tablestudentProfile.schoolLogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tablestudentProfile.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdepedLogoNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.depedLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdepedLogoNull()
            Me(Me.tablestudentProfile.depedLogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprofImageNull() As Boolean
            Return Me.IsNull(Me.tablestudentProfile.profImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprofImageNull()
            Me(Me.tablestudentProfile.profImageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClassReplacementRow
        Inherits Global.System.Data.DataRow
        
        Private tableClassReplacement As ClassReplacementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClassReplacement = CType(Me.Table,ClassReplacementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDNumber() As String
            Get
                Return CType(Me(Me.tableClassReplacement.IDNumberColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.IDNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property empPosition() As String
            Get
                Return CType(Me(Me.tableClassReplacement.empPositionColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.empPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schedTime() As String
            Get
                Return CType(Me(Me.tableClassReplacement.schedTimeColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.schedTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subject() As String
            Get
                Return CType(Me(Me.tableClassReplacement.subjectColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.subjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradeLevel() As String
            Get
                Return CType(Me(Me.tableClassReplacement.gradeLevelColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.gradeLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property replacement() As String
            Get
                Return CType(Me(Me.tableClassReplacement.replacementColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.replacementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property applicableDate() As String
            Get
                Return CType(Me(Me.tableClassReplacement.applicableDateColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.applicableDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tableClassReplacement.DivisionColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableClassReplacement.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableClassReplacement.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableClassReplacement.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableClassReplacement.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableClassReplacement.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableClassReplacement.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'ClassReplacement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassReplacement.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableClassReplacement.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'ClassReplacement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassReplacement.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableClassReplacement.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'ClassReplacement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassReplacement.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableClassReplacement.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'ClassReplacement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassReplacement.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateFrom() As Date
            Get
                Return CType(Me(Me.tableClassReplacement.dateFromColumn),Date)
            End Get
            Set
                Me(Me.tableClassReplacement.dateFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateTo() As Date
            Get
                Return CType(Me(Me.tableClassReplacement.dateToColumn),Date)
            End Get
            Set
                Me(Me.tableClassReplacement.dateToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableClassReplacement.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'ClassReplacement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassReplacement.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableClassReplacement.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_RegionNull()
            Me(Me.tableClassReplacement.RegionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableClassReplacement.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableClassReplacement.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableClassReplacement.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableClassReplacement.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableClassReplacement.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableClassReplacement.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableClassReplacement.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableClassReplacement.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class collectionReport1Row
        Inherits Global.System.Data.DataRow
        
        Private tablecollectionReport1 As collectionReport1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecollectionReport1 = CType(Me.Table,collectionReport1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablecollectionReport1.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablecollectionReport1.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tablecollectionReport1.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'collectionReport1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecollectionReport1.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDate() As Date
            Get
                Return CType(Me(Me.tablecollectionReport1.PDateColumn),Date)
            End Get
            Set
                Me(Me.tablecollectionReport1.PDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Return CType(Me(Me.tablecollectionReport1.AmountColumn),Double)
            End Get
            Set
                Me(Me.tablecollectionReport1.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORNumber() As String
            Get
                Return CType(Me(Me.tablecollectionReport1.ORNumberColumn),String)
            End Get
            Set
                Me(Me.tablecollectionReport1.ORNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cashier() As String
            Get
                Return CType(Me(Me.tablecollectionReport1.CashierColumn),String)
            End Get
            Set
                Me(Me.tablecollectionReport1.CashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablecollectionReport1.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'collectionReport1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecollectionReport1.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tablecollectionReport1.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tablecollectionReport1.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tablecollectionReport1.SemColumn),String)
            End Get
            Set
                Me(Me.tablecollectionReport1.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tablecollectionReport1.SYColumn),String)
            End Get
            Set
                Me(Me.tablecollectionReport1.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablecollectionReport1.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablecollectionReport1.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablecollectionReport1.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablecollectionReport1.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Try 
                    Return CType(Me(Me.tablecollectionReport1.descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'description' in table 'collectionReport1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecollectionReport1.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablecollectionReport1.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'collectionReport1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecollectionReport1.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tablecollectionReport1.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tablecollectionReport1.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablecollectionReport1.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablecollectionReport1.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tablecollectionReport1.descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescriptionNull()
            Me(Me.tablecollectionReport1.descriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tablecollectionReport1.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tablecollectionReport1.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CAVRequestRow
        Inherits Global.System.Data.DataRow
        
        Private tableCAVRequest As CAVRequestDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCAVRequest = CType(Me.Table,CAVRequestDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableCAVRequest.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCAVRequest.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'CAVRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVRequest.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Return CType(Me(Me.tableCAVRequest.BirthDateColumn),Date)
            End Get
            Set
                Me(Me.tableCAVRequest.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthPlace() As String
            Get
                Return CType(Me(Me.tableCAVRequest.BirthPlaceColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.BirthPlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property presentAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableCAVRequest.presentAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'presentAddress' in table 'CAVRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVRequest.presentAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MobileNumber() As String
            Get
                Return CType(Me(Me.tableCAVRequest.MobileNumberColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.MobileNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableCAVRequest.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'CAVRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVRequest.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableCAVRequest.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableCAVRequest.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolIDJHS() As String
            Get
                Return CType(Me(Me.tableCAVRequest.SchoolIDJHSColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.SchoolIDJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableCAVRequest.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'CAVRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVRequest.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tableCAVRequest.DivisionColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableCAVRequest.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableCAVRequest.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Region1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCAVRequest.Region1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region1' in table 'CAVRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVRequest.Region1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctrlNo() As String
            Get
                Return CType(Me(Me.tableCAVRequest.ctrlNoColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.ctrlNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property applicationDate() As Date
            Get
                Return CType(Me(Me.tableCAVRequest.applicationDateColumn),Date)
            End Get
            Set
                Me(Me.tableCAVRequest.applicationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property purpose() As String
            Get
                Return CType(Me(Me.tableCAVRequest.purposeColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.purposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property releasedDate() As String
            Get
                Return CType(Me(Me.tableCAVRequest.releasedDateColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.releasedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun3() As String
            Get
                Return CType(Me(Me.tableCAVRequest.Pronoun3Column),String)
            End Get
            Set
                Me(Me.tableCAVRequest.Pronoun3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regionAddress() As String
            Get
                Return CType(Me(Me.tableCAVRequest.regionAddressColumn),String)
            End Get
            Set
                Me(Me.tableCAVRequest.regionAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCAVRequest.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'CAVRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVRequest.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableCAVRequest.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableCAVRequest.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspresentAddressNull() As Boolean
            Return Me.IsNull(Me.tableCAVRequest.presentAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpresentAddressNull()
            Me(Me.tableCAVRequest.presentAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableCAVRequest.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableCAVRequest.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableCAVRequest.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_RegionNull()
            Me(Me.tableCAVRequest.RegionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegion1Null() As Boolean
            Return Me.IsNull(Me.tableCAVRequest.Region1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegion1Null()
            Me(Me.tableCAVRequest.Region1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableCAVRequest.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableCAVRequest.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TORNewRow
        Inherits Global.System.Data.DataRow
        
        Private tableTORNew As TORNewDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTORNew = CType(Me.Table,TORNewDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableTORNew.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableTORNew.SexColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableTORNew.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableTORNew.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGrade() As Double
            Get
                Return CType(Me(Me.tableTORNew.PGradeColumn),Double)
            End Get
            Set
                Me(Me.tableTORNew.PGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MGrade() As Double
            Get
                Return CType(Me(Me.tableTORNew.MGradeColumn),Double)
            End Get
            Set
                Me(Me.tableTORNew.MGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGrade() As Double
            Get
                Return CType(Me(Me.tableTORNew.FGradeColumn),Double)
            End Get
            Set
                Me(Me.tableTORNew.FGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Average() As Double
            Get
                Return CType(Me(Me.tableTORNew.AverageColumn),Double)
            End Get
            Set
                Me(Me.tableTORNew.AverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableTORNew.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableTORNew.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImagePath() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.ImagePathColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImagePath' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.ImagePathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Return CType(Me(Me.tableTORNew.BirthDateColumn),Date)
            End Get
            Set
                Me(Me.tableTORNew.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Return CType(Me(Me.tableTORNew.SemesterColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Track() As String
            Get
                Return CType(Me(Me.tableTORNew.TrackColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.TrackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qualification() As String
            Get
                Return CType(Me(Me.tableTORNew.QualificationColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.QualificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adviser() As String
            Get
                Return CType(Me(Me.tableTORNew.AdviserColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.AdviserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PFinalGrade() As Double
            Get
                Return CType(Me(Me.tableTORNew.PFinalGradeColumn),Double)
            End Get
            Set
                Me(Me.tableTORNew.PFinalGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tableTORNew.DivisionColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolIDSHS() As String
            Get
                Return CType(Me(Me.tableTORNew.SchoolIDSHSColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SchoolIDSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolIDJHS() As String
            Get
                Return CType(Me(Me.tableTORNew.SchoolIDJHSColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SchoolIDJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableTORNew.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableTORNew.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.schoolLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolLogo' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.schoolLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property depedLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.depedLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'depedLogo' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.depedLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarSHS() As String
            Get
                Return CType(Me(Me.tableTORNew.RegistrarSHSColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.RegistrarSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarJHS() As String
            Get
                Return CType(Me(Me.tableTORNew.RegistrarJHSColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.RegistrarJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemSem() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.SemSemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemSem' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.SemSemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemSY() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.SemSYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemSY' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.SemSYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableTORNew.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableTORNew.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableTORNew.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImagePathNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.ImagePathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImagePathNull()
            Me(Me.tableTORNew.ImagePathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tableTORNew.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolLogoNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.schoolLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolLogoNull()
            Me(Me.tableTORNew.schoolLogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableTORNew.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdepedLogoNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.depedLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdepedLogoNull()
            Me(Me.tableTORNew.depedLogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableTORNew.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemSemNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.SemSemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemSemNull()
            Me(Me.tableTORNew.SemSemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemSYNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.SemSYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemSYNull()
            Me(Me.tableTORNew.SemSYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class form137Row
        Inherits Global.System.Data.DataRow
        
        Private tableform137 As form137DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableform137 = CType(Me.Table,form137DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableform137.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableform137.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableform137.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'form137' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableform137.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableform137.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'form137' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableform137.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableform137.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'form137' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableform137.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthPlace() As String
            Get
                Return CType(Me(Me.tableform137.BirthPlaceColumn),String)
            End Get
            Set
                Me(Me.tableform137.BirthPlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Return CType(Me(Me.tableform137.BirthDateColumn),Date)
            End Get
            Set
                Me(Me.tableform137.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableform137.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableform137.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianAddress() As String
            Get
                Return CType(Me(Me.tableform137.GuardianAddressColumn),String)
            End Get
            Set
                Me(Me.tableform137.GuardianAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableform137.SexColumn),String)
            End Get
            Set
                Me(Me.tableform137.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tableform137.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tableform137.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableform137.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'form137' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableform137.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tableform137.SemColumn),String)
            End Get
            Set
                Me(Me.tableform137.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tableform137.SYColumn),String)
            End Get
            Set
                Me(Me.tableform137.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Return CType(Me(Me.tableform137.SectionColumn),String)
            End Get
            Set
                Me(Me.tableform137.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qualification() As String
            Get
                Return CType(Me(Me.tableform137.QualificationColumn),String)
            End Get
            Set
                Me(Me.tableform137.QualificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemSem() As String
            Get
                Try 
                    Return CType(Me(Me.tableform137.SemSemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemSem' in table 'form137' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableform137.SemSemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemSY() As String
            Get
                Try 
                    Return CType(Me(Me.tableform137.SemSYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemSY' in table 'form137' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableform137.SemSYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableform137.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableform137.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableform137.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableform137.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGrade() As Double
            Get
                Return CType(Me(Me.tableform137.PGradeColumn),Double)
            End Get
            Set
                Me(Me.tableform137.PGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MGrade() As Double
            Get
                Return CType(Me(Me.tableform137.MGradeColumn),Double)
            End Get
            Set
                Me(Me.tableform137.MGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PFinalGrade() As Double
            Get
                Return CType(Me(Me.tableform137.PFinalGradeColumn),Double)
            End Get
            Set
                Me(Me.tableform137.PFinalGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGrade() As Double
            Get
                Return CType(Me(Me.tableform137.FGradeColumn),Double)
            End Get
            Set
                Me(Me.tableform137.FGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Average() As Double
            Get
                Return CType(Me(Me.tableform137.AverageColumn),Double)
            End Get
            Set
                Me(Me.tableform137.AverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableform137.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableform137.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableform137.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableform137.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tableform137.DivisionColumn),String)
            End Get
            Set
                Me(Me.tableform137.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolIDSHS() As String
            Get
                Return CType(Me(Me.tableform137.SchoolIDSHSColumn),String)
            End Get
            Set
                Me(Me.tableform137.SchoolIDSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolIDJHS() As String
            Get
                Return CType(Me(Me.tableform137.SchoolIDJHSColumn),String)
            End Get
            Set
                Me(Me.tableform137.SchoolIDJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableform137.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableform137.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableform137.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableform137.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarSHS() As String
            Get
                Return CType(Me(Me.tableform137.RegistrarSHSColumn),String)
            End Get
            Set
                Me(Me.tableform137.RegistrarSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarJHS() As String
            Get
                Return CType(Me(Me.tableform137.RegistrarJHSColumn),String)
            End Get
            Set
                Me(Me.tableform137.RegistrarJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName1() As String
            Get
                Return CType(Me(Me.tableform137.SchoolName1Column),String)
            End Get
            Set
                Me(Me.tableform137.SchoolName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property guardianOccupation() As String
            Get
                Return CType(Me(Me.tableform137.guardianOccupationColumn),String)
            End Get
            Set
                Me(Me.tableform137.guardianOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Elementary() As String
            Get
                Return CType(Me(Me.tableform137.ElementaryColumn),String)
            End Get
            Set
                Me(Me.tableform137.ElementaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ElemAddress() As String
            Get
                Return CType(Me(Me.tableform137.ElemAddressColumn),String)
            End Get
            Set
                Me(Me.tableform137.ElemAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elemSY() As String
            Get
                Return CType(Me(Me.tableform137.elemSYColumn),String)
            End Get
            Set
                Me(Me.tableform137.elemSYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HighSchool() As String
            Get
                Return CType(Me(Me.tableform137.HighSchoolColumn),String)
            End Get
            Set
                Me(Me.tableform137.HighSchoolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HSAddress() As String
            Get
                Return CType(Me(Me.tableform137.HSAddressColumn),String)
            End Get
            Set
                Me(Me.tableform137.HSAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elemAve() As String
            Get
                Return CType(Me(Me.tableform137.elemAveColumn),String)
            End Get
            Set
                Me(Me.tableform137.elemAveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property shsEligibility() As String
            Get
                Return CType(Me(Me.tableform137.shsEligibilityColumn),String)
            End Get
            Set
                Me(Me.tableform137.shsEligibilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jhsAve() As String
            Get
                Return CType(Me(Me.tableform137.jhsAveColumn),String)
            End Get
            Set
                Me(Me.tableform137.jhsAveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jhsGradDate() As String
            Get
                Return CType(Me(Me.tableform137.jhsGradDateColumn),String)
            End Get
            Set
                Me(Me.tableform137.jhsGradDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jhsExamDate() As String
            Get
                Return CType(Me(Me.tableform137.jhsExamDateColumn),String)
            End Get
            Set
                Me(Me.tableform137.jhsExamDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property profImage() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableform137.profImageColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'profImage' in table 'form137' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableform137.profImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableform137.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'form137' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableform137.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property track() As String
            Get
                Return CType(Me(Me.tableform137.trackColumn),String)
            End Get
            Set
                Me(Me.tableform137.trackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strand() As String
            Get
                Return CType(Me(Me.tableform137.strandColumn),String)
            End Get
            Set
                Me(Me.tableform137.strandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adviser() As String
            Get
                Return CType(Me(Me.tableform137.adviserColumn),String)
            End Get
            Set
                Me(Me.tableform137.adviserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adviser1() As String
            Get
                Return CType(Me(Me.tableform137.Adviser1Column),String)
            End Get
            Set
                Me(Me.tableform137.Adviser1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property batch() As String
            Get
                Try 
                    Return CType(Me(Me.tableform137.batchColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'batch' in table 'form137' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableform137.batchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableform137.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableform137.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableform137.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableform137.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableform137.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableform137.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableform137.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableform137.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemSemNull() As Boolean
            Return Me.IsNull(Me.tableform137.SemSemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemSemNull()
            Me(Me.tableform137.SemSemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemSYNull() As Boolean
            Return Me.IsNull(Me.tableform137.SemSYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemSYNull()
            Me(Me.tableform137.SemSYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprofImageNull() As Boolean
            Return Me.IsNull(Me.tableform137.profImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprofImageNull()
            Me(Me.tableform137.profImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableform137.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableform137.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbatchNull() As Boolean
            Return Me.IsNull(Me.tableform137.batchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbatchNull()
            Me(Me.tableform137.batchColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class studentProfileRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As studentProfileRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As studentProfileRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As studentProfileRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClassReplacementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClassReplacementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClassReplacementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClassReplacementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class collectionReport1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As collectionReport1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As collectionReport1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As collectionReport1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CAVRequestRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CAVRequestRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CAVRequestRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CAVRequestRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TORNewRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TORNewRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TORNewRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TORNewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class form137RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As form137Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As form137Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As form137Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Reports3TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class studentProfileTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "studentProfile"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("CivilStatus", "CivilStatus")
            tableMapping.ColumnMappings.Add("BirthPlace", "BirthPlace")
            tableMapping.ColumnMappings.Add("Citizenship", "Citizenship")
            tableMapping.ColumnMappings.Add("Religion", "Religion")
            tableMapping.ColumnMappings.Add("BloodType", "BloodType")
            tableMapping.ColumnMappings.Add("TelNumber", "TelNumber")
            tableMapping.ColumnMappings.Add("MobileNumber", "MobileNumber")
            tableMapping.ColumnMappings.Add("HighSchool", "HighSchool")
            tableMapping.ColumnMappings.Add("HSAddress", "HSAddress")
            tableMapping.ColumnMappings.Add("College", "College")
            tableMapping.ColumnMappings.Add("CAddress", "CAddress")
            tableMapping.ColumnMappings.Add("Requirements", "Requirements")
            tableMapping.ColumnMappings.Add("Encoder", "Encoder")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("AdmissionDate", "AdmissionDate")
            tableMapping.ColumnMappings.Add("GraduationDate", "GraduationDate")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("GuardianContact", "GuardianContact")
            tableMapping.ColumnMappings.Add("GuardianAddress", "GuardianAddress")
            tableMapping.ColumnMappings.Add("ImagePath", "ImagePath")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Elementary", "Elementary")
            tableMapping.ColumnMappings.Add("ElemAddress", "ElemAddress")
            tableMapping.ColumnMappings.Add("GuardianRelationship", "GuardianRelationship")
            tableMapping.ColumnMappings.Add("GuardianTelNo", "GuardianTelNo")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Father", "Father")
            tableMapping.ColumnMappings.Add("FOccupation", "FOccupation")
            tableMapping.ColumnMappings.Add("Mother", "Mother")
            tableMapping.ColumnMappings.Add("MOccupation", "MOccupation")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("Pronoun", "Pronoun")
            tableMapping.ColumnMappings.Add("Pronoun2", "Pronoun2")
            tableMapping.ColumnMappings.Add("Pronoun3", "Pronoun3")
            tableMapping.ColumnMappings.Add("Ethnicity", "Ethnicity")
            tableMapping.ColumnMappings.Add("ParentsMonthly", "ParentsMonthly")
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("Brgy", "Brgy")
            tableMapping.ColumnMappings.Add("Sitio", "Sitio")
            tableMapping.ColumnMappings.Add("settingsID", "settingsID")
            tableMapping.ColumnMappings.Add("semstudentid", "semstudentid")
            tableMapping.ColumnMappings.Add("StudentNumber1", "StudentNumber1")
            tableMapping.ColumnMappings.Add("FName", "FName")
            tableMapping.ColumnMappings.Add("MName", "MName")
            tableMapping.ColumnMappings.Add("LName", "LName")
            tableMapping.ColumnMappings.Add("Course1", "Course1")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Term", "Term")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("StudeStatus", "StudeStatus")
            tableMapping.ColumnMappings.Add("Scholarship", "Scholarship")
            tableMapping.ColumnMappings.Add("DurationFrom", "DurationFrom")
            tableMapping.ColumnMappings.Add("DurationTo", "DurationTo")
            tableMapping.ColumnMappings.Add("AssessmentDate", "AssessmentDate")
            tableMapping.ColumnMappings.Add("AssessmentResult", "AssessmentResult")
            tableMapping.ColumnMappings.Add("PayingStatus", "PayingStatus")
            tableMapping.ColumnMappings.Add("GrantAmount", "GrantAmount")
            tableMapping.ColumnMappings.Add("YearLevelStat", "YearLevelStat")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("Track", "Track")
            tableMapping.ColumnMappings.Add("Qualification", "Qualification")
            tableMapping.ColumnMappings.Add("BalikAral", "BalikAral")
            tableMapping.ColumnMappings.Add("IP", "IP")
            tableMapping.ColumnMappings.Add("FourPs", "FourPs")
            tableMapping.ColumnMappings.Add("Repeater", "Repeater")
            tableMapping.ColumnMappings.Add("Transferee", "Transferee")
            tableMapping.ColumnMappings.Add("EnrolledDate", "EnrolledDate")
            tableMapping.ColumnMappings.Add("Adviser", "Adviser")
            tableMapping.ColumnMappings.Add("settingsID1", "settingsID1")
            tableMapping.ColumnMappings.Add("sectionID", "sectionID")
            tableMapping.ColumnMappings.Add("settingsID2", "settingsID2")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("SDS", "SDS")
            tableMapping.ColumnMappings.Add("SchoolIDSHS", "SchoolIDSHS")
            tableMapping.ColumnMappings.Add("SchoolIDJHS", "SchoolIDJHS")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            tableMapping.ColumnMappings.Add("RegistrarSHS", "RegistrarSHS")
            tableMapping.ColumnMappings.Add("RegistrarJHS", "RegistrarJHS")
            tableMapping.ColumnMappings.Add("GuidanceSHS", "GuidanceSHS")
            tableMapping.ColumnMappings.Add("GuidanceJHS", "GuidanceJHS")
            tableMapping.ColumnMappings.Add("member1Prop", "member1Prop")
            tableMapping.ColumnMappings.Add("member2Prop", "member2Prop")
            tableMapping.ColumnMappings.Add("region", "region")
            tableMapping.ColumnMappings.Add("adas1", "adas1")
            tableMapping.ColumnMappings.Add("adas1Position", "adas1Position")
            tableMapping.ColumnMappings.Add("sdsPosition", "sdsPosition")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("regionAddress", "regionAddress")
            tableMapping.ColumnMappings.Add("schoolLogo", "schoolLogo")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("depedLogo", "depedLogo")
            tableMapping.ColumnMappings.Add("regionalDirector", "regionalDirector")
            tableMapping.ColumnMappings.Add("directorPosition", "directorPosition")
            tableMapping.ColumnMappings.Add("divisionAddress", "divisionAddress")
            tableMapping.ColumnMappings.Add("profID", "profID")
            tableMapping.ColumnMappings.Add("profImage", "profImage")
            tableMapping.ColumnMappings.Add("StudentNumber2", "StudentNumber2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM studeprofile s join semesterstude ss on s.StudentNumber=ss.StudentN"& _ 
                "umber join srms_settings st on s.settingsID=st.settingsID join profimage pi on s"& _ 
                ".StudentNumber=pi.StudentNumber"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports3.studentProfileDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports3.studentProfileDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports3.studentProfileDataTable = New Reports3.studentProfileDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ClassReplacementTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ClassReplacement"
            tableMapping.ColumnMappings.Add("IDNumber", "IDNumber")
            tableMapping.ColumnMappings.Add("empPosition", "empPosition")
            tableMapping.ColumnMappings.Add("schedTime", "schedTime")
            tableMapping.ColumnMappings.Add("subject", "subject")
            tableMapping.ColumnMappings.Add("gradeLevel", "gradeLevel")
            tableMapping.ColumnMappings.Add("replacement", "replacement")
            tableMapping.ColumnMappings.Add("applicableDate", "applicableDate")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("dateFrom", "dateFrom")
            tableMapping.ColumnMappings.Add("dateTo", "dateTo")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT s.IDNumber, s.FirstName, s.MiddleName, s.LastName, s.empPosition, cp.sched"& _ 
                "Time, cp.subject, cp.gradeLevel, cp.replacement, cp.dateFrom, cp.dateTo, st.Scho"& _ 
                "olName, st.SchoolAddress, st.SchoolHead, st.sHeadPosition, st.Division, st.Regio"& _ 
                "n, st.letterHead FROM staff s join hr_classreplacement cp on s.IDNumber=cp.IDNum"& _ 
                "ber join srms_settings st on cp.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports3.ClassReplacementDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports3.ClassReplacementDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports3.ClassReplacementDataTable = New Reports3.ClassReplacementDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class collectionReport1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "collectionReport1"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("PDate", "PDate")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("ORNumber", "ORNumber")
            tableMapping.ColumnMappings.Add("Cashier", "Cashier")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, concat(p.LastName,', ',p.FirstName,' ',p.MiddleName) as S"& _ 
                "tudentName,pa.PDate, pa.Amount, pa.ORNumber, pa.Cashier, pa.Course, pa.YearLevel"& _ 
                ", pa.description, pa.Sem, pa.SY, st.SchoolName, st.SchoolAddress, st.letterHead "& _ 
                "from studeprofile p join srms_settings st on p.settingsID=st.settingsID join pay"& _ 
                "mentsaccounts pa on p.StudentNumber=pa.StudentNumber "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports3.collectionReport1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports3.collectionReport1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports3.collectionReport1DataTable = New Reports3.collectionReport1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CAVRequestTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CAVRequest"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("BirthPlace", "BirthPlace")
            tableMapping.ColumnMappings.Add("presentAddress", "presentAddress")
            tableMapping.ColumnMappings.Add("MobileNumber", "MobileNumber")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolIDJHS", "SchoolIDJHS")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("Region1", "Region1")
            tableMapping.ColumnMappings.Add("ctrlNo", "ctrlNo")
            tableMapping.ColumnMappings.Add("applicationDate", "applicationDate")
            tableMapping.ColumnMappings.Add("purpose", "purpose")
            tableMapping.ColumnMappings.Add("releasedDate", "releasedDate")
            tableMapping.ColumnMappings.Add("Pronoun3", "Pronoun3")
            tableMapping.ColumnMappings.Add("regionAddress", "regionAddress")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select p.StudentNumber, concat(p.FirstName,' ',p.MiddleName,' ',p.LastName) as St"& _ 
                "udentName, p.BirthDate, p.BirthPlace, concat(p.Sitio,' ',p.Brgy,' ',p.City,' ',p"& _ 
                ".Province) as presentAddress, p.MobileNumber, ss.SY, st.SchoolName, st.SchoolAdd"& _ 
                "ress, st.SchoolIDJHS, st.Region, st.Division, st.SchoolHead, st.sHeadPosition, s"& _ 
                "t.Region, st.regionAddress, st.letterHead, cr.ctrlNo, cr.applicationDate, cr.pur"& _ 
                "pose, cr.releasedDate, p.Pronoun3 from studeprofile p join semesterstude ss on p"& _ 
                ".StudentNumber=ss.StudentNumber join srms_settings st on ss.settingsID=st.settin"& _ 
                "gsID join cavreq cr on p.StudentNumber=cr.StudentNumber"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports3.CAVRequestDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports3.CAVRequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports3.CAVRequestDataTable = New Reports3.CAVRequestDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TORNewTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TORNew"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("PGrade", "PGrade")
            tableMapping.ColumnMappings.Add("MGrade", "MGrade")
            tableMapping.ColumnMappings.Add("FGrade", "FGrade")
            tableMapping.ColumnMappings.Add("Average", "Average")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("ImagePath", "ImagePath")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("Track", "Track")
            tableMapping.ColumnMappings.Add("Qualification", "Qualification")
            tableMapping.ColumnMappings.Add("Adviser", "Adviser")
            tableMapping.ColumnMappings.Add("PFinalGrade", "PFinalGrade")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("SchoolIDSHS", "SchoolIDSHS")
            tableMapping.ColumnMappings.Add("SchoolIDJHS", "SchoolIDJHS")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("schoolLogo", "schoolLogo")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("depedLogo", "depedLogo")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("RegistrarSHS", "RegistrarSHS")
            tableMapping.ColumnMappings.Add("RegistrarJHS", "RegistrarJHS")
            tableMapping.ColumnMappings.Add("SemSem", "SemSem")
            tableMapping.ColumnMappings.Add("SemSY", "SemSY")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, p.FirstName, p.MiddleName, p.LastName, p.ImagePath, p.Bir"& _ 
                "thDate, p.Sex, ss.YearLevel, concat(g.Sem,' ',g.SY) as Semester, ss.Track, ss.Se"& _ 
                "ction, ss.Qualification, ss.Adviser, ss.Semester as SemSem, ss.SY as SemSY, g.Su"& _ 
                "bjectCode, g.Description, g.PGrade, g.MGrade, g.PFinalGrade, g.FGrade, g.Average"& _ 
                ", st.SchoolName, st.SchoolAddress, st.Division, st.SchoolIDSHS, st.SchoolIDJHS, "& _ 
                "st.SchoolHead, st.sHeadPosition, st.RegistrarSHS, st.RegistrarJHS, st.schoolLogo"& _ 
                ", st.letterHead, st.depedLogo from studeprofile p join semesterstude ss on p.Stu"& _ 
                "dentNumber=ss.StudentNumber join grades g on p.StudentNumber=g.StudentNumber joi"& _ 
                "n srms_settings st on p.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports3.TORNewDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports3.TORNewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports3.TORNewDataTable = New Reports3.TORNewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class form137TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "form137"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("BirthPlace", "BirthPlace")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("GuardianAddress", "GuardianAddress")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("Qualification", "Qualification")
            tableMapping.ColumnMappings.Add("SemSem", "SemSem")
            tableMapping.ColumnMappings.Add("SemSY", "SemSY")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("PGrade", "PGrade")
            tableMapping.ColumnMappings.Add("MGrade", "MGrade")
            tableMapping.ColumnMappings.Add("PFinalGrade", "PFinalGrade")
            tableMapping.ColumnMappings.Add("FGrade", "FGrade")
            tableMapping.ColumnMappings.Add("Average", "Average")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("SchoolIDSHS", "SchoolIDSHS")
            tableMapping.ColumnMappings.Add("SchoolIDJHS", "SchoolIDJHS")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("RegistrarSHS", "RegistrarSHS")
            tableMapping.ColumnMappings.Add("RegistrarJHS", "RegistrarJHS")
            tableMapping.ColumnMappings.Add("SchoolName1", "SchoolName1")
            tableMapping.ColumnMappings.Add("guardianOccupation", "guardianOccupation")
            tableMapping.ColumnMappings.Add("Elementary", "Elementary")
            tableMapping.ColumnMappings.Add("ElemAddress", "ElemAddress")
            tableMapping.ColumnMappings.Add("elemSY", "elemSY")
            tableMapping.ColumnMappings.Add("HighSchool", "HighSchool")
            tableMapping.ColumnMappings.Add("HSAddress", "HSAddress")
            tableMapping.ColumnMappings.Add("elemAve", "elemAve")
            tableMapping.ColumnMappings.Add("shsEligibility", "shsEligibility")
            tableMapping.ColumnMappings.Add("jhsAve", "jhsAve")
            tableMapping.ColumnMappings.Add("jhsGradDate", "jhsGradDate")
            tableMapping.ColumnMappings.Add("jhsExamDate", "jhsExamDate")
            tableMapping.ColumnMappings.Add("profImage", "profImage")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("track", "track")
            tableMapping.ColumnMappings.Add("strand", "strand")
            tableMapping.ColumnMappings.Add("adviser", "adviser")
            tableMapping.ColumnMappings.Add("Adviser1", "Adviser1")
            tableMapping.ColumnMappings.Add("batch", "batch")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, p.FirstName, p.MiddleName, p.LastName, pi.profImage, p.Bi"& _ 
                "rthPlace, p.BirthDate, p.Guardian, p.GuardianAddress, p.Sex, p.guardianOccupatio"& _ 
                "n, p.Elementary, p.ElemAddress, p.elemSY, p.HighSchool, p.HSAddress, p.elemAve, "& _ 
                "p.shsEligibility, p.jhsAve, p.jhsGradDate, jhsExamDate, g.YearLevel, g.SchoolNam"& _ 
                "e, ss.Semester, concat(g.Sem,', ',g.SY) as batch, g.Sem ,g.SY,g.track, g.strand,"& _ 
                " g.adviser, g.Section, ss.Qualification, ss.Adviser, ss.Semester as SemSem, ss.S"& _ 
                "Y as SemSY, g.SubjectCode, g.Description, g.PGrade, g.MGrade, g.PFinalGrade, g.F"& _ 
                "Grade, g.Average, st.SchoolName, st.SchoolAddress, st.Division, st.SchoolIDSHS, "& _ 
                "st.SchoolIDJHS, st.SchoolHead, st.sHeadPosition, st.RegistrarSHS, st.RegistrarJH"& _ 
                "S, st.letterHead from studeprofile p join semesterstude ss on p.StudentNumber=ss"& _ 
                ".StudentNumber join grades g on p.StudentNumber=g.StudentNumber join srms_settin"& _ 
                "gs st on p.settingsID=st.settingsID join classdays cd on st.settingsID=cd.settin"& _ 
                "gsID join profimage pi on p.StudentNumber=pi.StudentNumber group by g.SubjectCod"& _ 
                "e, g.SY, g.Sem order by g.SY, g.Sem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports3.form137DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports3.form137DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports3.form137DataTable = New Reports3.form137DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Reports3, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Reports3, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Reports3, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Reports3) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
