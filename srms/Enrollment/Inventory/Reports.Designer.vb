'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8830
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Reports"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Reports
    Inherits Global.System.Data.DataSet
    
    Private tablepurchaseRequest As purchaseRequestDataTable
    
    Private tableMR As MRDataTable
    
    Private tablels_items As ls_itemsDataTable
    
    Private tablereport_physicalCount As report_physicalCountDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("purchaseRequest")) Is Nothing) Then
                MyBase.Tables.Add(New purchaseRequestDataTable(ds.Tables("purchaseRequest")))
            End If
            If (Not (ds.Tables("MR")) Is Nothing) Then
                MyBase.Tables.Add(New MRDataTable(ds.Tables("MR")))
            End If
            If (Not (ds.Tables("ls_items")) Is Nothing) Then
                MyBase.Tables.Add(New ls_itemsDataTable(ds.Tables("ls_items")))
            End If
            If (Not (ds.Tables("report_physicalCount")) Is Nothing) Then
                MyBase.Tables.Add(New report_physicalCountDataTable(ds.Tables("report_physicalCount")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property purchaseRequest() As purchaseRequestDataTable
        Get
            Return Me.tablepurchaseRequest
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MR() As MRDataTable
        Get
            Return Me.tableMR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ls_items() As ls_itemsDataTable
        Get
            Return Me.tablels_items
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property report_physicalCount() As report_physicalCountDataTable
        Get
            Return Me.tablereport_physicalCount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Reports = CType(MyBase.Clone,Reports)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("purchaseRequest")) Is Nothing) Then
                MyBase.Tables.Add(New purchaseRequestDataTable(ds.Tables("purchaseRequest")))
            End If
            If (Not (ds.Tables("MR")) Is Nothing) Then
                MyBase.Tables.Add(New MRDataTable(ds.Tables("MR")))
            End If
            If (Not (ds.Tables("ls_items")) Is Nothing) Then
                MyBase.Tables.Add(New ls_itemsDataTable(ds.Tables("ls_items")))
            End If
            If (Not (ds.Tables("report_physicalCount")) Is Nothing) Then
                MyBase.Tables.Add(New report_physicalCountDataTable(ds.Tables("report_physicalCount")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablepurchaseRequest = CType(MyBase.Tables("purchaseRequest"),purchaseRequestDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepurchaseRequest) Is Nothing) Then
                Me.tablepurchaseRequest.InitVars
            End If
        End If
        Me.tableMR = CType(MyBase.Tables("MR"),MRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMR) Is Nothing) Then
                Me.tableMR.InitVars
            End If
        End If
        Me.tablels_items = CType(MyBase.Tables("ls_items"),ls_itemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablels_items) Is Nothing) Then
                Me.tablels_items.InitVars
            End If
        End If
        Me.tablereport_physicalCount = CType(MyBase.Tables("report_physicalCount"),report_physicalCountDataTable)
        If (initTable = true) Then
            If (Not (Me.tablereport_physicalCount) Is Nothing) Then
                Me.tablereport_physicalCount.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Reports"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Reports.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablepurchaseRequest = New purchaseRequestDataTable
        MyBase.Tables.Add(Me.tablepurchaseRequest)
        Me.tableMR = New MRDataTable
        MyBase.Tables.Add(Me.tableMR)
        Me.tablels_items = New ls_itemsDataTable
        MyBase.Tables.Add(Me.tablels_items)
        Me.tablereport_physicalCount = New report_physicalCountDataTable
        MyBase.Tables.Add(Me.tablereport_physicalCount)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepurchaseRequest() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializels_items() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializereport_physicalCount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Reports = New Reports
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub purchaseRequestRowChangeEventHandler(ByVal sender As Object, ByVal e As purchaseRequestRowChangeEvent)
    
    Public Delegate Sub MRRowChangeEventHandler(ByVal sender As Object, ByVal e As MRRowChangeEvent)
    
    Public Delegate Sub ls_itemsRowChangeEventHandler(ByVal sender As Object, ByVal e As ls_itemsRowChangeEvent)
    
    Public Delegate Sub report_physicalCountRowChangeEventHandler(ByVal sender As Object, ByVal e As report_physicalCountRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class purchaseRequestDataTable
        Inherits Global.System.Data.TypedTableBase(Of purchaseRequestRow)
        
        Private columnitemName As Global.System.Data.DataColumn
        
        Private columnitemDescription As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columnIDNumber As Global.System.Data.DataColumn
        
        Private columnstaffName As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnPosition As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        Private columndateRequested As Global.System.Data.DataColumn
        
        Private columnpurpose As Global.System.Data.DataColumn
        
        Private columnconsumptionPeriod As Global.System.Data.DataColumn
        
        Private columnprNo As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "purchaseRequest"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property staffNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstaffName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateRequestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateRequested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property purposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpurpose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property consumptionPeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconsumptionPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As purchaseRequestRow
            Get
                Return CType(Me.Rows(index),purchaseRequestRow)
            End Get
        End Property
        
        Public Event purchaseRequestRowChanging As purchaseRequestRowChangeEventHandler
        
        Public Event purchaseRequestRowChanged As purchaseRequestRowChangeEventHandler
        
        Public Event purchaseRequestRowDeleting As purchaseRequestRowChangeEventHandler
        
        Public Event purchaseRequestRowDeleted As purchaseRequestRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpurchaseRequestRow(ByVal row As purchaseRequestRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpurchaseRequestRow( _
                    ByVal itemName As String,  _
                    ByVal itemDescription As String,  _
                    ByVal qty As UInteger,  _
                    ByVal unit As String,  _
                    ByVal IDNumber As String,  _
                    ByVal staffName As String,  _
                    ByVal Division As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal Position As String,  _
                    ByVal PropertyCustodian As String,  _
                    ByVal dateRequested As Date,  _
                    ByVal purpose As String,  _
                    ByVal consumptionPeriod As String,  _
                    ByVal prNo As String,  _
                    ByVal sHeadPosition As String) As purchaseRequestRow
            Dim rowpurchaseRequestRow As purchaseRequestRow = CType(Me.NewRow,purchaseRequestRow)
            Dim columnValuesArray() As Object = New Object() {itemName, itemDescription, qty, unit, IDNumber, staffName, Division, SchoolName, SchoolAddress, SchoolHead, Position, PropertyCustodian, dateRequested, purpose, consumptionPeriod, prNo, sHeadPosition}
            rowpurchaseRequestRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpurchaseRequestRow)
            Return rowpurchaseRequestRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDNumber(ByVal IDNumber As String) As purchaseRequestRow
            Return CType(Me.Rows.Find(New Object() {IDNumber}),purchaseRequestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As purchaseRequestDataTable = CType(MyBase.Clone,purchaseRequestDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New purchaseRequestDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnitemName = MyBase.Columns("itemName")
            Me.columnitemDescription = MyBase.Columns("itemDescription")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnunit = MyBase.Columns("unit")
            Me.columnIDNumber = MyBase.Columns("IDNumber")
            Me.columnstaffName = MyBase.Columns("staffName")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnPosition = MyBase.Columns("Position")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
            Me.columndateRequested = MyBase.Columns("dateRequested")
            Me.columnpurpose = MyBase.Columns("purpose")
            Me.columnconsumptionPeriod = MyBase.Columns("consumptionPeriod")
            Me.columnprNo = MyBase.Columns("prNo")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnitemName = New Global.System.Data.DataColumn("itemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemName)
            Me.columnitemDescription = New Global.System.Data.DataColumn("itemDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemDescription)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columnIDNumber = New Global.System.Data.DataColumn("IDNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDNumber)
            Me.columnstaffName = New Global.System.Data.DataColumn("staffName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstaffName)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnPosition = New Global.System.Data.DataColumn("Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosition)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columndateRequested = New Global.System.Data.DataColumn("dateRequested", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateRequested)
            Me.columnpurpose = New Global.System.Data.DataColumn("purpose", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpurpose)
            Me.columnconsumptionPeriod = New Global.System.Data.DataColumn("consumptionPeriod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconsumptionPeriod)
            Me.columnprNo = New Global.System.Data.DataColumn("prNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprNo)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDNumber}, true))
            Me.columnitemName.AllowDBNull = false
            Me.columnitemName.MaxLength = 65
            Me.columnitemDescription.AllowDBNull = false
            Me.columnitemDescription.MaxLength = 100
            Me.columnqty.AllowDBNull = false
            Me.columnunit.AllowDBNull = false
            Me.columnunit.MaxLength = 45
            Me.columnIDNumber.AllowDBNull = false
            Me.columnIDNumber.Unique = true
            Me.columnIDNumber.MaxLength = 25
            Me.columnstaffName.MaxLength = 177
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnPosition.MaxLength = 45
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 65
            Me.columndateRequested.AllowDBNull = false
            Me.columnpurpose.MaxLength = 150
            Me.columnconsumptionPeriod.MaxLength = 150
            Me.columnprNo.AllowDBNull = false
            Me.columnprNo.MaxLength = 45
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpurchaseRequestRow() As purchaseRequestRow
            Return CType(Me.NewRow,purchaseRequestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New purchaseRequestRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(purchaseRequestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.purchaseRequestRowChangedEvent) Is Nothing) Then
                RaiseEvent purchaseRequestRowChanged(Me, New purchaseRequestRowChangeEvent(CType(e.Row,purchaseRequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.purchaseRequestRowChangingEvent) Is Nothing) Then
                RaiseEvent purchaseRequestRowChanging(Me, New purchaseRequestRowChangeEvent(CType(e.Row,purchaseRequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.purchaseRequestRowDeletedEvent) Is Nothing) Then
                RaiseEvent purchaseRequestRowDeleted(Me, New purchaseRequestRowChangeEvent(CType(e.Row,purchaseRequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.purchaseRequestRowDeletingEvent) Is Nothing) Then
                RaiseEvent purchaseRequestRowDeleting(Me, New purchaseRequestRowChangeEvent(CType(e.Row,purchaseRequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepurchaseRequestRow(ByVal row As purchaseRequestRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "purchaseRequestDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MRDataTable
        Inherits Global.System.Data.TypedTableBase(Of MRRow)
        
        Private columnitemName As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnnotes As Global.System.Data.DataColumn
        
        Private columnAccountable As Global.System.Data.DataColumn
        
        Private columnDepartment As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        Private columnacquiredDate As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columnctrlNo As Global.System.Data.DataColumn
        
        Private columnserialNo As Global.System.Data.DataColumn
        
        Private columnmodel As Global.System.Data.DataColumn
        
        Private columnitemCondition As Global.System.Data.DataColumn
        
        Private columnempPosition As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccountableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acquiredDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacquiredDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctrlNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctrlNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmodel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemConditionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemCondition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property empPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnempPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MRRow
            Get
                Return CType(Me.Rows(index),MRRow)
            End Get
        End Property
        
        Public Event MRRowChanging As MRRowChangeEventHandler
        
        Public Event MRRowChanged As MRRowChangeEventHandler
        
        Public Event MRRowDeleting As MRRowChangeEventHandler
        
        Public Event MRRowDeleted As MRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMRRow(ByVal row As MRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMRRow( _
                    ByVal itemName As String,  _
                    ByVal description As String,  _
                    ByVal notes As String,  _
                    ByVal Accountable As String,  _
                    ByVal Department As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal Division As String,  _
                    ByVal PropertyCustodian As String,  _
                    ByVal acquiredDate As Date,  _
                    ByVal qty As Integer,  _
                    ByVal unit As String,  _
                    ByVal ctrlNo As String,  _
                    ByVal serialNo As String,  _
                    ByVal model As String,  _
                    ByVal itemCondition As String,  _
                    ByVal empPosition As String) As MRRow
            Dim rowMRRow As MRRow = CType(Me.NewRow,MRRow)
            Dim columnValuesArray() As Object = New Object() {itemName, description, notes, Accountable, Department, SchoolName, SchoolAddress, Division, PropertyCustodian, acquiredDate, qty, unit, ctrlNo, serialNo, model, itemCondition, empPosition}
            rowMRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMRRow)
            Return rowMRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MRDataTable = CType(MyBase.Clone,MRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MRDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnitemName = MyBase.Columns("itemName")
            Me.columndescription = MyBase.Columns("description")
            Me.columnnotes = MyBase.Columns("notes")
            Me.columnAccountable = MyBase.Columns("Accountable")
            Me.columnDepartment = MyBase.Columns("Department")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
            Me.columnacquiredDate = MyBase.Columns("acquiredDate")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnunit = MyBase.Columns("unit")
            Me.columnctrlNo = MyBase.Columns("ctrlNo")
            Me.columnserialNo = MyBase.Columns("serialNo")
            Me.columnmodel = MyBase.Columns("model")
            Me.columnitemCondition = MyBase.Columns("itemCondition")
            Me.columnempPosition = MyBase.Columns("empPosition")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnitemName = New Global.System.Data.DataColumn("itemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemName)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnnotes = New Global.System.Data.DataColumn("notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotes)
            Me.columnAccountable = New Global.System.Data.DataColumn("Accountable", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountable)
            Me.columnDepartment = New Global.System.Data.DataColumn("Department", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartment)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columnacquiredDate = New Global.System.Data.DataColumn("acquiredDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacquiredDate)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columnctrlNo = New Global.System.Data.DataColumn("ctrlNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctrlNo)
            Me.columnserialNo = New Global.System.Data.DataColumn("serialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserialNo)
            Me.columnmodel = New Global.System.Data.DataColumn("model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmodel)
            Me.columnitemCondition = New Global.System.Data.DataColumn("itemCondition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemCondition)
            Me.columnempPosition = New Global.System.Data.DataColumn("empPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnempPosition)
            Me.columnitemName.AllowDBNull = false
            Me.columnitemName.MaxLength = 100
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 150
            Me.columnnotes.AllowDBNull = false
            Me.columnnotes.MaxLength = 150
            Me.columnAccountable.MaxLength = 177
            Me.columnDepartment.AllowDBNull = false
            Me.columnDepartment.MaxLength = 150
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 65
            Me.columnacquiredDate.AllowDBNull = false
            Me.columnunit.MaxLength = 45
            Me.columnctrlNo.AllowDBNull = false
            Me.columnctrlNo.MaxLength = 45
            Me.columnserialNo.AllowDBNull = false
            Me.columnserialNo.MaxLength = 45
            Me.columnmodel.AllowDBNull = false
            Me.columnmodel.MaxLength = 65
            Me.columnitemCondition.AllowDBNull = false
            Me.columnitemCondition.MaxLength = 45
            Me.columnempPosition.AllowDBNull = false
            Me.columnempPosition.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMRRow() As MRRow
            Return CType(Me.NewRow,MRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MRRowChangedEvent) Is Nothing) Then
                RaiseEvent MRRowChanged(Me, New MRRowChangeEvent(CType(e.Row,MRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MRRowChangingEvent) Is Nothing) Then
                RaiseEvent MRRowChanging(Me, New MRRowChangeEvent(CType(e.Row,MRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MRRowDeletedEvent) Is Nothing) Then
                RaiseEvent MRRowDeleted(Me, New MRRowChangeEvent(CType(e.Row,MRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MRRowDeletingEvent) Is Nothing) Then
                RaiseEvent MRRowDeleting(Me, New MRRowChangeEvent(CType(e.Row,MRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMRRow(ByVal row As MRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ls_itemsDataTable
        Inherits Global.System.Data.TypedTableBase(Of ls_itemsRow)
        
        Private columnctrlNo As Global.System.Data.DataColumn
        
        Private columnitemName As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnitemCondition As Global.System.Data.DataColumn
        
        Private columnaccountable As Global.System.Data.DataColumn
        
        Private columnacquiredDate As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnPosition As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ls_items"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctrlNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctrlNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemConditionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemCondition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accountableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acquiredDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacquiredDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ls_itemsRow
            Get
                Return CType(Me.Rows(index),ls_itemsRow)
            End Get
        End Property
        
        Public Event ls_itemsRowChanging As ls_itemsRowChangeEventHandler
        
        Public Event ls_itemsRowChanged As ls_itemsRowChangeEventHandler
        
        Public Event ls_itemsRowDeleting As ls_itemsRowChangeEventHandler
        
        Public Event ls_itemsRowDeleted As ls_itemsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addls_itemsRow(ByVal row As ls_itemsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addls_itemsRow(ByVal ctrlNo As String, ByVal itemName As String, ByVal description As String, ByVal itemCondition As String, ByVal accountable As String, ByVal acquiredDate As Date, ByVal Division As String, ByVal SchoolName As String, ByVal SchoolAddress As String, ByVal SchoolHead As String, ByVal Position As String, ByVal PropertyCustodian As String) As ls_itemsRow
            Dim rowls_itemsRow As ls_itemsRow = CType(Me.NewRow,ls_itemsRow)
            Dim columnValuesArray() As Object = New Object() {ctrlNo, itemName, description, itemCondition, accountable, acquiredDate, Division, SchoolName, SchoolAddress, SchoolHead, Position, PropertyCustodian}
            rowls_itemsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowls_itemsRow)
            Return rowls_itemsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ls_itemsDataTable = CType(MyBase.Clone,ls_itemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ls_itemsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnctrlNo = MyBase.Columns("ctrlNo")
            Me.columnitemName = MyBase.Columns("itemName")
            Me.columndescription = MyBase.Columns("description")
            Me.columnitemCondition = MyBase.Columns("itemCondition")
            Me.columnaccountable = MyBase.Columns("accountable")
            Me.columnacquiredDate = MyBase.Columns("acquiredDate")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnPosition = MyBase.Columns("Position")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnctrlNo = New Global.System.Data.DataColumn("ctrlNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctrlNo)
            Me.columnitemName = New Global.System.Data.DataColumn("itemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemName)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnitemCondition = New Global.System.Data.DataColumn("itemCondition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemCondition)
            Me.columnaccountable = New Global.System.Data.DataColumn("accountable", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountable)
            Me.columnacquiredDate = New Global.System.Data.DataColumn("acquiredDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacquiredDate)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnPosition = New Global.System.Data.DataColumn("Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosition)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columnctrlNo.AllowDBNull = false
            Me.columnctrlNo.MaxLength = 45
            Me.columnitemName.AllowDBNull = false
            Me.columnitemName.MaxLength = 100
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 150
            Me.columnitemCondition.AllowDBNull = false
            Me.columnitemCondition.MaxLength = 45
            Me.columnaccountable.AllowDBNull = false
            Me.columnaccountable.MaxLength = 200
            Me.columnacquiredDate.AllowDBNull = false
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnPosition.AllowDBNull = false
            Me.columnPosition.MaxLength = 45
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 65
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newls_itemsRow() As ls_itemsRow
            Return CType(Me.NewRow,ls_itemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ls_itemsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ls_itemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ls_itemsRowChangedEvent) Is Nothing) Then
                RaiseEvent ls_itemsRowChanged(Me, New ls_itemsRowChangeEvent(CType(e.Row,ls_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ls_itemsRowChangingEvent) Is Nothing) Then
                RaiseEvent ls_itemsRowChanging(Me, New ls_itemsRowChangeEvent(CType(e.Row,ls_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ls_itemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ls_itemsRowDeleted(Me, New ls_itemsRowChangeEvent(CType(e.Row,ls_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ls_itemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ls_itemsRowDeleting(Me, New ls_itemsRowChangeEvent(CType(e.Row,ls_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removels_itemsRow(ByVal row As ls_itemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ls_itemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class report_physicalCountDataTable
        Inherits Global.System.Data.TypedTableBase(Of report_physicalCountRow)
        
        Private columnctrlNo As Global.System.Data.DataColumn
        
        Private columnitemName As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columnpurchasePrice As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnqtyShortage As Global.System.Data.DataColumn
        
        Private columnshortageValue As Global.System.Data.DataColumn
        
        Private columnnotes As Global.System.Data.DataColumn
        
        Private columnitemCategory As Global.System.Data.DataColumn
        
        Private columnacquiredDate As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnmember1Prop As Global.System.Data.DataColumn
        
        Private columnmember2Prop As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        Private columnprocessDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "report_physicalCount"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctrlNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctrlNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property purchasePriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpurchasePrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyShortageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqtyShortage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property shortageValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshortageValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acquiredDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacquiredDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property member1PropColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmember1Prop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property member2PropColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmember2Prop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property processDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprocessDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As report_physicalCountRow
            Get
                Return CType(Me.Rows(index),report_physicalCountRow)
            End Get
        End Property
        
        Public Event report_physicalCountRowChanging As report_physicalCountRowChangeEventHandler
        
        Public Event report_physicalCountRowChanged As report_physicalCountRowChangeEventHandler
        
        Public Event report_physicalCountRowDeleting As report_physicalCountRowChangeEventHandler
        
        Public Event report_physicalCountRowDeleted As report_physicalCountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addreport_physicalCountRow(ByVal row As report_physicalCountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addreport_physicalCountRow( _
                    ByVal ctrlNo As String,  _
                    ByVal itemName As String,  _
                    ByVal description As String,  _
                    ByVal unit As String,  _
                    ByVal purchasePrice As Double,  _
                    ByVal qty As Integer,  _
                    ByVal qtyShortage As Double,  _
                    ByVal shortageValue As Double,  _
                    ByVal notes As String,  _
                    ByVal itemCategory As String,  _
                    ByVal acquiredDate As Date,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal SchoolName As String,  _
                    ByVal member1Prop As String,  _
                    ByVal member2Prop As String,  _
                    ByVal PropertyCustodian As String,  _
                    ByVal processDate As Date) As report_physicalCountRow
            Dim rowreport_physicalCountRow As report_physicalCountRow = CType(Me.NewRow,report_physicalCountRow)
            Dim columnValuesArray() As Object = New Object() {ctrlNo, itemName, description, unit, purchasePrice, qty, qtyShortage, shortageValue, notes, itemCategory, acquiredDate, SchoolHead, sHeadPosition, SchoolName, member1Prop, member2Prop, PropertyCustodian, processDate}
            rowreport_physicalCountRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowreport_physicalCountRow)
            Return rowreport_physicalCountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As report_physicalCountDataTable = CType(MyBase.Clone,report_physicalCountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New report_physicalCountDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnctrlNo = MyBase.Columns("ctrlNo")
            Me.columnitemName = MyBase.Columns("itemName")
            Me.columndescription = MyBase.Columns("description")
            Me.columnunit = MyBase.Columns("unit")
            Me.columnpurchasePrice = MyBase.Columns("purchasePrice")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnqtyShortage = MyBase.Columns("qtyShortage")
            Me.columnshortageValue = MyBase.Columns("shortageValue")
            Me.columnnotes = MyBase.Columns("notes")
            Me.columnitemCategory = MyBase.Columns("itemCategory")
            Me.columnacquiredDate = MyBase.Columns("acquiredDate")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnmember1Prop = MyBase.Columns("member1Prop")
            Me.columnmember2Prop = MyBase.Columns("member2Prop")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
            Me.columnprocessDate = MyBase.Columns("processDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnctrlNo = New Global.System.Data.DataColumn("ctrlNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctrlNo)
            Me.columnitemName = New Global.System.Data.DataColumn("itemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemName)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columnpurchasePrice = New Global.System.Data.DataColumn("purchasePrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpurchasePrice)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnqtyShortage = New Global.System.Data.DataColumn("qtyShortage", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqtyShortage)
            Me.columnshortageValue = New Global.System.Data.DataColumn("shortageValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshortageValue)
            Me.columnnotes = New Global.System.Data.DataColumn("notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotes)
            Me.columnitemCategory = New Global.System.Data.DataColumn("itemCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemCategory)
            Me.columnacquiredDate = New Global.System.Data.DataColumn("acquiredDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacquiredDate)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnmember1Prop = New Global.System.Data.DataColumn("member1Prop", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmember1Prop)
            Me.columnmember2Prop = New Global.System.Data.DataColumn("member2Prop", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmember2Prop)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columnprocessDate = New Global.System.Data.DataColumn("processDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprocessDate)
            Me.columnctrlNo.AllowDBNull = false
            Me.columnctrlNo.MaxLength = 45
            Me.columnitemName.AllowDBNull = false
            Me.columnitemName.MaxLength = 100
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 150
            Me.columnunit.MaxLength = 45
            Me.columnpurchasePrice.AllowDBNull = false
            Me.columnqtyShortage.AllowDBNull = false
            Me.columnshortageValue.AllowDBNull = false
            Me.columnnotes.AllowDBNull = false
            Me.columnnotes.MaxLength = 150
            Me.columnitemCategory.AllowDBNull = false
            Me.columnitemCategory.MaxLength = 45
            Me.columnacquiredDate.AllowDBNull = false
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnmember1Prop.AllowDBNull = false
            Me.columnmember1Prop.MaxLength = 65
            Me.columnmember2Prop.AllowDBNull = false
            Me.columnmember2Prop.MaxLength = 65
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 65
            Me.columnprocessDate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newreport_physicalCountRow() As report_physicalCountRow
            Return CType(Me.NewRow,report_physicalCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New report_physicalCountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(report_physicalCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.report_physicalCountRowChangedEvent) Is Nothing) Then
                RaiseEvent report_physicalCountRowChanged(Me, New report_physicalCountRowChangeEvent(CType(e.Row,report_physicalCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.report_physicalCountRowChangingEvent) Is Nothing) Then
                RaiseEvent report_physicalCountRowChanging(Me, New report_physicalCountRowChangeEvent(CType(e.Row,report_physicalCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.report_physicalCountRowDeletedEvent) Is Nothing) Then
                RaiseEvent report_physicalCountRowDeleted(Me, New report_physicalCountRowChangeEvent(CType(e.Row,report_physicalCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.report_physicalCountRowDeletingEvent) Is Nothing) Then
                RaiseEvent report_physicalCountRowDeleting(Me, New report_physicalCountRowChangeEvent(CType(e.Row,report_physicalCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removereport_physicalCountRow(ByVal row As report_physicalCountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "report_physicalCountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class purchaseRequestRow
        Inherits Global.System.Data.DataRow
        
        Private tablepurchaseRequest As purchaseRequestDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepurchaseRequest = CType(Me.Table,purchaseRequestDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemName() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.itemNameColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.itemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemDescription() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.itemDescriptionColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.itemDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As UInteger
            Get
                Return CType(Me(Me.tablepurchaseRequest.qtyColumn),UInteger)
            End Get
            Set
                Me(Me.tablepurchaseRequest.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.unitColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDNumber() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.IDNumberColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.IDNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property staffName() As String
            Get
                Try 
                    Return CType(Me(Me.tablepurchaseRequest.staffNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'staffName' in table 'purchaseRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepurchaseRequest.staffNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.DivisionColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Position() As String
            Get
                Try 
                    Return CType(Me(Me.tablepurchaseRequest.PositionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Position' in table 'purchaseRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepurchaseRequest.PositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.PropertyCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateRequested() As Date
            Get
                Return CType(Me(Me.tablepurchaseRequest.dateRequestedColumn),Date)
            End Get
            Set
                Me(Me.tablepurchaseRequest.dateRequestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property purpose() As String
            Get
                Try 
                    Return CType(Me(Me.tablepurchaseRequest.purposeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'purpose' in table 'purchaseRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepurchaseRequest.purposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property consumptionPeriod() As String
            Get
                Try 
                    Return CType(Me(Me.tablepurchaseRequest.consumptionPeriodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'consumptionPeriod' in table 'purchaseRequest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepurchaseRequest.consumptionPeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prNo() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.prNoColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.prNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tablepurchaseRequest.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tablepurchaseRequest.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstaffNameNull() As Boolean
            Return Me.IsNull(Me.tablepurchaseRequest.staffNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstaffNameNull()
            Me(Me.tablepurchaseRequest.staffNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPositionNull() As Boolean
            Return Me.IsNull(Me.tablepurchaseRequest.PositionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPositionNull()
            Me(Me.tablepurchaseRequest.PositionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspurposeNull() As Boolean
            Return Me.IsNull(Me.tablepurchaseRequest.purposeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpurposeNull()
            Me(Me.tablepurchaseRequest.purposeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsconsumptionPeriodNull() As Boolean
            Return Me.IsNull(Me.tablepurchaseRequest.consumptionPeriodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetconsumptionPeriodNull()
            Me(Me.tablepurchaseRequest.consumptionPeriodColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MRRow
        Inherits Global.System.Data.DataRow
        
        Private tableMR As MRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMR = CType(Me.Table,MRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemName() As String
            Get
                Return CType(Me(Me.tableMR.itemNameColumn),String)
            End Get
            Set
                Me(Me.tableMR.itemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tableMR.descriptionColumn),String)
            End Get
            Set
                Me(Me.tableMR.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notes() As String
            Get
                Return CType(Me(Me.tableMR.notesColumn),String)
            End Get
            Set
                Me(Me.tableMR.notesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Accountable() As String
            Get
                Try 
                    Return CType(Me(Me.tableMR.AccountableColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Accountable' in table 'MR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMR.AccountableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Department() As String
            Get
                Return CType(Me(Me.tableMR.DepartmentColumn),String)
            End Get
            Set
                Me(Me.tableMR.DepartmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableMR.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableMR.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableMR.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableMR.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tableMR.DivisionColumn),String)
            End Get
            Set
                Me(Me.tableMR.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tableMR.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tableMR.PropertyCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acquiredDate() As Date
            Get
                Return CType(Me(Me.tableMR.acquiredDateColumn),Date)
            End Get
            Set
                Me(Me.tableMR.acquiredDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMR.qtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty' in table 'MR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMR.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableMR.unitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unit' in table 'MR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMR.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctrlNo() As String
            Get
                Return CType(Me(Me.tableMR.ctrlNoColumn),String)
            End Get
            Set
                Me(Me.tableMR.ctrlNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serialNo() As String
            Get
                Return CType(Me(Me.tableMR.serialNoColumn),String)
            End Get
            Set
                Me(Me.tableMR.serialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property model() As String
            Get
                Return CType(Me(Me.tableMR.modelColumn),String)
            End Get
            Set
                Me(Me.tableMR.modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemCondition() As String
            Get
                Return CType(Me(Me.tableMR.itemConditionColumn),String)
            End Get
            Set
                Me(Me.tableMR.itemConditionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property empPosition() As String
            Get
                Return CType(Me(Me.tableMR.empPositionColumn),String)
            End Get
            Set
                Me(Me.tableMR.empPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccountableNull() As Boolean
            Return Me.IsNull(Me.tableMR.AccountableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccountableNull()
            Me(Me.tableMR.AccountableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableMR.qtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetqtyNull()
            Me(Me.tableMR.qtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitNull() As Boolean
            Return Me.IsNull(Me.tableMR.unitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitNull()
            Me(Me.tableMR.unitColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ls_itemsRow
        Inherits Global.System.Data.DataRow
        
        Private tablels_items As ls_itemsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablels_items = CType(Me.Table,ls_itemsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctrlNo() As String
            Get
                Return CType(Me(Me.tablels_items.ctrlNoColumn),String)
            End Get
            Set
                Me(Me.tablels_items.ctrlNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemName() As String
            Get
                Return CType(Me(Me.tablels_items.itemNameColumn),String)
            End Get
            Set
                Me(Me.tablels_items.itemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tablels_items.descriptionColumn),String)
            End Get
            Set
                Me(Me.tablels_items.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemCondition() As String
            Get
                Return CType(Me(Me.tablels_items.itemConditionColumn),String)
            End Get
            Set
                Me(Me.tablels_items.itemConditionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property accountable() As String
            Get
                Return CType(Me(Me.tablels_items.accountableColumn),String)
            End Get
            Set
                Me(Me.tablels_items.accountableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acquiredDate() As Date
            Get
                Return CType(Me(Me.tablels_items.acquiredDateColumn),Date)
            End Get
            Set
                Me(Me.tablels_items.acquiredDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tablels_items.DivisionColumn),String)
            End Get
            Set
                Me(Me.tablels_items.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablels_items.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablels_items.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablels_items.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablels_items.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablels_items.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablels_items.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Position() As String
            Get
                Return CType(Me(Me.tablels_items.PositionColumn),String)
            End Get
            Set
                Me(Me.tablels_items.PositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tablels_items.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tablels_items.PropertyCustodianColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class report_physicalCountRow
        Inherits Global.System.Data.DataRow
        
        Private tablereport_physicalCount As report_physicalCountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablereport_physicalCount = CType(Me.Table,report_physicalCountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctrlNo() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.ctrlNoColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.ctrlNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemName() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.itemNameColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.itemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.descriptionColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Try 
                    Return CType(Me(Me.tablereport_physicalCount.unitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unit' in table 'report_physicalCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport_physicalCount.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property purchasePrice() As Double
            Get
                Return CType(Me(Me.tablereport_physicalCount.purchasePriceColumn),Double)
            End Get
            Set
                Me(Me.tablereport_physicalCount.purchasePriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablereport_physicalCount.qtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty' in table 'report_physicalCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport_physicalCount.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qtyShortage() As Double
            Get
                Return CType(Me(Me.tablereport_physicalCount.qtyShortageColumn),Double)
            End Get
            Set
                Me(Me.tablereport_physicalCount.qtyShortageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property shortageValue() As Double
            Get
                Return CType(Me(Me.tablereport_physicalCount.shortageValueColumn),Double)
            End Get
            Set
                Me(Me.tablereport_physicalCount.shortageValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notes() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.notesColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.notesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemCategory() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.itemCategoryColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.itemCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acquiredDate() As Date
            Get
                Return CType(Me(Me.tablereport_physicalCount.acquiredDateColumn),Date)
            End Get
            Set
                Me(Me.tablereport_physicalCount.acquiredDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property member1Prop() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.member1PropColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.member1PropColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property member2Prop() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.member2PropColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.member2PropColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tablereport_physicalCount.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tablereport_physicalCount.PropertyCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property processDate() As Date
            Get
                Return CType(Me(Me.tablereport_physicalCount.processDateColumn),Date)
            End Get
            Set
                Me(Me.tablereport_physicalCount.processDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitNull() As Boolean
            Return Me.IsNull(Me.tablereport_physicalCount.unitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitNull()
            Me(Me.tablereport_physicalCount.unitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tablereport_physicalCount.qtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetqtyNull()
            Me(Me.tablereport_physicalCount.qtyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class purchaseRequestRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As purchaseRequestRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As purchaseRequestRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As purchaseRequestRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ls_itemsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ls_itemsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ls_itemsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ls_itemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class report_physicalCountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As report_physicalCountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As report_physicalCountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As report_physicalCountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ReportsTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class purchaseRequestTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "purchaseRequest"
            tableMapping.ColumnMappings.Add("itemName", "itemName")
            tableMapping.ColumnMappings.Add("itemDescription", "itemDescription")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("IDNumber", "IDNumber")
            tableMapping.ColumnMappings.Add("staffName", "staffName")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("Position", "Position")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            tableMapping.ColumnMappings.Add("dateRequested", "dateRequested")
            tableMapping.ColumnMappings.Add("purpose", "purpose")
            tableMapping.ColumnMappings.Add("consumptionPeriod", "consumptionPeriod")
            tableMapping.ColumnMappings.Add("prNo", "prNo")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.LS.My.MySettings.Default.deped_srmsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pr.prNo, pr.itemName, pr.itemDescription, pr.qty, pr.unit, pr.dateRequeste"& _ 
                "d, pr.purpose, pr.consumptionPeriod,  s.IDNumber, concat(s.FirstName,' ',s.Middl"& _ 
                "eName,' ',s.LastName) as staffName, s.Position, ss.Division, ss.SchoolName, ss.S"& _ 
                "choolAddress, ss.SchoolHead, ss.sHeadPosition, ss.PropertyCustodian from ls_pr p"& _ 
                "r join staff s on pr.IDNumber=s.IDNumber join srms_settings ss on pr.settingsID="& _ 
                "ss.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.purchaseRequestDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.purchaseRequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.purchaseRequestDataTable = New Reports.purchaseRequestDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MR"
            tableMapping.ColumnMappings.Add("itemName", "itemName")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("notes", "notes")
            tableMapping.ColumnMappings.Add("Accountable", "Accountable")
            tableMapping.ColumnMappings.Add("Department", "Department")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            tableMapping.ColumnMappings.Add("acquiredDate", "acquiredDate")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("ctrlNo", "ctrlNo")
            tableMapping.ColumnMappings.Add("serialNo", "serialNo")
            tableMapping.ColumnMappings.Add("model", "model")
            tableMapping.ColumnMappings.Add("itemCondition", "itemCondition")
            tableMapping.ColumnMappings.Add("empPosition", "empPosition")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.LS.My.MySettings.Default.deped_srmsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT i.ctrlNo, i.itemName, i.description, i.itemCondition, i.serialNo, i.model,"& _ 
                " i.notes, i.qty, i.unit, i.acquiredDate, concat(s.FirstName,' ',s.MiddleName,' '"& _ 
                ",s.LastName) as Accountable, s.empPosition, s.Department, st.SchoolName, st.Scho"& _ 
                "olAddress, st.Division, st.PropertyCustodian from ls_items i join staff s on i.I"& _ 
                "DNumber=s.IDNumber join srms_settings st on i.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.MRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.MRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.MRDataTable = New Reports.MRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ls_itemsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ls_items"
            tableMapping.ColumnMappings.Add("ctrlNo", "ctrlNo")
            tableMapping.ColumnMappings.Add("itemName", "itemName")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("itemCondition", "itemCondition")
            tableMapping.ColumnMappings.Add("accountable", "accountable")
            tableMapping.ColumnMappings.Add("acquiredDate", "acquiredDate")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("Position", "Position")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.LS.My.MySettings.Default.deped_srmsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT i.ctrlNo, i.itemName, i.description, i.itemCondition, i.accountable, i.acq"& _ 
                "uiredDate, ss.Division, ss.SchoolName, ss.SchoolAddress, ss.SchoolHead, ss.Posit"& _ 
                "ion, ss.PropertyCustodian FROM ls_items i join srms_settings ss on i.settingsID="& _ 
                "ss.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.ls_itemsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.ls_itemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.ls_itemsDataTable = New Reports.ls_itemsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class report_physicalCountTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "report_physicalCount"
            tableMapping.ColumnMappings.Add("ctrlNo", "ctrlNo")
            tableMapping.ColumnMappings.Add("itemName", "itemName")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("purchasePrice", "purchasePrice")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("qtyShortage", "qtyShortage")
            tableMapping.ColumnMappings.Add("shortageValue", "shortageValue")
            tableMapping.ColumnMappings.Add("notes", "notes")
            tableMapping.ColumnMappings.Add("itemCategory", "itemCategory")
            tableMapping.ColumnMappings.Add("acquiredDate", "acquiredDate")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("member1Prop", "member1Prop")
            tableMapping.ColumnMappings.Add("member2Prop", "member2Prop")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            tableMapping.ColumnMappings.Add("processDate", "processDate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.LS.My.MySettings.Default.deped_srmsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT i.ctrlNo, i.itemName, i.description, i.unit, i.purchasePrice, i.qty, i.qty"& _ 
                "Shortage, i.shortageValue, i.notes, i.itemCategory, i.acquiredDate, i.processDat"& _ 
                "e, s.SchoolHead, s.sHeadPosition, s.SchoolName, s.member1Prop, s.member2Prop, s."& _ 
                "PropertyCustodian  FROM ls_items i join srms_settings s on i.settingsID=s.settin"& _ 
                "gsID join staff ss on ss.IDNumber=i.IDNumber"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.report_physicalCountDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.report_physicalCountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.report_physicalCountDataTable = New Reports.report_physicalCountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Reports, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Reports, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Reports, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Reports) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
