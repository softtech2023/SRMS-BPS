'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9151
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet2"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet2
    Inherits Global.System.Data.DataSet
    
    Private tablecurriculum As curriculumDataTable
    
    Private tableinstallmentfee As installmentfeeDataTable
    
    Private tablecashierAcct As cashierAcctDataTable
    
    Private tableHonorableDismissal As HonorableDismissalDataTable
    
    Private tableget_major As get_majorDataTable
    
    Private tableGradingSheet As GradingSheetDataTable
    
    Private tablerooms As roomsDataTable
    
    Private tableacctTracking As acctTrackingDataTable
    
    Private tableethnicity As ethnicityDataTable
    
    Private tableprovince As provinceDataTable
    
    Private tableCity As CityDataTable
    
    Private tableBrgy As BrgyDataTable
    
    Private tablestude_specialreports As stude_specialreportsDataTable
    
    Private tableReligion As ReligionDataTable
    
    Private tableChart_Sex As Chart_SexDataTable
    
    Private tableEthnicityCount As EthnicityCountDataTable
    
    Private tablegrades_report As grades_reportDataTable
    
    Private tableenrolmentCountSummary As enrolmentCountSummaryDataTable
    
    Private tableRatingReport As RatingReportDataTable
    
    Private tableidCard As idCardDataTable
    
    Private tablels_distribution As ls_distributionDataTable
    
    Private tableOnlineEnrollees As OnlineEnrolleesDataTable
    
    Private relationfk_grades_1 As Global.System.Data.DataRelation
    
    Private relationfk_grades_11 As Global.System.Data.DataRelation
    
    Private relationfk_grades_12 As Global.System.Data.DataRelation
    
    Private relationfk_grades_13 As Global.System.Data.DataRelation
    
    Private relationfk_grades_14 As Global.System.Data.DataRelation
    
    Private _relationFK_grades_1 As Global.System.Data.DataRelation
    
    Private _relationFK_grades_11 As Global.System.Data.DataRelation
    
    Private _relationFK_grades_12 As Global.System.Data.DataRelation
    
    Private _relationFK_grades_13 As Global.System.Data.DataRelation
    
    Private _relationFK_grades_14 As Global.System.Data.DataRelation
    
    Private relationFK_grades_15 As Global.System.Data.DataRelation
    
    Private relationFK_grades_16 As Global.System.Data.DataRelation
    
    Private relationFK_grades_17 As Global.System.Data.DataRelation
    
    Private relationFK_grades_18 As Global.System.Data.DataRelation
    
    Private relationFK_grades_19 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("curriculum")) Is Nothing) Then
                MyBase.Tables.Add(New curriculumDataTable(ds.Tables("curriculum")))
            End If
            If (Not (ds.Tables("installmentfee")) Is Nothing) Then
                MyBase.Tables.Add(New installmentfeeDataTable(ds.Tables("installmentfee")))
            End If
            If (Not (ds.Tables("cashierAcct")) Is Nothing) Then
                MyBase.Tables.Add(New cashierAcctDataTable(ds.Tables("cashierAcct")))
            End If
            If (Not (ds.Tables("HonorableDismissal")) Is Nothing) Then
                MyBase.Tables.Add(New HonorableDismissalDataTable(ds.Tables("HonorableDismissal")))
            End If
            If (Not (ds.Tables("get_major")) Is Nothing) Then
                MyBase.Tables.Add(New get_majorDataTable(ds.Tables("get_major")))
            End If
            If (Not (ds.Tables("GradingSheet")) Is Nothing) Then
                MyBase.Tables.Add(New GradingSheetDataTable(ds.Tables("GradingSheet")))
            End If
            If (Not (ds.Tables("rooms")) Is Nothing) Then
                MyBase.Tables.Add(New roomsDataTable(ds.Tables("rooms")))
            End If
            If (Not (ds.Tables("acctTracking")) Is Nothing) Then
                MyBase.Tables.Add(New acctTrackingDataTable(ds.Tables("acctTracking")))
            End If
            If (Not (ds.Tables("ethnicity")) Is Nothing) Then
                MyBase.Tables.Add(New ethnicityDataTable(ds.Tables("ethnicity")))
            End If
            If (Not (ds.Tables("province")) Is Nothing) Then
                MyBase.Tables.Add(New provinceDataTable(ds.Tables("province")))
            End If
            If (Not (ds.Tables("City")) Is Nothing) Then
                MyBase.Tables.Add(New CityDataTable(ds.Tables("City")))
            End If
            If (Not (ds.Tables("Brgy")) Is Nothing) Then
                MyBase.Tables.Add(New BrgyDataTable(ds.Tables("Brgy")))
            End If
            If (Not (ds.Tables("stude_specialreports")) Is Nothing) Then
                MyBase.Tables.Add(New stude_specialreportsDataTable(ds.Tables("stude_specialreports")))
            End If
            If (Not (ds.Tables("Religion")) Is Nothing) Then
                MyBase.Tables.Add(New ReligionDataTable(ds.Tables("Religion")))
            End If
            If (Not (ds.Tables("Chart_Sex")) Is Nothing) Then
                MyBase.Tables.Add(New Chart_SexDataTable(ds.Tables("Chart_Sex")))
            End If
            If (Not (ds.Tables("EthnicityCount")) Is Nothing) Then
                MyBase.Tables.Add(New EthnicityCountDataTable(ds.Tables("EthnicityCount")))
            End If
            If (Not (ds.Tables("grades_report")) Is Nothing) Then
                MyBase.Tables.Add(New grades_reportDataTable(ds.Tables("grades_report")))
            End If
            If (Not (ds.Tables("enrolmentCountSummary")) Is Nothing) Then
                MyBase.Tables.Add(New enrolmentCountSummaryDataTable(ds.Tables("enrolmentCountSummary")))
            End If
            If (Not (ds.Tables("RatingReport")) Is Nothing) Then
                MyBase.Tables.Add(New RatingReportDataTable(ds.Tables("RatingReport")))
            End If
            If (Not (ds.Tables("idCard")) Is Nothing) Then
                MyBase.Tables.Add(New idCardDataTable(ds.Tables("idCard")))
            End If
            If (Not (ds.Tables("ls_distribution")) Is Nothing) Then
                MyBase.Tables.Add(New ls_distributionDataTable(ds.Tables("ls_distribution")))
            End If
            If (Not (ds.Tables("OnlineEnrollees")) Is Nothing) Then
                MyBase.Tables.Add(New OnlineEnrolleesDataTable(ds.Tables("OnlineEnrollees")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property curriculum() As curriculumDataTable
        Get
            Return Me.tablecurriculum
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property installmentfee() As installmentfeeDataTable
        Get
            Return Me.tableinstallmentfee
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cashierAcct() As cashierAcctDataTable
        Get
            Return Me.tablecashierAcct
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HonorableDismissal() As HonorableDismissalDataTable
        Get
            Return Me.tableHonorableDismissal
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property get_major() As get_majorDataTable
        Get
            Return Me.tableget_major
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GradingSheet() As GradingSheetDataTable
        Get
            Return Me.tableGradingSheet
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rooms() As roomsDataTable
        Get
            Return Me.tablerooms
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property acctTracking() As acctTrackingDataTable
        Get
            Return Me.tableacctTracking
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ethnicity() As ethnicityDataTable
        Get
            Return Me.tableethnicity
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property province() As provinceDataTable
        Get
            Return Me.tableprovince
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property City() As CityDataTable
        Get
            Return Me.tableCity
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Brgy() As BrgyDataTable
        Get
            Return Me.tableBrgy
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property stude_specialreports() As stude_specialreportsDataTable
        Get
            Return Me.tablestude_specialreports
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Religion() As ReligionDataTable
        Get
            Return Me.tableReligion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Chart_Sex() As Chart_SexDataTable
        Get
            Return Me.tableChart_Sex
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EthnicityCount() As EthnicityCountDataTable
        Get
            Return Me.tableEthnicityCount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property grades_report() As grades_reportDataTable
        Get
            Return Me.tablegrades_report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property enrolmentCountSummary() As enrolmentCountSummaryDataTable
        Get
            Return Me.tableenrolmentCountSummary
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RatingReport() As RatingReportDataTable
        Get
            Return Me.tableRatingReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property idCard() As idCardDataTable
        Get
            Return Me.tableidCard
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ls_distribution() As ls_distributionDataTable
        Get
            Return Me.tablels_distribution
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OnlineEnrollees() As OnlineEnrolleesDataTable
        Get
            Return Me.tableOnlineEnrollees
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet2 = CType(MyBase.Clone,DataSet2)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("curriculum")) Is Nothing) Then
                MyBase.Tables.Add(New curriculumDataTable(ds.Tables("curriculum")))
            End If
            If (Not (ds.Tables("installmentfee")) Is Nothing) Then
                MyBase.Tables.Add(New installmentfeeDataTable(ds.Tables("installmentfee")))
            End If
            If (Not (ds.Tables("cashierAcct")) Is Nothing) Then
                MyBase.Tables.Add(New cashierAcctDataTable(ds.Tables("cashierAcct")))
            End If
            If (Not (ds.Tables("HonorableDismissal")) Is Nothing) Then
                MyBase.Tables.Add(New HonorableDismissalDataTable(ds.Tables("HonorableDismissal")))
            End If
            If (Not (ds.Tables("get_major")) Is Nothing) Then
                MyBase.Tables.Add(New get_majorDataTable(ds.Tables("get_major")))
            End If
            If (Not (ds.Tables("GradingSheet")) Is Nothing) Then
                MyBase.Tables.Add(New GradingSheetDataTable(ds.Tables("GradingSheet")))
            End If
            If (Not (ds.Tables("rooms")) Is Nothing) Then
                MyBase.Tables.Add(New roomsDataTable(ds.Tables("rooms")))
            End If
            If (Not (ds.Tables("acctTracking")) Is Nothing) Then
                MyBase.Tables.Add(New acctTrackingDataTable(ds.Tables("acctTracking")))
            End If
            If (Not (ds.Tables("ethnicity")) Is Nothing) Then
                MyBase.Tables.Add(New ethnicityDataTable(ds.Tables("ethnicity")))
            End If
            If (Not (ds.Tables("province")) Is Nothing) Then
                MyBase.Tables.Add(New provinceDataTable(ds.Tables("province")))
            End If
            If (Not (ds.Tables("City")) Is Nothing) Then
                MyBase.Tables.Add(New CityDataTable(ds.Tables("City")))
            End If
            If (Not (ds.Tables("Brgy")) Is Nothing) Then
                MyBase.Tables.Add(New BrgyDataTable(ds.Tables("Brgy")))
            End If
            If (Not (ds.Tables("stude_specialreports")) Is Nothing) Then
                MyBase.Tables.Add(New stude_specialreportsDataTable(ds.Tables("stude_specialreports")))
            End If
            If (Not (ds.Tables("Religion")) Is Nothing) Then
                MyBase.Tables.Add(New ReligionDataTable(ds.Tables("Religion")))
            End If
            If (Not (ds.Tables("Chart_Sex")) Is Nothing) Then
                MyBase.Tables.Add(New Chart_SexDataTable(ds.Tables("Chart_Sex")))
            End If
            If (Not (ds.Tables("EthnicityCount")) Is Nothing) Then
                MyBase.Tables.Add(New EthnicityCountDataTable(ds.Tables("EthnicityCount")))
            End If
            If (Not (ds.Tables("grades_report")) Is Nothing) Then
                MyBase.Tables.Add(New grades_reportDataTable(ds.Tables("grades_report")))
            End If
            If (Not (ds.Tables("enrolmentCountSummary")) Is Nothing) Then
                MyBase.Tables.Add(New enrolmentCountSummaryDataTable(ds.Tables("enrolmentCountSummary")))
            End If
            If (Not (ds.Tables("RatingReport")) Is Nothing) Then
                MyBase.Tables.Add(New RatingReportDataTable(ds.Tables("RatingReport")))
            End If
            If (Not (ds.Tables("idCard")) Is Nothing) Then
                MyBase.Tables.Add(New idCardDataTable(ds.Tables("idCard")))
            End If
            If (Not (ds.Tables("ls_distribution")) Is Nothing) Then
                MyBase.Tables.Add(New ls_distributionDataTable(ds.Tables("ls_distribution")))
            End If
            If (Not (ds.Tables("OnlineEnrollees")) Is Nothing) Then
                MyBase.Tables.Add(New OnlineEnrolleesDataTable(ds.Tables("OnlineEnrollees")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablecurriculum = CType(MyBase.Tables("curriculum"),curriculumDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecurriculum) Is Nothing) Then
                Me.tablecurriculum.InitVars
            End If
        End If
        Me.tableinstallmentfee = CType(MyBase.Tables("installmentfee"),installmentfeeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinstallmentfee) Is Nothing) Then
                Me.tableinstallmentfee.InitVars
            End If
        End If
        Me.tablecashierAcct = CType(MyBase.Tables("cashierAcct"),cashierAcctDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecashierAcct) Is Nothing) Then
                Me.tablecashierAcct.InitVars
            End If
        End If
        Me.tableHonorableDismissal = CType(MyBase.Tables("HonorableDismissal"),HonorableDismissalDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHonorableDismissal) Is Nothing) Then
                Me.tableHonorableDismissal.InitVars
            End If
        End If
        Me.tableget_major = CType(MyBase.Tables("get_major"),get_majorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableget_major) Is Nothing) Then
                Me.tableget_major.InitVars
            End If
        End If
        Me.tableGradingSheet = CType(MyBase.Tables("GradingSheet"),GradingSheetDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGradingSheet) Is Nothing) Then
                Me.tableGradingSheet.InitVars
            End If
        End If
        Me.tablerooms = CType(MyBase.Tables("rooms"),roomsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerooms) Is Nothing) Then
                Me.tablerooms.InitVars
            End If
        End If
        Me.tableacctTracking = CType(MyBase.Tables("acctTracking"),acctTrackingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableacctTracking) Is Nothing) Then
                Me.tableacctTracking.InitVars
            End If
        End If
        Me.tableethnicity = CType(MyBase.Tables("ethnicity"),ethnicityDataTable)
        If (initTable = true) Then
            If (Not (Me.tableethnicity) Is Nothing) Then
                Me.tableethnicity.InitVars
            End If
        End If
        Me.tableprovince = CType(MyBase.Tables("province"),provinceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableprovince) Is Nothing) Then
                Me.tableprovince.InitVars
            End If
        End If
        Me.tableCity = CType(MyBase.Tables("City"),CityDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCity) Is Nothing) Then
                Me.tableCity.InitVars
            End If
        End If
        Me.tableBrgy = CType(MyBase.Tables("Brgy"),BrgyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBrgy) Is Nothing) Then
                Me.tableBrgy.InitVars
            End If
        End If
        Me.tablestude_specialreports = CType(MyBase.Tables("stude_specialreports"),stude_specialreportsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestude_specialreports) Is Nothing) Then
                Me.tablestude_specialreports.InitVars
            End If
        End If
        Me.tableReligion = CType(MyBase.Tables("Religion"),ReligionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReligion) Is Nothing) Then
                Me.tableReligion.InitVars
            End If
        End If
        Me.tableChart_Sex = CType(MyBase.Tables("Chart_Sex"),Chart_SexDataTable)
        If (initTable = true) Then
            If (Not (Me.tableChart_Sex) Is Nothing) Then
                Me.tableChart_Sex.InitVars
            End If
        End If
        Me.tableEthnicityCount = CType(MyBase.Tables("EthnicityCount"),EthnicityCountDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEthnicityCount) Is Nothing) Then
                Me.tableEthnicityCount.InitVars
            End If
        End If
        Me.tablegrades_report = CType(MyBase.Tables("grades_report"),grades_reportDataTable)
        If (initTable = true) Then
            If (Not (Me.tablegrades_report) Is Nothing) Then
                Me.tablegrades_report.InitVars
            End If
        End If
        Me.tableenrolmentCountSummary = CType(MyBase.Tables("enrolmentCountSummary"),enrolmentCountSummaryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableenrolmentCountSummary) Is Nothing) Then
                Me.tableenrolmentCountSummary.InitVars
            End If
        End If
        Me.tableRatingReport = CType(MyBase.Tables("RatingReport"),RatingReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRatingReport) Is Nothing) Then
                Me.tableRatingReport.InitVars
            End If
        End If
        Me.tableidCard = CType(MyBase.Tables("idCard"),idCardDataTable)
        If (initTable = true) Then
            If (Not (Me.tableidCard) Is Nothing) Then
                Me.tableidCard.InitVars
            End If
        End If
        Me.tablels_distribution = CType(MyBase.Tables("ls_distribution"),ls_distributionDataTable)
        If (initTable = true) Then
            If (Not (Me.tablels_distribution) Is Nothing) Then
                Me.tablels_distribution.InitVars
            End If
        End If
        Me.tableOnlineEnrollees = CType(MyBase.Tables("OnlineEnrollees"),OnlineEnrolleesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOnlineEnrollees) Is Nothing) Then
                Me.tableOnlineEnrollees.InitVars
            End If
        End If
        Me.relationfk_grades_1 = Me.Relations("fk_grades_1")
        Me.relationfk_grades_11 = Me.Relations("fk_grades_11")
        Me.relationfk_grades_12 = Me.Relations("fk_grades_12")
        Me.relationfk_grades_13 = Me.Relations("fk_grades_13")
        Me.relationfk_grades_14 = Me.Relations("fk_grades_14")
        Me._relationFK_grades_1 = Me.Relations("FK_grades_1")
        Me._relationFK_grades_11 = Me.Relations("FK_grades_11")
        Me._relationFK_grades_12 = Me.Relations("FK_grades_12")
        Me._relationFK_grades_13 = Me.Relations("FK_grades_13")
        Me._relationFK_grades_14 = Me.Relations("FK_grades_14")
        Me.relationFK_grades_15 = Me.Relations("FK_grades_15")
        Me.relationFK_grades_16 = Me.Relations("FK_grades_16")
        Me.relationFK_grades_17 = Me.Relations("FK_grades_17")
        Me.relationFK_grades_18 = Me.Relations("FK_grades_18")
        Me.relationFK_grades_19 = Me.Relations("FK_grades_19")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablecurriculum = New curriculumDataTable
        MyBase.Tables.Add(Me.tablecurriculum)
        Me.tableinstallmentfee = New installmentfeeDataTable
        MyBase.Tables.Add(Me.tableinstallmentfee)
        Me.tablecashierAcct = New cashierAcctDataTable
        MyBase.Tables.Add(Me.tablecashierAcct)
        Me.tableHonorableDismissal = New HonorableDismissalDataTable
        MyBase.Tables.Add(Me.tableHonorableDismissal)
        Me.tableget_major = New get_majorDataTable
        MyBase.Tables.Add(Me.tableget_major)
        Me.tableGradingSheet = New GradingSheetDataTable
        MyBase.Tables.Add(Me.tableGradingSheet)
        Me.tablerooms = New roomsDataTable
        MyBase.Tables.Add(Me.tablerooms)
        Me.tableacctTracking = New acctTrackingDataTable
        MyBase.Tables.Add(Me.tableacctTracking)
        Me.tableethnicity = New ethnicityDataTable
        MyBase.Tables.Add(Me.tableethnicity)
        Me.tableprovince = New provinceDataTable
        MyBase.Tables.Add(Me.tableprovince)
        Me.tableCity = New CityDataTable
        MyBase.Tables.Add(Me.tableCity)
        Me.tableBrgy = New BrgyDataTable
        MyBase.Tables.Add(Me.tableBrgy)
        Me.tablestude_specialreports = New stude_specialreportsDataTable
        MyBase.Tables.Add(Me.tablestude_specialreports)
        Me.tableReligion = New ReligionDataTable
        MyBase.Tables.Add(Me.tableReligion)
        Me.tableChart_Sex = New Chart_SexDataTable
        MyBase.Tables.Add(Me.tableChart_Sex)
        Me.tableEthnicityCount = New EthnicityCountDataTable
        MyBase.Tables.Add(Me.tableEthnicityCount)
        Me.tablegrades_report = New grades_reportDataTable
        MyBase.Tables.Add(Me.tablegrades_report)
        Me.tableenrolmentCountSummary = New enrolmentCountSummaryDataTable
        MyBase.Tables.Add(Me.tableenrolmentCountSummary)
        Me.tableRatingReport = New RatingReportDataTable
        MyBase.Tables.Add(Me.tableRatingReport)
        Me.tableidCard = New idCardDataTable
        MyBase.Tables.Add(Me.tableidCard)
        Me.tablels_distribution = New ls_distributionDataTable
        MyBase.Tables.Add(Me.tablels_distribution)
        Me.tableOnlineEnrollees = New OnlineEnrolleesDataTable
        MyBase.Tables.Add(Me.tableOnlineEnrollees)
        Me.relationfk_grades_1 = New Global.System.Data.DataRelation("fk_grades_1", New Global.System.Data.DataColumn() {Me.tableethnicity.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablegrades_report.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationfk_grades_1)
        Me.relationfk_grades_11 = New Global.System.Data.DataRelation("fk_grades_11", New Global.System.Data.DataColumn() {Me.tableprovince.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablegrades_report.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationfk_grades_11)
        Me.relationfk_grades_12 = New Global.System.Data.DataRelation("fk_grades_12", New Global.System.Data.DataColumn() {Me.tableCity.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablegrades_report.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationfk_grades_12)
        Me.relationfk_grades_13 = New Global.System.Data.DataRelation("fk_grades_13", New Global.System.Data.DataColumn() {Me.tableBrgy.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablegrades_report.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationfk_grades_13)
        Me.relationfk_grades_14 = New Global.System.Data.DataRelation("fk_grades_14", New Global.System.Data.DataColumn() {Me.tableReligion.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablegrades_report.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationfk_grades_14)
        Me._relationFK_grades_1 = New Global.System.Data.DataRelation("FK_grades_1", New Global.System.Data.DataColumn() {Me.tableethnicity.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableGradingSheet.StudentNumberColumn}, false)
        Me.Relations.Add(Me._relationFK_grades_1)
        Me._relationFK_grades_11 = New Global.System.Data.DataRelation("FK_grades_11", New Global.System.Data.DataColumn() {Me.tableprovince.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableGradingSheet.StudentNumberColumn}, false)
        Me.Relations.Add(Me._relationFK_grades_11)
        Me._relationFK_grades_12 = New Global.System.Data.DataRelation("FK_grades_12", New Global.System.Data.DataColumn() {Me.tableCity.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableGradingSheet.StudentNumberColumn}, false)
        Me.Relations.Add(Me._relationFK_grades_12)
        Me._relationFK_grades_13 = New Global.System.Data.DataRelation("FK_grades_13", New Global.System.Data.DataColumn() {Me.tableBrgy.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableGradingSheet.StudentNumberColumn}, false)
        Me.Relations.Add(Me._relationFK_grades_13)
        Me._relationFK_grades_14 = New Global.System.Data.DataRelation("FK_grades_14", New Global.System.Data.DataColumn() {Me.tableReligion.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableGradingSheet.StudentNumberColumn}, false)
        Me.Relations.Add(Me._relationFK_grades_14)
        Me.relationFK_grades_15 = New Global.System.Data.DataRelation("FK_grades_15", New Global.System.Data.DataColumn() {Me.tableethnicity.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableRatingReport.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationFK_grades_15)
        Me.relationFK_grades_16 = New Global.System.Data.DataRelation("FK_grades_16", New Global.System.Data.DataColumn() {Me.tableprovince.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableRatingReport.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationFK_grades_16)
        Me.relationFK_grades_17 = New Global.System.Data.DataRelation("FK_grades_17", New Global.System.Data.DataColumn() {Me.tableCity.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableRatingReport.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationFK_grades_17)
        Me.relationFK_grades_18 = New Global.System.Data.DataRelation("FK_grades_18", New Global.System.Data.DataColumn() {Me.tableBrgy.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableRatingReport.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationFK_grades_18)
        Me.relationFK_grades_19 = New Global.System.Data.DataRelation("FK_grades_19", New Global.System.Data.DataColumn() {Me.tableReligion.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableRatingReport.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationFK_grades_19)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecurriculum() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeinstallmentfee() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecashierAcct() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHonorableDismissal() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeget_major() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGradingSheet() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerooms() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeacctTracking() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeethnicity() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeprovince() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCity() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBrgy() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializestude_specialreports() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReligion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeChart_Sex() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEthnicityCount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializegrades_report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeenrolmentCountSummary() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRatingReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeidCard() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializels_distribution() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOnlineEnrollees() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet2 = New DataSet2
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub curriculumRowChangeEventHandler(ByVal sender As Object, ByVal e As curriculumRowChangeEvent)
    
    Public Delegate Sub installmentfeeRowChangeEventHandler(ByVal sender As Object, ByVal e As installmentfeeRowChangeEvent)
    
    Public Delegate Sub cashierAcctRowChangeEventHandler(ByVal sender As Object, ByVal e As cashierAcctRowChangeEvent)
    
    Public Delegate Sub HonorableDismissalRowChangeEventHandler(ByVal sender As Object, ByVal e As HonorableDismissalRowChangeEvent)
    
    Public Delegate Sub get_majorRowChangeEventHandler(ByVal sender As Object, ByVal e As get_majorRowChangeEvent)
    
    Public Delegate Sub GradingSheetRowChangeEventHandler(ByVal sender As Object, ByVal e As GradingSheetRowChangeEvent)
    
    Public Delegate Sub roomsRowChangeEventHandler(ByVal sender As Object, ByVal e As roomsRowChangeEvent)
    
    Public Delegate Sub acctTrackingRowChangeEventHandler(ByVal sender As Object, ByVal e As acctTrackingRowChangeEvent)
    
    Public Delegate Sub ethnicityRowChangeEventHandler(ByVal sender As Object, ByVal e As ethnicityRowChangeEvent)
    
    Public Delegate Sub provinceRowChangeEventHandler(ByVal sender As Object, ByVal e As provinceRowChangeEvent)
    
    Public Delegate Sub CityRowChangeEventHandler(ByVal sender As Object, ByVal e As CityRowChangeEvent)
    
    Public Delegate Sub BrgyRowChangeEventHandler(ByVal sender As Object, ByVal e As BrgyRowChangeEvent)
    
    Public Delegate Sub stude_specialreportsRowChangeEventHandler(ByVal sender As Object, ByVal e As stude_specialreportsRowChangeEvent)
    
    Public Delegate Sub ReligionRowChangeEventHandler(ByVal sender As Object, ByVal e As ReligionRowChangeEvent)
    
    Public Delegate Sub Chart_SexRowChangeEventHandler(ByVal sender As Object, ByVal e As Chart_SexRowChangeEvent)
    
    Public Delegate Sub EthnicityCountRowChangeEventHandler(ByVal sender As Object, ByVal e As EthnicityCountRowChangeEvent)
    
    Public Delegate Sub grades_reportRowChangeEventHandler(ByVal sender As Object, ByVal e As grades_reportRowChangeEvent)
    
    Public Delegate Sub enrolmentCountSummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As enrolmentCountSummaryRowChangeEvent)
    
    Public Delegate Sub RatingReportRowChangeEventHandler(ByVal sender As Object, ByVal e As RatingReportRowChangeEvent)
    
    Public Delegate Sub idCardRowChangeEventHandler(ByVal sender As Object, ByVal e As idCardRowChangeEvent)
    
    Public Delegate Sub ls_distributionRowChangeEventHandler(ByVal sender As Object, ByVal e As ls_distributionRowChangeEvent)
    
    Public Delegate Sub OnlineEnrolleesRowChangeEventHandler(ByVal sender As Object, ByVal e As OnlineEnrolleesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class curriculumDataTable
        Inherits Global.System.Data.TypedTableBase(Of curriculumRow)
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnlecunit As Global.System.Data.DataColumn
        
        Private columnlabunit As Global.System.Data.DataColumn
        
        Private columnprereq As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnSemEffective As Global.System.Data.DataColumn
        
        Private columnSYEffective As Global.System.Data.DataColumn
        
        Private columnEffectivity As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnsubjectid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "curriculum"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lecunitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlecunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property labunitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlabunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemEffectiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemEffective
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYEffectiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYEffective
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EffectivityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEffectivity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As curriculumRow
            Get
                Return CType(Me.Rows(index),curriculumRow)
            End Get
        End Property
        
        Public Event curriculumRowChanging As curriculumRowChangeEventHandler
        
        Public Event curriculumRowChanged As curriculumRowChangeEventHandler
        
        Public Event curriculumRowDeleting As curriculumRowChangeEventHandler
        
        Public Event curriculumRowDeleted As curriculumRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcurriculumRow(ByVal row As curriculumRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcurriculumRow(ByVal SubjectCode As String, ByVal description As String, ByVal lecunit As String, ByVal labunit As String, ByVal prereq As String, ByVal YearLevel As String, ByVal Course As String, ByVal SemEffective As String, ByVal SYEffective As String, ByVal Effectivity As String, ByVal Semester As String, ByVal subjectid As UInteger) As curriculumRow
            Dim rowcurriculumRow As curriculumRow = CType(Me.NewRow,curriculumRow)
            Dim columnValuesArray() As Object = New Object() {SubjectCode, description, lecunit, labunit, prereq, YearLevel, Course, SemEffective, SYEffective, Effectivity, Semester, subjectid}
            rowcurriculumRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcurriculumRow)
            Return rowcurriculumRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysubjectid(ByVal subjectid As UInteger) As curriculumRow
            Return CType(Me.Rows.Find(New Object() {subjectid}),curriculumRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As curriculumDataTable = CType(MyBase.Clone,curriculumDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New curriculumDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columndescription = MyBase.Columns("description")
            Me.columnlecunit = MyBase.Columns("lecunit")
            Me.columnlabunit = MyBase.Columns("labunit")
            Me.columnprereq = MyBase.Columns("prereq")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnSemEffective = MyBase.Columns("SemEffective")
            Me.columnSYEffective = MyBase.Columns("SYEffective")
            Me.columnEffectivity = MyBase.Columns("Effectivity")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnsubjectid = MyBase.Columns("subjectid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnlecunit = New Global.System.Data.DataColumn("lecunit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlecunit)
            Me.columnlabunit = New Global.System.Data.DataColumn("labunit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlabunit)
            Me.columnprereq = New Global.System.Data.DataColumn("prereq", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnSemEffective = New Global.System.Data.DataColumn("SemEffective", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemEffective)
            Me.columnSYEffective = New Global.System.Data.DataColumn("SYEffective", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYEffective)
            Me.columnEffectivity = New Global.System.Data.DataColumn("Effectivity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEffectivity)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnsubjectid = New Global.System.Data.DataColumn("subjectid", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsubjectid}, true))
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 45
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 100
            Me.columnlecunit.AllowDBNull = false
            Me.columnlecunit.MaxLength = 45
            Me.columnlabunit.AllowDBNull = false
            Me.columnlabunit.MaxLength = 45
            Me.columnprereq.AllowDBNull = false
            Me.columnprereq.MaxLength = 45
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 97
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 150
            Me.columnSemEffective.AllowDBNull = false
            Me.columnSemEffective.MaxLength = 45
            Me.columnSYEffective.AllowDBNull = false
            Me.columnSYEffective.MaxLength = 45
            Me.columnEffectivity.AllowDBNull = false
            Me.columnEffectivity.MaxLength = 45
            Me.columnSemester.AllowDBNull = false
            Me.columnSemester.MaxLength = 45
            Me.columnsubjectid.AllowDBNull = false
            Me.columnsubjectid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcurriculumRow() As curriculumRow
            Return CType(Me.NewRow,curriculumRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New curriculumRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(curriculumRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.curriculumRowChangedEvent) Is Nothing) Then
                RaiseEvent curriculumRowChanged(Me, New curriculumRowChangeEvent(CType(e.Row,curriculumRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.curriculumRowChangingEvent) Is Nothing) Then
                RaiseEvent curriculumRowChanging(Me, New curriculumRowChangeEvent(CType(e.Row,curriculumRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.curriculumRowDeletedEvent) Is Nothing) Then
                RaiseEvent curriculumRowDeleted(Me, New curriculumRowChangeEvent(CType(e.Row,curriculumRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.curriculumRowDeletingEvent) Is Nothing) Then
                RaiseEvent curriculumRowDeleting(Me, New curriculumRowChangeEvent(CType(e.Row,curriculumRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecurriculumRow(ByVal row As curriculumRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "curriculumDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class installmentfeeDataTable
        Inherits Global.System.Data.TypedTableBase(Of installmentfeeRow)
        
        Private columninstallmentID As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnPlan As Global.System.Data.DataColumn
        
        Private columnInstallmentFee As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "installmentfee"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property installmentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninstallmentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstallmentFeeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstallmentFee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As installmentfeeRow
            Get
                Return CType(Me.Rows(index),installmentfeeRow)
            End Get
        End Property
        
        Public Event installmentfeeRowChanging As installmentfeeRowChangeEventHandler
        
        Public Event installmentfeeRowChanged As installmentfeeRowChangeEventHandler
        
        Public Event installmentfeeRowDeleting As installmentfeeRowChangeEventHandler
        
        Public Event installmentfeeRowDeleted As installmentfeeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddinstallmentfeeRow(ByVal row As installmentfeeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddinstallmentfeeRow(ByVal installmentID As UInteger, ByVal Course As String, ByVal YearLevel As String, ByVal Plan As String, ByVal InstallmentFee As Double) As installmentfeeRow
            Dim rowinstallmentfeeRow As installmentfeeRow = CType(Me.NewRow,installmentfeeRow)
            Dim columnValuesArray() As Object = New Object() {installmentID, Course, YearLevel, Plan, InstallmentFee}
            rowinstallmentfeeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinstallmentfeeRow)
            Return rowinstallmentfeeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByinstallmentID(ByVal installmentID As UInteger) As installmentfeeRow
            Return CType(Me.Rows.Find(New Object() {installmentID}),installmentfeeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As installmentfeeDataTable = CType(MyBase.Clone,installmentfeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New installmentfeeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columninstallmentID = MyBase.Columns("installmentID")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnPlan = MyBase.Columns("Plan")
            Me.columnInstallmentFee = MyBase.Columns("InstallmentFee")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columninstallmentID = New Global.System.Data.DataColumn("installmentID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninstallmentID)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnPlan = New Global.System.Data.DataColumn("Plan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan)
            Me.columnInstallmentFee = New Global.System.Data.DataColumn("InstallmentFee", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstallmentFee)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columninstallmentID}, true))
            Me.columninstallmentID.AllowDBNull = false
            Me.columninstallmentID.Unique = true
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 100
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnPlan.AllowDBNull = false
            Me.columnPlan.MaxLength = 45
            Me.columnInstallmentFee.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewinstallmentfeeRow() As installmentfeeRow
            Return CType(Me.NewRow,installmentfeeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New installmentfeeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(installmentfeeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.installmentfeeRowChangedEvent) Is Nothing) Then
                RaiseEvent installmentfeeRowChanged(Me, New installmentfeeRowChangeEvent(CType(e.Row,installmentfeeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.installmentfeeRowChangingEvent) Is Nothing) Then
                RaiseEvent installmentfeeRowChanging(Me, New installmentfeeRowChangeEvent(CType(e.Row,installmentfeeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.installmentfeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent installmentfeeRowDeleted(Me, New installmentfeeRowChangeEvent(CType(e.Row,installmentfeeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.installmentfeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent installmentfeeRowDeleting(Me, New installmentfeeRowChangeEvent(CType(e.Row,installmentfeeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveinstallmentfeeRow(ByVal row As installmentfeeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "installmentfeeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class cashierAcctDataTable
        Inherits Global.System.Data.TypedTableBase(Of cashierAcctRow)
        
        Private columnusername As Global.System.Data.DataColumn
        
        Private columnpassword As Global.System.Data.DataColumn
        
        Private columnposition As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "cashierAcct"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property passwordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property positionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnposition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As cashierAcctRow
            Get
                Return CType(Me.Rows(index),cashierAcctRow)
            End Get
        End Property
        
        Public Event cashierAcctRowChanging As cashierAcctRowChangeEventHandler
        
        Public Event cashierAcctRowChanged As cashierAcctRowChangeEventHandler
        
        Public Event cashierAcctRowDeleting As cashierAcctRowChangeEventHandler
        
        Public Event cashierAcctRowDeleted As cashierAcctRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcashierAcctRow(ByVal row As cashierAcctRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcashierAcctRow(ByVal username As String, ByVal password As String, ByVal position As String, ByVal email As String) As cashierAcctRow
            Dim rowcashierAcctRow As cashierAcctRow = CType(Me.NewRow,cashierAcctRow)
            Dim columnValuesArray() As Object = New Object() {username, password, position, email}
            rowcashierAcctRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcashierAcctRow)
            Return rowcashierAcctRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByusername(ByVal username As String) As cashierAcctRow
            Return CType(Me.Rows.Find(New Object() {username}),cashierAcctRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As cashierAcctDataTable = CType(MyBase.Clone,cashierAcctDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New cashierAcctDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnusername = MyBase.Columns("username")
            Me.columnpassword = MyBase.Columns("password")
            Me.columnposition = MyBase.Columns("position")
            Me.columnemail = MyBase.Columns("email")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnusername = New Global.System.Data.DataColumn("username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusername)
            Me.columnpassword = New Global.System.Data.DataColumn("password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpassword)
            Me.columnposition = New Global.System.Data.DataColumn("position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnposition)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnusername}, true))
            Me.columnusername.AllowDBNull = false
            Me.columnusername.Unique = true
            Me.columnusername.MaxLength = 45
            Me.columnpassword.AllowDBNull = false
            Me.columnpassword.MaxLength = 65
            Me.columnposition.AllowDBNull = false
            Me.columnposition.MaxLength = 45
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcashierAcctRow() As cashierAcctRow
            Return CType(Me.NewRow,cashierAcctRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New cashierAcctRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(cashierAcctRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cashierAcctRowChangedEvent) Is Nothing) Then
                RaiseEvent cashierAcctRowChanged(Me, New cashierAcctRowChangeEvent(CType(e.Row,cashierAcctRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cashierAcctRowChangingEvent) Is Nothing) Then
                RaiseEvent cashierAcctRowChanging(Me, New cashierAcctRowChangeEvent(CType(e.Row,cashierAcctRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cashierAcctRowDeletedEvent) Is Nothing) Then
                RaiseEvent cashierAcctRowDeleted(Me, New cashierAcctRowChangeEvent(CType(e.Row,cashierAcctRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cashierAcctRowDeletingEvent) Is Nothing) Then
                RaiseEvent cashierAcctRowDeleting(Me, New cashierAcctRowChangeEvent(CType(e.Row,cashierAcctRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecashierAcctRow(ByVal row As cashierAcctRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "cashierAcctDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HonorableDismissalDataTable
        Inherits Global.System.Data.TypedTableBase(Of HonorableDismissalRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnPronoun As Global.System.Data.DataColumn
        
        Private columnPronoun2 As Global.System.Data.DataColumn
        
        Private columnPronoun3 As Global.System.Data.DataColumn
        
        Private columnStudeName As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HonorableDismissal"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PronounColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pronoun2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pronoun3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HonorableDismissalRow
            Get
                Return CType(Me.Rows(index),HonorableDismissalRow)
            End Get
        End Property
        
        Public Event HonorableDismissalRowChanging As HonorableDismissalRowChangeEventHandler
        
        Public Event HonorableDismissalRowChanged As HonorableDismissalRowChangeEventHandler
        
        Public Event HonorableDismissalRowDeleting As HonorableDismissalRowChangeEventHandler
        
        Public Event HonorableDismissalRowDeleted As HonorableDismissalRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHonorableDismissalRow(ByVal row As HonorableDismissalRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHonorableDismissalRow(ByVal StudentNumber As String, ByVal Title As String, ByVal Pronoun As String, ByVal Pronoun2 As String, ByVal Pronoun3 As String, ByVal StudeName As String, ByVal Course As String, ByVal Semester As String, ByVal SY As String) As HonorableDismissalRow
            Dim rowHonorableDismissalRow As HonorableDismissalRow = CType(Me.NewRow,HonorableDismissalRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, Title, Pronoun, Pronoun2, Pronoun3, StudeName, Course, Semester, SY}
            rowHonorableDismissalRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHonorableDismissalRow)
            Return rowHonorableDismissalRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As HonorableDismissalRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),HonorableDismissalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As HonorableDismissalDataTable = CType(MyBase.Clone,HonorableDismissalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New HonorableDismissalDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnPronoun = MyBase.Columns("Pronoun")
            Me.columnPronoun2 = MyBase.Columns("Pronoun2")
            Me.columnPronoun3 = MyBase.Columns("Pronoun3")
            Me.columnStudeName = MyBase.Columns("StudeName")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnPronoun = New Global.System.Data.DataColumn("Pronoun", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun)
            Me.columnPronoun2 = New Global.System.Data.DataColumn("Pronoun2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun2)
            Me.columnPronoun3 = New Global.System.Data.DataColumn("Pronoun3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun3)
            Me.columnStudeName = New Global.System.Data.DataColumn("StudeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudeName)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnTitle.AllowDBNull = false
            Me.columnTitle.MaxLength = 45
            Me.columnPronoun.AllowDBNull = false
            Me.columnPronoun.MaxLength = 45
            Me.columnPronoun2.AllowDBNull = false
            Me.columnPronoun2.MaxLength = 45
            Me.columnPronoun3.AllowDBNull = false
            Me.columnPronoun3.MaxLength = 45
            Me.columnStudeName.MaxLength = 182
            Me.columnCourse.MaxLength = 250
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHonorableDismissalRow() As HonorableDismissalRow
            Return CType(Me.NewRow,HonorableDismissalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New HonorableDismissalRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(HonorableDismissalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HonorableDismissalRowChangedEvent) Is Nothing) Then
                RaiseEvent HonorableDismissalRowChanged(Me, New HonorableDismissalRowChangeEvent(CType(e.Row,HonorableDismissalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HonorableDismissalRowChangingEvent) Is Nothing) Then
                RaiseEvent HonorableDismissalRowChanging(Me, New HonorableDismissalRowChangeEvent(CType(e.Row,HonorableDismissalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HonorableDismissalRowDeletedEvent) Is Nothing) Then
                RaiseEvent HonorableDismissalRowDeleted(Me, New HonorableDismissalRowChangeEvent(CType(e.Row,HonorableDismissalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HonorableDismissalRowDeletingEvent) Is Nothing) Then
                RaiseEvent HonorableDismissalRowDeleting(Me, New HonorableDismissalRowChangeEvent(CType(e.Row,HonorableDismissalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHonorableDismissalRow(ByVal row As HonorableDismissalRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HonorableDismissalDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class get_majorDataTable
        Inherits Global.System.Data.TypedTableBase(Of get_majorRow)
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columncourseid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "get_major"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property courseidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncourseid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As get_majorRow
            Get
                Return CType(Me.Rows(index),get_majorRow)
            End Get
        End Property
        
        Public Event get_majorRowChanging As get_majorRowChangeEventHandler
        
        Public Event get_majorRowChanged As get_majorRowChangeEventHandler
        
        Public Event get_majorRowDeleting As get_majorRowChangeEventHandler
        
        Public Event get_majorRowDeleted As get_majorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addget_majorRow(ByVal row As get_majorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addget_majorRow(ByVal Major As String, ByVal courseid As UInteger) As get_majorRow
            Dim rowget_majorRow As get_majorRow = CType(Me.NewRow,get_majorRow)
            Dim columnValuesArray() As Object = New Object() {Major, courseid}
            rowget_majorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowget_majorRow)
            Return rowget_majorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycourseid(ByVal courseid As UInteger) As get_majorRow
            Return CType(Me.Rows.Find(New Object() {courseid}),get_majorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As get_majorDataTable = CType(MyBase.Clone,get_majorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New get_majorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMajor = MyBase.Columns("Major")
            Me.columncourseid = MyBase.Columns("courseid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columncourseid = New Global.System.Data.DataColumn("courseid", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncourseid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncourseid}, true))
            Me.columnMajor.AllowDBNull = false
            Me.columnMajor.MaxLength = 65
            Me.columncourseid.AllowDBNull = false
            Me.columncourseid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newget_majorRow() As get_majorRow
            Return CType(Me.NewRow,get_majorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New get_majorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(get_majorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.get_majorRowChangedEvent) Is Nothing) Then
                RaiseEvent get_majorRowChanged(Me, New get_majorRowChangeEvent(CType(e.Row,get_majorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.get_majorRowChangingEvent) Is Nothing) Then
                RaiseEvent get_majorRowChanging(Me, New get_majorRowChangeEvent(CType(e.Row,get_majorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.get_majorRowDeletedEvent) Is Nothing) Then
                RaiseEvent get_majorRowDeleted(Me, New get_majorRowChangeEvent(CType(e.Row,get_majorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.get_majorRowDeletingEvent) Is Nothing) Then
                RaiseEvent get_majorRowDeleting(Me, New get_majorRowChangeEvent(CType(e.Row,get_majorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeget_majorRow(ByVal row As get_majorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "get_majorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GradingSheetDataTable
        Inherits Global.System.Data.TypedTableBase(Of GradingSheetRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        Private columnPGrade As Global.System.Data.DataColumn
        
        Private columnMGrade As Global.System.Data.DataColumn
        
        Private columnPFinalGrade As Global.System.Data.DataColumn
        
        Private columnFGrade As Global.System.Data.DataColumn
        
        Private columnAverage As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnPGrade1 As Global.System.Data.DataColumn
        
        Private columnMGrade1 As Global.System.Data.DataColumn
        
        Private columnPFinalGrade1 As Global.System.Data.DataColumn
        
        Private columnFGrade1 As Global.System.Data.DataColumn
        
        Private columnAverage1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GradingSheet"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFinalGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPFinalGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGrade1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGrade1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MGrade1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMGrade1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFinalGrade1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPFinalGrade1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGrade1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGrade1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Average1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverage1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GradingSheetRow
            Get
                Return CType(Me.Rows(index),GradingSheetRow)
            End Get
        End Property
        
        Public Event GradingSheetRowChanging As GradingSheetRowChangeEventHandler
        
        Public Event GradingSheetRowChanged As GradingSheetRowChangeEventHandler
        
        Public Event GradingSheetRowDeleting As GradingSheetRowChangeEventHandler
        
        Public Event GradingSheetRowDeleted As GradingSheetRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGradingSheetRow(ByVal row As GradingSheetRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGradingSheetRow( _
                    ByVal parentethnicityRowByFK_grades_1 As ethnicityRow,  _
                    ByVal StudentName As String,  _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal SY As String,  _
                    ByVal Instructor As String,  _
                    ByVal PGrade As String,  _
                    ByVal MGrade As String,  _
                    ByVal PFinalGrade As String,  _
                    ByVal FGrade As String,  _
                    ByVal Average As String,  _
                    ByVal Sem As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal Sex As String,  _
                    ByVal PGrade1 As Double,  _
                    ByVal MGrade1 As Double,  _
                    ByVal PFinalGrade1 As Double,  _
                    ByVal FGrade1 As Double,  _
                    ByVal Average1 As Double) As GradingSheetRow
            Dim rowGradingSheetRow As GradingSheetRow = CType(Me.NewRow,GradingSheetRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentName, SubjectCode, Description, SY, Instructor, PGrade, MGrade, PFinalGrade, FGrade, Average, Sem, SchoolName, SchoolAddress, Sex, PGrade1, MGrade1, PFinalGrade1, FGrade1, Average1}
            If (Not (parentethnicityRowByFK_grades_1) Is Nothing) Then
                columnValuesArray(0) = parentethnicityRowByFK_grades_1(1)
            End If
            rowGradingSheetRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGradingSheetRow)
            Return rowGradingSheetRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As GradingSheetRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),GradingSheetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GradingSheetDataTable = CType(MyBase.Clone,GradingSheetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GradingSheetDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnInstructor = MyBase.Columns("Instructor")
            Me.columnPGrade = MyBase.Columns("PGrade")
            Me.columnMGrade = MyBase.Columns("MGrade")
            Me.columnPFinalGrade = MyBase.Columns("PFinalGrade")
            Me.columnFGrade = MyBase.Columns("FGrade")
            Me.columnAverage = MyBase.Columns("Average")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnPGrade1 = MyBase.Columns("PGrade1")
            Me.columnMGrade1 = MyBase.Columns("MGrade1")
            Me.columnPFinalGrade1 = MyBase.Columns("PFinalGrade1")
            Me.columnFGrade1 = MyBase.Columns("FGrade1")
            Me.columnAverage1 = MyBase.Columns("Average1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnPGrade = New Global.System.Data.DataColumn("PGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGrade)
            Me.columnMGrade = New Global.System.Data.DataColumn("MGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMGrade)
            Me.columnPFinalGrade = New Global.System.Data.DataColumn("PFinalGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPFinalGrade)
            Me.columnFGrade = New Global.System.Data.DataColumn("FGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGrade)
            Me.columnAverage = New Global.System.Data.DataColumn("Average", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverage)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnPGrade1 = New Global.System.Data.DataColumn("PGrade1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGrade1)
            Me.columnMGrade1 = New Global.System.Data.DataColumn("MGrade1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMGrade1)
            Me.columnPFinalGrade1 = New Global.System.Data.DataColumn("PFinalGrade1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPFinalGrade1)
            Me.columnFGrade1 = New Global.System.Data.DataColumn("FGrade1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGrade1)
            Me.columnAverage1 = New Global.System.Data.DataColumn("Average1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverage1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudentName.MaxLength = 183
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 45
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 150
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnInstructor.AllowDBNull = false
            Me.columnInstructor.MaxLength = 91
            Me.columnPGrade.AllowDBNull = false
            Me.columnPGrade.MaxLength = 15
            Me.columnMGrade.AllowDBNull = false
            Me.columnMGrade.MaxLength = 15
            Me.columnPFinalGrade.AllowDBNull = false
            Me.columnPFinalGrade.MaxLength = 45
            Me.columnFGrade.AllowDBNull = false
            Me.columnFGrade.MaxLength = 15
            Me.columnAverage.AllowDBNull = false
            Me.columnAverage.MaxLength = 45
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnPGrade1.AllowDBNull = false
            Me.columnPGrade1.Caption = "PGrade"
            Me.columnMGrade1.AllowDBNull = false
            Me.columnMGrade1.Caption = "MGrade"
            Me.columnPFinalGrade1.AllowDBNull = false
            Me.columnPFinalGrade1.Caption = "PFinalGrade"
            Me.columnFGrade1.AllowDBNull = false
            Me.columnFGrade1.Caption = "FGrade"
            Me.columnAverage1.AllowDBNull = false
            Me.columnAverage1.Caption = "Average"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGradingSheetRow() As GradingSheetRow
            Return CType(Me.NewRow,GradingSheetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GradingSheetRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GradingSheetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GradingSheetRowChangedEvent) Is Nothing) Then
                RaiseEvent GradingSheetRowChanged(Me, New GradingSheetRowChangeEvent(CType(e.Row,GradingSheetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GradingSheetRowChangingEvent) Is Nothing) Then
                RaiseEvent GradingSheetRowChanging(Me, New GradingSheetRowChangeEvent(CType(e.Row,GradingSheetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GradingSheetRowDeletedEvent) Is Nothing) Then
                RaiseEvent GradingSheetRowDeleted(Me, New GradingSheetRowChangeEvent(CType(e.Row,GradingSheetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GradingSheetRowDeletingEvent) Is Nothing) Then
                RaiseEvent GradingSheetRowDeleting(Me, New GradingSheetRowChangeEvent(CType(e.Row,GradingSheetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGradingSheetRow(ByVal row As GradingSheetRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GradingSheetDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class roomsDataTable
        Inherits Global.System.Data.TypedTableBase(Of roomsRow)
        
        Private columnroomID As Global.System.Data.DataColumn
        
        Private columnRoom As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rooms"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property roomIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnroomID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRoom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As roomsRow
            Get
                Return CType(Me.Rows(index),roomsRow)
            End Get
        End Property
        
        Public Event roomsRowChanging As roomsRowChangeEventHandler
        
        Public Event roomsRowChanged As roomsRowChangeEventHandler
        
        Public Event roomsRowDeleting As roomsRowChangeEventHandler
        
        Public Event roomsRowDeleted As roomsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddroomsRow(ByVal row As roomsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddroomsRow(ByVal roomID As UInteger, ByVal Room As String) As roomsRow
            Dim rowroomsRow As roomsRow = CType(Me.NewRow,roomsRow)
            Dim columnValuesArray() As Object = New Object() {roomID, Room}
            rowroomsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowroomsRow)
            Return rowroomsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByroomID(ByVal roomID As UInteger) As roomsRow
            Return CType(Me.Rows.Find(New Object() {roomID}),roomsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As roomsDataTable = CType(MyBase.Clone,roomsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New roomsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnroomID = MyBase.Columns("roomID")
            Me.columnRoom = MyBase.Columns("Room")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnroomID = New Global.System.Data.DataColumn("roomID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnroomID)
            Me.columnRoom = New Global.System.Data.DataColumn("Room", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRoom)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnroomID}, true))
            Me.columnroomID.AllowDBNull = false
            Me.columnroomID.Unique = true
            Me.columnRoom.AllowDBNull = false
            Me.columnRoom.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewroomsRow() As roomsRow
            Return CType(Me.NewRow,roomsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New roomsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(roomsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.roomsRowChangedEvent) Is Nothing) Then
                RaiseEvent roomsRowChanged(Me, New roomsRowChangeEvent(CType(e.Row,roomsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.roomsRowChangingEvent) Is Nothing) Then
                RaiseEvent roomsRowChanging(Me, New roomsRowChangeEvent(CType(e.Row,roomsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.roomsRowDeletedEvent) Is Nothing) Then
                RaiseEvent roomsRowDeleted(Me, New roomsRowChangeEvent(CType(e.Row,roomsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.roomsRowDeletingEvent) Is Nothing) Then
                RaiseEvent roomsRowDeleting(Me, New roomsRowChangeEvent(CType(e.Row,roomsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveroomsRow(ByVal row As roomsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "roomsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class acctTrackingDataTable
        Inherits Global.System.Data.TypedTableBase(Of acctTrackingRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnAcctTotal As Global.System.Data.DataColumn
        
        Private columnTotalPayments As Global.System.Data.DataColumn
        
        Private columnCurrentBalance As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnDiscount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "acctTracking"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPaymentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPayments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As acctTrackingRow
            Get
                Return CType(Me.Rows(index),acctTrackingRow)
            End Get
        End Property
        
        Public Event acctTrackingRowChanging As acctTrackingRowChangeEventHandler
        
        Public Event acctTrackingRowChanged As acctTrackingRowChangeEventHandler
        
        Public Event acctTrackingRowDeleting As acctTrackingRowChangeEventHandler
        
        Public Event acctTrackingRowDeleted As acctTrackingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddacctTrackingRow(ByVal row As acctTrackingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddacctTrackingRow(ByVal StudentNumber As String, ByVal StudentName As String, ByVal Course As String, ByVal AcctTotal As Double, ByVal TotalPayments As Double, ByVal CurrentBalance As Double, ByVal SY As String, ByVal letterHead() As Byte, ByVal Discount As Double) As acctTrackingRow
            Dim rowacctTrackingRow As acctTrackingRow = CType(Me.NewRow,acctTrackingRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, StudentName, Course, AcctTotal, TotalPayments, CurrentBalance, SY, letterHead, Discount}
            rowacctTrackingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowacctTrackingRow)
            Return rowacctTrackingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As acctTrackingRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),acctTrackingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As acctTrackingDataTable = CType(MyBase.Clone,acctTrackingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New acctTrackingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnAcctTotal = MyBase.Columns("AcctTotal")
            Me.columnTotalPayments = MyBase.Columns("TotalPayments")
            Me.columnCurrentBalance = MyBase.Columns("CurrentBalance")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnDiscount = MyBase.Columns("Discount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnAcctTotal = New Global.System.Data.DataColumn("AcctTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctTotal)
            Me.columnTotalPayments = New Global.System.Data.DataColumn("TotalPayments", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPayments)
            Me.columnCurrentBalance = New Global.System.Data.DataColumn("CurrentBalance", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentBalance)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscount)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudentName.MaxLength = 182
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 250
            Me.columnAcctTotal.AllowDBNull = false
            Me.columnTotalPayments.AllowDBNull = false
            Me.columnCurrentBalance.AllowDBNull = false
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnDiscount.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewacctTrackingRow() As acctTrackingRow
            Return CType(Me.NewRow,acctTrackingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New acctTrackingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(acctTrackingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.acctTrackingRowChangedEvent) Is Nothing) Then
                RaiseEvent acctTrackingRowChanged(Me, New acctTrackingRowChangeEvent(CType(e.Row,acctTrackingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.acctTrackingRowChangingEvent) Is Nothing) Then
                RaiseEvent acctTrackingRowChanging(Me, New acctTrackingRowChangeEvent(CType(e.Row,acctTrackingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.acctTrackingRowDeletedEvent) Is Nothing) Then
                RaiseEvent acctTrackingRowDeleted(Me, New acctTrackingRowChangeEvent(CType(e.Row,acctTrackingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.acctTrackingRowDeletingEvent) Is Nothing) Then
                RaiseEvent acctTrackingRowDeleting(Me, New acctTrackingRowChangeEvent(CType(e.Row,acctTrackingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveacctTrackingRow(ByVal row As acctTrackingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "acctTrackingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ethnicityDataTable
        Inherits Global.System.Data.TypedTableBase(Of ethnicityRow)
        
        Private columnEthnicity As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ethnicity"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EthnicityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEthnicity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ethnicityRow
            Get
                Return CType(Me.Rows(index),ethnicityRow)
            End Get
        End Property
        
        Public Event ethnicityRowChanging As ethnicityRowChangeEventHandler
        
        Public Event ethnicityRowChanged As ethnicityRowChangeEventHandler
        
        Public Event ethnicityRowDeleting As ethnicityRowChangeEventHandler
        
        Public Event ethnicityRowDeleted As ethnicityRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddethnicityRow(ByVal row As ethnicityRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddethnicityRow(ByVal Ethnicity As String, ByVal StudentNumber As String) As ethnicityRow
            Dim rowethnicityRow As ethnicityRow = CType(Me.NewRow,ethnicityRow)
            Dim columnValuesArray() As Object = New Object() {Ethnicity, StudentNumber}
            rowethnicityRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowethnicityRow)
            Return rowethnicityRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As ethnicityRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),ethnicityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ethnicityDataTable = CType(MyBase.Clone,ethnicityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ethnicityDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEthnicity = MyBase.Columns("Ethnicity")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEthnicity = New Global.System.Data.DataColumn("Ethnicity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEthnicity)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnEthnicity.AllowDBNull = false
            Me.columnEthnicity.MaxLength = 65
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewethnicityRow() As ethnicityRow
            Return CType(Me.NewRow,ethnicityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ethnicityRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ethnicityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ethnicityRowChangedEvent) Is Nothing) Then
                RaiseEvent ethnicityRowChanged(Me, New ethnicityRowChangeEvent(CType(e.Row,ethnicityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ethnicityRowChangingEvent) Is Nothing) Then
                RaiseEvent ethnicityRowChanging(Me, New ethnicityRowChangeEvent(CType(e.Row,ethnicityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ethnicityRowDeletedEvent) Is Nothing) Then
                RaiseEvent ethnicityRowDeleted(Me, New ethnicityRowChangeEvent(CType(e.Row,ethnicityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ethnicityRowDeletingEvent) Is Nothing) Then
                RaiseEvent ethnicityRowDeleting(Me, New ethnicityRowChangeEvent(CType(e.Row,ethnicityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveethnicityRow(ByVal row As ethnicityRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ethnicityDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class provinceDataTable
        Inherits Global.System.Data.TypedTableBase(Of provinceRow)
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "province"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As provinceRow
            Get
                Return CType(Me.Rows(index),provinceRow)
            End Get
        End Property
        
        Public Event provinceRowChanging As provinceRowChangeEventHandler
        
        Public Event provinceRowChanged As provinceRowChangeEventHandler
        
        Public Event provinceRowDeleting As provinceRowChangeEventHandler
        
        Public Event provinceRowDeleted As provinceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddprovinceRow(ByVal row As provinceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddprovinceRow(ByVal Province As String, ByVal StudentNumber As String) As provinceRow
            Dim rowprovinceRow As provinceRow = CType(Me.NewRow,provinceRow)
            Dim columnValuesArray() As Object = New Object() {Province, StudentNumber}
            rowprovinceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowprovinceRow)
            Return rowprovinceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As provinceRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),provinceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As provinceDataTable = CType(MyBase.Clone,provinceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New provinceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnProvince.AllowDBNull = false
            Me.columnProvince.MaxLength = 65
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewprovinceRow() As provinceRow
            Return CType(Me.NewRow,provinceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New provinceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(provinceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.provinceRowChangedEvent) Is Nothing) Then
                RaiseEvent provinceRowChanged(Me, New provinceRowChangeEvent(CType(e.Row,provinceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.provinceRowChangingEvent) Is Nothing) Then
                RaiseEvent provinceRowChanging(Me, New provinceRowChangeEvent(CType(e.Row,provinceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.provinceRowDeletedEvent) Is Nothing) Then
                RaiseEvent provinceRowDeleted(Me, New provinceRowChangeEvent(CType(e.Row,provinceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.provinceRowDeletingEvent) Is Nothing) Then
                RaiseEvent provinceRowDeleting(Me, New provinceRowChangeEvent(CType(e.Row,provinceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveprovinceRow(ByVal row As provinceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "provinceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CityDataTable
        Inherits Global.System.Data.TypedTableBase(Of CityRow)
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "City"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CityRow
            Get
                Return CType(Me.Rows(index),CityRow)
            End Get
        End Property
        
        Public Event CityRowChanging As CityRowChangeEventHandler
        
        Public Event CityRowChanged As CityRowChangeEventHandler
        
        Public Event CityRowDeleting As CityRowChangeEventHandler
        
        Public Event CityRowDeleted As CityRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCityRow(ByVal row As CityRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCityRow(ByVal City As String, ByVal StudentNumber As String) As CityRow
            Dim rowCityRow As CityRow = CType(Me.NewRow,CityRow)
            Dim columnValuesArray() As Object = New Object() {City, StudentNumber}
            rowCityRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCityRow)
            Return rowCityRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As CityRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),CityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CityDataTable = CType(MyBase.Clone,CityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CityDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCity = MyBase.Columns("City")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 65
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCityRow() As CityRow
            Return CType(Me.NewRow,CityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CityRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CityRowChangedEvent) Is Nothing) Then
                RaiseEvent CityRowChanged(Me, New CityRowChangeEvent(CType(e.Row,CityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CityRowChangingEvent) Is Nothing) Then
                RaiseEvent CityRowChanging(Me, New CityRowChangeEvent(CType(e.Row,CityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CityRowDeletedEvent) Is Nothing) Then
                RaiseEvent CityRowDeleted(Me, New CityRowChangeEvent(CType(e.Row,CityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CityRowDeletingEvent) Is Nothing) Then
                RaiseEvent CityRowDeleting(Me, New CityRowChangeEvent(CType(e.Row,CityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCityRow(ByVal row As CityRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CityDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BrgyDataTable
        Inherits Global.System.Data.TypedTableBase(Of BrgyRow)
        
        Private columnBrgy As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Brgy"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BrgyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrgy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BrgyRow
            Get
                Return CType(Me.Rows(index),BrgyRow)
            End Get
        End Property
        
        Public Event BrgyRowChanging As BrgyRowChangeEventHandler
        
        Public Event BrgyRowChanged As BrgyRowChangeEventHandler
        
        Public Event BrgyRowDeleting As BrgyRowChangeEventHandler
        
        Public Event BrgyRowDeleted As BrgyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBrgyRow(ByVal row As BrgyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBrgyRow(ByVal Brgy As String, ByVal StudentNumber As String) As BrgyRow
            Dim rowBrgyRow As BrgyRow = CType(Me.NewRow,BrgyRow)
            Dim columnValuesArray() As Object = New Object() {Brgy, StudentNumber}
            rowBrgyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBrgyRow)
            Return rowBrgyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As BrgyRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),BrgyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BrgyDataTable = CType(MyBase.Clone,BrgyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BrgyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBrgy = MyBase.Columns("Brgy")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBrgy = New Global.System.Data.DataColumn("Brgy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrgy)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnBrgy.AllowDBNull = false
            Me.columnBrgy.MaxLength = 65
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBrgyRow() As BrgyRow
            Return CType(Me.NewRow,BrgyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BrgyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BrgyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BrgyRowChangedEvent) Is Nothing) Then
                RaiseEvent BrgyRowChanged(Me, New BrgyRowChangeEvent(CType(e.Row,BrgyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BrgyRowChangingEvent) Is Nothing) Then
                RaiseEvent BrgyRowChanging(Me, New BrgyRowChangeEvent(CType(e.Row,BrgyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BrgyRowDeletedEvent) Is Nothing) Then
                RaiseEvent BrgyRowDeleted(Me, New BrgyRowChangeEvent(CType(e.Row,BrgyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BrgyRowDeletingEvent) Is Nothing) Then
                RaiseEvent BrgyRowDeleting(Me, New BrgyRowChangeEvent(CType(e.Row,BrgyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBrgyRow(ByVal row As BrgyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BrgyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class stude_specialreportsDataTable
        Inherits Global.System.Data.TypedTableBase(Of stude_specialreportsRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudeName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnEthnicity As Global.System.Data.DataColumn
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnBrgy As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "stude_specialreports"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EthnicityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEthnicity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BrgyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrgy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As stude_specialreportsRow
            Get
                Return CType(Me.Rows(index),stude_specialreportsRow)
            End Get
        End Property
        
        Public Event stude_specialreportsRowChanging As stude_specialreportsRowChangeEventHandler
        
        Public Event stude_specialreportsRowChanged As stude_specialreportsRowChangeEventHandler
        
        Public Event stude_specialreportsRowDeleting As stude_specialreportsRowChangeEventHandler
        
        Public Event stude_specialreportsRowDeleted As stude_specialreportsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addstude_specialreportsRow(ByVal row As stude_specialreportsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addstude_specialreportsRow(ByVal StudentNumber As String, ByVal StudeName As String, ByVal Sex As String, ByVal Ethnicity As String, ByVal Province As String, ByVal City As String, ByVal Brgy As String, ByVal Semester As String, ByVal SY As String, ByVal Course As String, ByVal YearLevel As String, ByVal SchoolName As String, ByVal SchoolAddress As String, ByVal letterHead() As Byte) As stude_specialreportsRow
            Dim rowstude_specialreportsRow As stude_specialreportsRow = CType(Me.NewRow,stude_specialreportsRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, StudeName, Sex, Ethnicity, Province, City, Brgy, Semester, SY, Course, YearLevel, SchoolName, SchoolAddress, letterHead}
            rowstude_specialreportsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstude_specialreportsRow)
            Return rowstude_specialreportsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As stude_specialreportsRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),stude_specialreportsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As stude_specialreportsDataTable = CType(MyBase.Clone,stude_specialreportsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New stude_specialreportsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudeName = MyBase.Columns("StudeName")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnEthnicity = MyBase.Columns("Ethnicity")
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnCity = MyBase.Columns("City")
            Me.columnBrgy = MyBase.Columns("Brgy")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudeName = New Global.System.Data.DataColumn("StudeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudeName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnEthnicity = New Global.System.Data.DataColumn("Ethnicity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEthnicity)
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnBrgy = New Global.System.Data.DataColumn("Brgy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrgy)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudeName.MaxLength = 122
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnEthnicity.AllowDBNull = false
            Me.columnEthnicity.MaxLength = 100
            Me.columnProvince.AllowDBNull = false
            Me.columnProvince.MaxLength = 65
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 65
            Me.columnBrgy.AllowDBNull = false
            Me.columnBrgy.MaxLength = 65
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnCourse.MaxLength = 250
            Me.columnYearLevel.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newstude_specialreportsRow() As stude_specialreportsRow
            Return CType(Me.NewRow,stude_specialreportsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New stude_specialreportsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(stude_specialreportsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.stude_specialreportsRowChangedEvent) Is Nothing) Then
                RaiseEvent stude_specialreportsRowChanged(Me, New stude_specialreportsRowChangeEvent(CType(e.Row,stude_specialreportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.stude_specialreportsRowChangingEvent) Is Nothing) Then
                RaiseEvent stude_specialreportsRowChanging(Me, New stude_specialreportsRowChangeEvent(CType(e.Row,stude_specialreportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.stude_specialreportsRowDeletedEvent) Is Nothing) Then
                RaiseEvent stude_specialreportsRowDeleted(Me, New stude_specialreportsRowChangeEvent(CType(e.Row,stude_specialreportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.stude_specialreportsRowDeletingEvent) Is Nothing) Then
                RaiseEvent stude_specialreportsRowDeleting(Me, New stude_specialreportsRowChangeEvent(CType(e.Row,stude_specialreportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removestude_specialreportsRow(ByVal row As stude_specialreportsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "stude_specialreportsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReligionDataTable
        Inherits Global.System.Data.TypedTableBase(Of ReligionRow)
        
        Private columnReligion As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Religion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReligionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReligion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReligionRow
            Get
                Return CType(Me.Rows(index),ReligionRow)
            End Get
        End Property
        
        Public Event ReligionRowChanging As ReligionRowChangeEventHandler
        
        Public Event ReligionRowChanged As ReligionRowChangeEventHandler
        
        Public Event ReligionRowDeleting As ReligionRowChangeEventHandler
        
        Public Event ReligionRowDeleted As ReligionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReligionRow(ByVal row As ReligionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReligionRow(ByVal Religion As String, ByVal StudentNumber As String) As ReligionRow
            Dim rowReligionRow As ReligionRow = CType(Me.NewRow,ReligionRow)
            Dim columnValuesArray() As Object = New Object() {Religion, StudentNumber}
            rowReligionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReligionRow)
            Return rowReligionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As ReligionRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),ReligionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReligionDataTable = CType(MyBase.Clone,ReligionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReligionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReligion = MyBase.Columns("Religion")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReligion = New Global.System.Data.DataColumn("Religion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReligion)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnReligion.AllowDBNull = false
            Me.columnReligion.MaxLength = 100
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReligionRow() As ReligionRow
            Return CType(Me.NewRow,ReligionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReligionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReligionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReligionRowChangedEvent) Is Nothing) Then
                RaiseEvent ReligionRowChanged(Me, New ReligionRowChangeEvent(CType(e.Row,ReligionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReligionRowChangingEvent) Is Nothing) Then
                RaiseEvent ReligionRowChanging(Me, New ReligionRowChangeEvent(CType(e.Row,ReligionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReligionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReligionRowDeleted(Me, New ReligionRowChangeEvent(CType(e.Row,ReligionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReligionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReligionRowDeleting(Me, New ReligionRowChangeEvent(CType(e.Row,ReligionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReligionRow(ByVal row As ReligionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReligionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Chart_SexDataTable
        Inherits Global.System.Data.TypedTableBase(Of Chart_SexRow)
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private _columncount_Sex_ As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Chart_Sex"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _count_Sex_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columncount_Sex_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Chart_SexRow
            Get
                Return CType(Me.Rows(index),Chart_SexRow)
            End Get
        End Property
        
        Public Event Chart_SexRowChanging As Chart_SexRowChangeEventHandler
        
        Public Event Chart_SexRowChanged As Chart_SexRowChangeEventHandler
        
        Public Event Chart_SexRowDeleting As Chart_SexRowChangeEventHandler
        
        Public Event Chart_SexRowDeleted As Chart_SexRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddChart_SexRow(ByVal row As Chart_SexRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddChart_SexRow(ByVal Sex As String, ByVal Semester As String, ByVal SY As String, ByVal _count_Sex_ As Long, ByVal YearLevel As String, ByVal Section As String, ByVal SchoolName As String, ByVal SchoolAddress As String, ByVal letterHead() As Byte) As Chart_SexRow
            Dim rowChart_SexRow As Chart_SexRow = CType(Me.NewRow,Chart_SexRow)
            Dim columnValuesArray() As Object = New Object() {Sex, Semester, SY, _count_Sex_, YearLevel, Section, SchoolName, SchoolAddress, letterHead}
            rowChart_SexRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowChart_SexRow)
            Return rowChart_SexRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Chart_SexDataTable = CType(MyBase.Clone,Chart_SexDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Chart_SexDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me._columncount_Sex_ = MyBase.Columns("count(Sex)")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me._columncount_Sex_ = New Global.System.Data.DataColumn("count(Sex)", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            Me._columncount_Sex_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncount_Sex_")
            Me._columncount_Sex_.ExtendedProperties.Add("Generator_UserColumnName", "count(Sex)")
            MyBase.Columns.Add(Me._columncount_Sex_)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me._columncount_Sex_.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnSection.MaxLength = 150
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewChart_SexRow() As Chart_SexRow
            Return CType(Me.NewRow,Chart_SexRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Chart_SexRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Chart_SexRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Chart_SexRowChangedEvent) Is Nothing) Then
                RaiseEvent Chart_SexRowChanged(Me, New Chart_SexRowChangeEvent(CType(e.Row,Chart_SexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Chart_SexRowChangingEvent) Is Nothing) Then
                RaiseEvent Chart_SexRowChanging(Me, New Chart_SexRowChangeEvent(CType(e.Row,Chart_SexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Chart_SexRowDeletedEvent) Is Nothing) Then
                RaiseEvent Chart_SexRowDeleted(Me, New Chart_SexRowChangeEvent(CType(e.Row,Chart_SexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Chart_SexRowDeletingEvent) Is Nothing) Then
                RaiseEvent Chart_SexRowDeleting(Me, New Chart_SexRowChangeEvent(CType(e.Row,Chart_SexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveChart_SexRow(ByVal row As Chart_SexRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Chart_SexDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EthnicityCountDataTable
        Inherits Global.System.Data.TypedTableBase(Of EthnicityCountRow)
        
        Private columnEthnicity As Global.System.Data.DataColumn
        
        Private _columncount_Ethnicity_ As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EthnicityCount"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EthnicityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEthnicity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _count_Ethnicity_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columncount_Ethnicity_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EthnicityCountRow
            Get
                Return CType(Me.Rows(index),EthnicityCountRow)
            End Get
        End Property
        
        Public Event EthnicityCountRowChanging As EthnicityCountRowChangeEventHandler
        
        Public Event EthnicityCountRowChanged As EthnicityCountRowChangeEventHandler
        
        Public Event EthnicityCountRowDeleting As EthnicityCountRowChangeEventHandler
        
        Public Event EthnicityCountRowDeleted As EthnicityCountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEthnicityCountRow(ByVal row As EthnicityCountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEthnicityCountRow(ByVal Ethnicity As String, ByVal _count_Ethnicity_ As Long, ByVal Semester As String, ByVal SY As String, ByVal SchoolName As String, ByVal SchoolAddress As String, ByVal Course As String, ByVal YearLevel As String, ByVal Section As String, ByVal letterHead() As Byte, ByVal Sex As String) As EthnicityCountRow
            Dim rowEthnicityCountRow As EthnicityCountRow = CType(Me.NewRow,EthnicityCountRow)
            Dim columnValuesArray() As Object = New Object() {Ethnicity, _count_Ethnicity_, Semester, SY, SchoolName, SchoolAddress, Course, YearLevel, Section, letterHead, Sex}
            rowEthnicityCountRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEthnicityCountRow)
            Return rowEthnicityCountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EthnicityCountDataTable = CType(MyBase.Clone,EthnicityCountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EthnicityCountDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEthnicity = MyBase.Columns("Ethnicity")
            Me._columncount_Ethnicity_ = MyBase.Columns("count(Ethnicity)")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnSex = MyBase.Columns("Sex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEthnicity = New Global.System.Data.DataColumn("Ethnicity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEthnicity)
            Me._columncount_Ethnicity_ = New Global.System.Data.DataColumn("count(Ethnicity)", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            Me._columncount_Ethnicity_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncount_Ethnicity_")
            Me._columncount_Ethnicity_.ExtendedProperties.Add("Generator_UserColumnName", "count(Ethnicity)")
            MyBase.Columns.Add(Me._columncount_Ethnicity_)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnEthnicity.AllowDBNull = false
            Me.columnEthnicity.MaxLength = 100
            Me._columncount_Ethnicity_.AllowDBNull = false
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnCourse.MaxLength = 250
            Me.columnYearLevel.MaxLength = 45
            Me.columnSection.MaxLength = 150
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEthnicityCountRow() As EthnicityCountRow
            Return CType(Me.NewRow,EthnicityCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EthnicityCountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EthnicityCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EthnicityCountRowChangedEvent) Is Nothing) Then
                RaiseEvent EthnicityCountRowChanged(Me, New EthnicityCountRowChangeEvent(CType(e.Row,EthnicityCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EthnicityCountRowChangingEvent) Is Nothing) Then
                RaiseEvent EthnicityCountRowChanging(Me, New EthnicityCountRowChangeEvent(CType(e.Row,EthnicityCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EthnicityCountRowDeletedEvent) Is Nothing) Then
                RaiseEvent EthnicityCountRowDeleted(Me, New EthnicityCountRowChangeEvent(CType(e.Row,EthnicityCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EthnicityCountRowDeletingEvent) Is Nothing) Then
                RaiseEvent EthnicityCountRowDeleting(Me, New EthnicityCountRowChangeEvent(CType(e.Row,EthnicityCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEthnicityCountRow(ByVal row As EthnicityCountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EthnicityCountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class grades_reportDataTable
        Inherits Global.System.Data.TypedTableBase(Of grades_reportRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudeName As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnBirthPlace As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnAverage As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnPGrade As Global.System.Data.DataColumn
        
        Private columnMGrade As Global.System.Data.DataColumn
        
        Private columnPFinalGrade As Global.System.Data.DataColumn
        
        Private columnFGrade As Global.System.Data.DataColumn
        
        Private columnAdviser As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnTrack As Global.System.Data.DataColumn
        
        Private columnQualification As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        Private columnPGrade1 As Global.System.Data.DataColumn
        
        Private columnMGrade1 As Global.System.Data.DataColumn
        
        Private columnPFinalGrade1 As Global.System.Data.DataColumn
        
        Private columnFGrade1 As Global.System.Data.DataColumn
        
        Private columnAverage1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "grades_report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthPlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFinalGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPFinalGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdviserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdviser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QualificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQualification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGrade1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGrade1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MGrade1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMGrade1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFinalGrade1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPFinalGrade1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGrade1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGrade1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Average1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverage1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As grades_reportRow
            Get
                Return CType(Me.Rows(index),grades_reportRow)
            End Get
        End Property
        
        Public Event grades_reportRowChanging As grades_reportRowChangeEventHandler
        
        Public Event grades_reportRowChanged As grades_reportRowChangeEventHandler
        
        Public Event grades_reportRowDeleting As grades_reportRowChangeEventHandler
        
        Public Event grades_reportRowDeleted As grades_reportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addgrades_reportRow(ByVal row As grades_reportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addgrades_reportRow( _
                    ByVal parentethnicityRowByfk_grades_1 As ethnicityRow,  _
                    ByVal StudeName As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal BirthPlace As String,  _
                    ByVal Guardian As String,  _
                    ByVal Course As String,  _
                    ByVal Description As String,  _
                    ByVal Average As String,  _
                    ByVal SY As String,  _
                    ByVal YearLevel As String,  _
                    ByVal PGrade As String,  _
                    ByVal MGrade As String,  _
                    ByVal PFinalGrade As String,  _
                    ByVal FGrade As String,  _
                    ByVal Adviser As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal Sex As String,  _
                    ByVal Age As String,  _
                    ByVal Section As String,  _
                    ByVal Track As String,  _
                    ByVal Qualification As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal Division As String,  _
                    ByVal _Region As String,  _
                    ByVal PGrade1 As Double,  _
                    ByVal MGrade1 As Double,  _
                    ByVal PFinalGrade1 As Double,  _
                    ByVal FGrade1 As Double,  _
                    ByVal Average1 As Double) As grades_reportRow
            Dim rowgrades_reportRow As grades_reportRow = CType(Me.NewRow,grades_reportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudeName, BirthDate, BirthPlace, Guardian, Course, Description, Average, SY, YearLevel, PGrade, MGrade, PFinalGrade, FGrade, Adviser, SchoolName, SchoolAddress, Sex, Age, Section, Track, Qualification, SchoolHead, sHeadPosition, Division, _Region, PGrade1, MGrade1, PFinalGrade1, FGrade1, Average1}
            If (Not (parentethnicityRowByfk_grades_1) Is Nothing) Then
                columnValuesArray(0) = parentethnicityRowByfk_grades_1(1)
            End If
            rowgrades_reportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowgrades_reportRow)
            Return rowgrades_reportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As grades_reportRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),grades_reportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As grades_reportDataTable = CType(MyBase.Clone,grades_reportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New grades_reportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudeName = MyBase.Columns("StudeName")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnBirthPlace = MyBase.Columns("BirthPlace")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnAverage = MyBase.Columns("Average")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnPGrade = MyBase.Columns("PGrade")
            Me.columnMGrade = MyBase.Columns("MGrade")
            Me.columnPFinalGrade = MyBase.Columns("PFinalGrade")
            Me.columnFGrade = MyBase.Columns("FGrade")
            Me.columnAdviser = MyBase.Columns("Adviser")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnTrack = MyBase.Columns("Track")
            Me.columnQualification = MyBase.Columns("Qualification")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnRegion = MyBase.Columns("Region")
            Me.columnPGrade1 = MyBase.Columns("PGrade1")
            Me.columnMGrade1 = MyBase.Columns("MGrade1")
            Me.columnPFinalGrade1 = MyBase.Columns("PFinalGrade1")
            Me.columnFGrade1 = MyBase.Columns("FGrade1")
            Me.columnAverage1 = MyBase.Columns("Average1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudeName = New Global.System.Data.DataColumn("StudeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudeName)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnBirthPlace = New Global.System.Data.DataColumn("BirthPlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthPlace)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnAverage = New Global.System.Data.DataColumn("Average", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverage)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnPGrade = New Global.System.Data.DataColumn("PGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGrade)
            Me.columnMGrade = New Global.System.Data.DataColumn("MGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMGrade)
            Me.columnPFinalGrade = New Global.System.Data.DataColumn("PFinalGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPFinalGrade)
            Me.columnFGrade = New Global.System.Data.DataColumn("FGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGrade)
            Me.columnAdviser = New Global.System.Data.DataColumn("Adviser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdviser)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnTrack = New Global.System.Data.DataColumn("Track", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrack)
            Me.columnQualification = New Global.System.Data.DataColumn("Qualification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQualification)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnPGrade1 = New Global.System.Data.DataColumn("PGrade1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGrade1)
            Me.columnMGrade1 = New Global.System.Data.DataColumn("MGrade1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMGrade1)
            Me.columnPFinalGrade1 = New Global.System.Data.DataColumn("PFinalGrade1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPFinalGrade1)
            Me.columnFGrade1 = New Global.System.Data.DataColumn("FGrade1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGrade1)
            Me.columnAverage1 = New Global.System.Data.DataColumn("Average1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverage1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudeName.MaxLength = 183
            Me.columnBirthDate.AllowDBNull = false
            Me.columnBirthPlace.AllowDBNull = false
            Me.columnBirthPlace.MaxLength = 250
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 150
            Me.columnCourse.MaxLength = 250
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 65
            Me.columnAverage.AllowDBNull = false
            Me.columnAverage.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnYearLevel.MaxLength = 45
            Me.columnPGrade.AllowDBNull = false
            Me.columnPGrade.MaxLength = 15
            Me.columnMGrade.AllowDBNull = false
            Me.columnMGrade.MaxLength = 15
            Me.columnPFinalGrade.AllowDBNull = false
            Me.columnPFinalGrade.MaxLength = 45
            Me.columnFGrade.AllowDBNull = false
            Me.columnFGrade.MaxLength = 15
            Me.columnAdviser.AllowDBNull = false
            Me.columnAdviser.MaxLength = 100
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnAge.AllowDBNull = false
            Me.columnAge.MaxLength = 2
            Me.columnSection.MaxLength = 150
            Me.columnTrack.AllowDBNull = false
            Me.columnTrack.MaxLength = 100
            Me.columnQualification.AllowDBNull = false
            Me.columnQualification.MaxLength = 100
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnRegion.AllowDBNull = false
            Me.columnRegion.MaxLength = 45
            Me.columnPGrade1.AllowDBNull = false
            Me.columnPGrade1.Caption = "PGrade"
            Me.columnMGrade1.AllowDBNull = false
            Me.columnMGrade1.Caption = "MGrade"
            Me.columnPFinalGrade1.AllowDBNull = false
            Me.columnPFinalGrade1.Caption = "PFinalGrade"
            Me.columnFGrade1.AllowDBNull = false
            Me.columnFGrade1.Caption = "FGrade"
            Me.columnAverage1.AllowDBNull = false
            Me.columnAverage1.Caption = "Average"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newgrades_reportRow() As grades_reportRow
            Return CType(Me.NewRow,grades_reportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New grades_reportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(grades_reportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.grades_reportRowChangedEvent) Is Nothing) Then
                RaiseEvent grades_reportRowChanged(Me, New grades_reportRowChangeEvent(CType(e.Row,grades_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.grades_reportRowChangingEvent) Is Nothing) Then
                RaiseEvent grades_reportRowChanging(Me, New grades_reportRowChangeEvent(CType(e.Row,grades_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.grades_reportRowDeletedEvent) Is Nothing) Then
                RaiseEvent grades_reportRowDeleted(Me, New grades_reportRowChangeEvent(CType(e.Row,grades_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.grades_reportRowDeletingEvent) Is Nothing) Then
                RaiseEvent grades_reportRowDeleting(Me, New grades_reportRowChangeEvent(CType(e.Row,grades_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removegrades_reportRow(ByVal row As grades_reportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "grades_reportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class enrolmentCountSummaryDataTable
        Inherits Global.System.Data.TypedTableBase(Of enrolmentCountSummaryRow)
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnsexCount As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnTrack As Global.System.Data.DataColumn
        
        Private columnQualification As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnsex As Global.System.Data.DataColumn
        
        Private columnRegistrarJHS As Global.System.Data.DataColumn
        
        Private columnRegistrarSHS As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnclassification As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "enrolmentCountSummary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsexCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QualificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQualification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property classificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclassification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As enrolmentCountSummaryRow
            Get
                Return CType(Me.Rows(index),enrolmentCountSummaryRow)
            End Get
        End Property
        
        Public Event enrolmentCountSummaryRowChanging As enrolmentCountSummaryRowChangeEventHandler
        
        Public Event enrolmentCountSummaryRowChanged As enrolmentCountSummaryRowChangeEventHandler
        
        Public Event enrolmentCountSummaryRowDeleting As enrolmentCountSummaryRowChangeEventHandler
        
        Public Event enrolmentCountSummaryRowDeleted As enrolmentCountSummaryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddenrolmentCountSummaryRow(ByVal row As enrolmentCountSummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddenrolmentCountSummaryRow( _
                    ByVal YearLevel As String,  _
                    ByVal Semester As String,  _
                    ByVal SY As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal sexCount As Long,  _
                    ByVal Course As String,  _
                    ByVal Track As String,  _
                    ByVal Qualification As String,  _
                    ByVal letterHead() As Byte,  _
                    ByVal Section As String,  _
                    ByVal sex As String,  _
                    ByVal RegistrarJHS As String,  _
                    ByVal RegistrarSHS As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal classification As String) As enrolmentCountSummaryRow
            Dim rowenrolmentCountSummaryRow As enrolmentCountSummaryRow = CType(Me.NewRow,enrolmentCountSummaryRow)
            Dim columnValuesArray() As Object = New Object() {YearLevel, Semester, SY, SchoolName, SchoolAddress, sexCount, Course, Track, Qualification, letterHead, Section, sex, RegistrarJHS, RegistrarSHS, SchoolHead, sHeadPosition, classification}
            rowenrolmentCountSummaryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowenrolmentCountSummaryRow)
            Return rowenrolmentCountSummaryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As enrolmentCountSummaryDataTable = CType(MyBase.Clone,enrolmentCountSummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New enrolmentCountSummaryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnsexCount = MyBase.Columns("sexCount")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnTrack = MyBase.Columns("Track")
            Me.columnQualification = MyBase.Columns("Qualification")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnsex = MyBase.Columns("sex")
            Me.columnRegistrarJHS = MyBase.Columns("RegistrarJHS")
            Me.columnRegistrarSHS = MyBase.Columns("RegistrarSHS")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnclassification = MyBase.Columns("classification")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnsexCount = New Global.System.Data.DataColumn("sexCount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsexCount)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnTrack = New Global.System.Data.DataColumn("Track", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrack)
            Me.columnQualification = New Global.System.Data.DataColumn("Qualification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQualification)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnsex = New Global.System.Data.DataColumn("sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsex)
            Me.columnRegistrarJHS = New Global.System.Data.DataColumn("RegistrarJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarJHS)
            Me.columnRegistrarSHS = New Global.System.Data.DataColumn("RegistrarSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarSHS)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnclassification = New Global.System.Data.DataColumn("classification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclassification)
            Me.columnYearLevel.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnsexCount.AllowDBNull = false
            Me.columnCourse.MaxLength = 250
            Me.columnTrack.AllowDBNull = false
            Me.columnTrack.MaxLength = 100
            Me.columnQualification.AllowDBNull = false
            Me.columnQualification.MaxLength = 100
            Me.columnSection.MaxLength = 150
            Me.columnsex.AllowDBNull = false
            Me.columnsex.MaxLength = 45
            Me.columnRegistrarJHS.AllowDBNull = false
            Me.columnRegistrarJHS.MaxLength = 65
            Me.columnRegistrarSHS.AllowDBNull = false
            Me.columnRegistrarSHS.MaxLength = 65
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnclassification.AllowDBNull = false
            Me.columnclassification.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewenrolmentCountSummaryRow() As enrolmentCountSummaryRow
            Return CType(Me.NewRow,enrolmentCountSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New enrolmentCountSummaryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(enrolmentCountSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.enrolmentCountSummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent enrolmentCountSummaryRowChanged(Me, New enrolmentCountSummaryRowChangeEvent(CType(e.Row,enrolmentCountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.enrolmentCountSummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent enrolmentCountSummaryRowChanging(Me, New enrolmentCountSummaryRowChangeEvent(CType(e.Row,enrolmentCountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.enrolmentCountSummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent enrolmentCountSummaryRowDeleted(Me, New enrolmentCountSummaryRowChangeEvent(CType(e.Row,enrolmentCountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.enrolmentCountSummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent enrolmentCountSummaryRowDeleting(Me, New enrolmentCountSummaryRowChangeEvent(CType(e.Row,enrolmentCountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveenrolmentCountSummaryRow(ByVal row As enrolmentCountSummaryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "enrolmentCountSummaryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RatingReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of RatingReportRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudeName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnBirthPlace As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnAdviser As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnTrack As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnPGrade As Global.System.Data.DataColumn
        
        Private columnMGrade As Global.System.Data.DataColumn
        
        Private columnPFinalGrade As Global.System.Data.DataColumn
        
        Private columnFGrade As Global.System.Data.DataColumn
        
        Private columnAverage As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnstrand As Global.System.Data.DataColumn
        
        Private columndepedlogo As Global.System.Data.DataColumn
        
        Private columnschoolLogo As Global.System.Data.DataColumn
        
        Private columndistrict As Global.System.Data.DataColumn
        
        Private columnprincipalPre As Global.System.Data.DataColumn
        
        Private columnprincipalGS As Global.System.Data.DataColumn
        
        Private columnprincipalJHS As Global.System.Data.DataColumn
        
        Private columnprincipalSHS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RatingReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthPlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdviserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdviser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFinalGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPFinalGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property depedlogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndepedlogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property districtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property principalPreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprincipalPre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property principalGSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprincipalGS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property principalJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprincipalJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property principalSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprincipalSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RatingReportRow
            Get
                Return CType(Me.Rows(index),RatingReportRow)
            End Get
        End Property
        
        Public Event RatingReportRowChanging As RatingReportRowChangeEventHandler
        
        Public Event RatingReportRowChanged As RatingReportRowChangeEventHandler
        
        Public Event RatingReportRowDeleting As RatingReportRowChangeEventHandler
        
        Public Event RatingReportRowDeleted As RatingReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRatingReportRow(ByVal row As RatingReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRatingReportRow( _
                    ByVal parentethnicityRowByFK_grades_15 As ethnicityRow,  _
                    ByVal StudeName As String,  _
                    ByVal Sex As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal Age As String,  _
                    ByVal BirthPlace As String,  _
                    ByVal Guardian As String,  _
                    ByVal Course As String,  _
                    ByVal YearLevel As String,  _
                    ByVal Adviser As String,  _
                    ByVal Section As String,  _
                    ByVal Track As String,  _
                    ByVal Description As String,  _
                    ByVal PGrade As Double,  _
                    ByVal MGrade As Double,  _
                    ByVal PFinalGrade As Double,  _
                    ByVal FGrade As Double,  _
                    ByVal Average As Double,  _
                    ByVal SY As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal Division As String,  _
                    ByVal _Region As String,  _
                    ByVal letterHead() As Byte,  _
                    ByVal Sem As String,  _
                    ByVal strand As String,  _
                    ByVal depedlogo() As Byte,  _
                    ByVal schoolLogo() As Byte,  _
                    ByVal district As String,  _
                    ByVal principalPre As String,  _
                    ByVal principalGS As String,  _
                    ByVal principalJHS As String,  _
                    ByVal principalSHS As String) As RatingReportRow
            Dim rowRatingReportRow As RatingReportRow = CType(Me.NewRow,RatingReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudeName, Sex, BirthDate, Age, BirthPlace, Guardian, Course, YearLevel, Adviser, Section, Track, Description, PGrade, MGrade, PFinalGrade, FGrade, Average, SY, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, Division, _Region, letterHead, Sem, strand, depedlogo, schoolLogo, district, principalPre, principalGS, principalJHS, principalSHS}
            If (Not (parentethnicityRowByFK_grades_15) Is Nothing) Then
                columnValuesArray(0) = parentethnicityRowByFK_grades_15(1)
            End If
            rowRatingReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRatingReportRow)
            Return rowRatingReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As RatingReportRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),RatingReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RatingReportDataTable = CType(MyBase.Clone,RatingReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RatingReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudeName = MyBase.Columns("StudeName")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnBirthPlace = MyBase.Columns("BirthPlace")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnAdviser = MyBase.Columns("Adviser")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnTrack = MyBase.Columns("Track")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnPGrade = MyBase.Columns("PGrade")
            Me.columnMGrade = MyBase.Columns("MGrade")
            Me.columnPFinalGrade = MyBase.Columns("PFinalGrade")
            Me.columnFGrade = MyBase.Columns("FGrade")
            Me.columnAverage = MyBase.Columns("Average")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnRegion = MyBase.Columns("Region")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnstrand = MyBase.Columns("strand")
            Me.columndepedlogo = MyBase.Columns("depedlogo")
            Me.columnschoolLogo = MyBase.Columns("schoolLogo")
            Me.columndistrict = MyBase.Columns("district")
            Me.columnprincipalPre = MyBase.Columns("principalPre")
            Me.columnprincipalGS = MyBase.Columns("principalGS")
            Me.columnprincipalJHS = MyBase.Columns("principalJHS")
            Me.columnprincipalSHS = MyBase.Columns("principalSHS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudeName = New Global.System.Data.DataColumn("StudeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudeName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnBirthPlace = New Global.System.Data.DataColumn("BirthPlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthPlace)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnAdviser = New Global.System.Data.DataColumn("Adviser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdviser)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnTrack = New Global.System.Data.DataColumn("Track", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrack)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnPGrade = New Global.System.Data.DataColumn("PGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGrade)
            Me.columnMGrade = New Global.System.Data.DataColumn("MGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMGrade)
            Me.columnPFinalGrade = New Global.System.Data.DataColumn("PFinalGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPFinalGrade)
            Me.columnFGrade = New Global.System.Data.DataColumn("FGrade", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGrade)
            Me.columnAverage = New Global.System.Data.DataColumn("Average", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverage)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnstrand = New Global.System.Data.DataColumn("strand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrand)
            Me.columndepedlogo = New Global.System.Data.DataColumn("depedlogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndepedlogo)
            Me.columnschoolLogo = New Global.System.Data.DataColumn("schoolLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolLogo)
            Me.columndistrict = New Global.System.Data.DataColumn("district", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndistrict)
            Me.columnprincipalPre = New Global.System.Data.DataColumn("principalPre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprincipalPre)
            Me.columnprincipalGS = New Global.System.Data.DataColumn("principalGS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprincipalGS)
            Me.columnprincipalJHS = New Global.System.Data.DataColumn("principalJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprincipalJHS)
            Me.columnprincipalSHS = New Global.System.Data.DataColumn("principalSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprincipalSHS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudeName.MaxLength = 183
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnBirthDate.AllowDBNull = false
            Me.columnAge.AllowDBNull = false
            Me.columnAge.MaxLength = 2
            Me.columnBirthPlace.AllowDBNull = false
            Me.columnBirthPlace.MaxLength = 250
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 150
            Me.columnCourse.MaxLength = 250
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnAdviser.AllowDBNull = false
            Me.columnAdviser.MaxLength = 100
            Me.columnSection.MaxLength = 150
            Me.columnTrack.AllowDBNull = false
            Me.columnTrack.MaxLength = 100
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 150
            Me.columnPGrade.AllowDBNull = false
            Me.columnMGrade.AllowDBNull = false
            Me.columnPFinalGrade.AllowDBNull = false
            Me.columnFGrade.AllowDBNull = false
            Me.columnAverage.AllowDBNull = false
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnRegion.MaxLength = 45
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnstrand.AllowDBNull = false
            Me.columnstrand.MaxLength = 150
            Me.columndistrict.AllowDBNull = false
            Me.columndistrict.MaxLength = 150
            Me.columnprincipalPre.AllowDBNull = false
            Me.columnprincipalPre.MaxLength = 65
            Me.columnprincipalGS.AllowDBNull = false
            Me.columnprincipalGS.MaxLength = 65
            Me.columnprincipalJHS.AllowDBNull = false
            Me.columnprincipalJHS.MaxLength = 65
            Me.columnprincipalSHS.AllowDBNull = false
            Me.columnprincipalSHS.MaxLength = 65
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRatingReportRow() As RatingReportRow
            Return CType(Me.NewRow,RatingReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RatingReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RatingReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RatingReportRowChangedEvent) Is Nothing) Then
                RaiseEvent RatingReportRowChanged(Me, New RatingReportRowChangeEvent(CType(e.Row,RatingReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RatingReportRowChangingEvent) Is Nothing) Then
                RaiseEvent RatingReportRowChanging(Me, New RatingReportRowChangeEvent(CType(e.Row,RatingReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RatingReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent RatingReportRowDeleted(Me, New RatingReportRowChangeEvent(CType(e.Row,RatingReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RatingReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent RatingReportRowDeleting(Me, New RatingReportRowChangeEvent(CType(e.Row,RatingReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRatingReportRow(ByVal row As RatingReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RatingReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class idCardDataTable
        Inherits Global.System.Data.TypedTableBase(Of idCardRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnmiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnschoolLogo As Global.System.Data.DataColumn
        
        Private columnprofImage As Global.System.Data.DataColumn
        
        Private columnGuardianContact As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "idCard"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property middleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property profImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprofImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As idCardRow
            Get
                Return CType(Me.Rows(index),idCardRow)
            End Get
        End Property
        
        Public Event idCardRowChanging As idCardRowChangeEventHandler
        
        Public Event idCardRowChanged As idCardRowChangeEventHandler
        
        Public Event idCardRowDeleting As idCardRowChangeEventHandler
        
        Public Event idCardRowDeleted As idCardRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddidCardRow(ByVal row As idCardRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddidCardRow(ByVal StudentNumber As String, ByVal FirstName As String, ByVal middleName As String, ByVal LastName As String, ByVal Guardian As String, ByVal YearLevel As String, ByVal Section As String, ByVal SchoolHead As String, ByVal sHeadPosition As String, ByVal SchoolName As String, ByVal SchoolAddress As String, ByVal schoolLogo() As Byte, ByVal profImage() As Byte, ByVal GuardianContact As String) As idCardRow
            Dim rowidCardRow As idCardRow = CType(Me.NewRow,idCardRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, FirstName, middleName, LastName, Guardian, YearLevel, Section, SchoolHead, sHeadPosition, SchoolName, SchoolAddress, schoolLogo, profImage, GuardianContact}
            rowidCardRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowidCardRow)
            Return rowidCardRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As idCardRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),idCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As idCardDataTable = CType(MyBase.Clone,idCardDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New idCardDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnmiddleName = MyBase.Columns("middleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnschoolLogo = MyBase.Columns("schoolLogo")
            Me.columnprofImage = MyBase.Columns("profImage")
            Me.columnGuardianContact = MyBase.Columns("GuardianContact")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnmiddleName = New Global.System.Data.DataColumn("middleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnschoolLogo = New Global.System.Data.DataColumn("schoolLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolLogo)
            Me.columnprofImage = New Global.System.Data.DataColumn("profImage", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprofImage)
            Me.columnGuardianContact = New Global.System.Data.DataColumn("GuardianContact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianContact)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFirstName.MaxLength = 60
            Me.columnmiddleName.MaxLength = 1
            Me.columnLastName.MaxLength = 60
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 150
            Me.columnYearLevel.MaxLength = 45
            Me.columnSection.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnGuardianContact.AllowDBNull = false
            Me.columnGuardianContact.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewidCardRow() As idCardRow
            Return CType(Me.NewRow,idCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New idCardRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(idCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.idCardRowChangedEvent) Is Nothing) Then
                RaiseEvent idCardRowChanged(Me, New idCardRowChangeEvent(CType(e.Row,idCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.idCardRowChangingEvent) Is Nothing) Then
                RaiseEvent idCardRowChanging(Me, New idCardRowChangeEvent(CType(e.Row,idCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.idCardRowDeletedEvent) Is Nothing) Then
                RaiseEvent idCardRowDeleted(Me, New idCardRowChangeEvent(CType(e.Row,idCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.idCardRowDeletingEvent) Is Nothing) Then
                RaiseEvent idCardRowDeleting(Me, New idCardRowChangeEvent(CType(e.Row,idCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveidCardRow(ByVal row As idCardRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "idCardDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ls_distributionDataTable
        Inherits Global.System.Data.TypedTableBase(Of ls_distributionRow)
        
        Private columndistID As Global.System.Data.DataColumn
        
        Private columntransactionNo As Global.System.Data.DataColumn
        
        Private columntransactionDate As Global.System.Data.DataColumn
        
        Private columnproductCode As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnitemName As Global.System.Data.DataColumn
        
        Private columnEmployeeName As Global.System.Data.DataColumn
        
        Private columnIDNumber As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ls_distribution"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property distIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndistID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transactionNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransactionNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transactionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransactionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property productCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproductCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ls_distributionRow
            Get
                Return CType(Me.Rows(index),ls_distributionRow)
            End Get
        End Property
        
        Public Event ls_distributionRowChanging As ls_distributionRowChangeEventHandler
        
        Public Event ls_distributionRowChanged As ls_distributionRowChangeEventHandler
        
        Public Event ls_distributionRowDeleting As ls_distributionRowChangeEventHandler
        
        Public Event ls_distributionRowDeleted As ls_distributionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addls_distributionRow(ByVal row As ls_distributionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addls_distributionRow(ByVal distID As UInteger, ByVal transactionNo As String, ByVal transactionDate As Date, ByVal productCode As String, ByVal description As String, ByVal qty As UInteger, ByVal itemName As String, ByVal EmployeeName As String, ByVal IDNumber As String, ByVal letterHead() As Byte) As ls_distributionRow
            Dim rowls_distributionRow As ls_distributionRow = CType(Me.NewRow,ls_distributionRow)
            Dim columnValuesArray() As Object = New Object() {distID, transactionNo, transactionDate, productCode, description, qty, itemName, EmployeeName, IDNumber, letterHead}
            rowls_distributionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowls_distributionRow)
            Return rowls_distributionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBydistID(ByVal distID As UInteger) As ls_distributionRow
            Return CType(Me.Rows.Find(New Object() {distID}),ls_distributionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ls_distributionDataTable = CType(MyBase.Clone,ls_distributionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ls_distributionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndistID = MyBase.Columns("distID")
            Me.columntransactionNo = MyBase.Columns("transactionNo")
            Me.columntransactionDate = MyBase.Columns("transactionDate")
            Me.columnproductCode = MyBase.Columns("productCode")
            Me.columndescription = MyBase.Columns("description")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnitemName = MyBase.Columns("itemName")
            Me.columnEmployeeName = MyBase.Columns("EmployeeName")
            Me.columnIDNumber = MyBase.Columns("IDNumber")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndistID = New Global.System.Data.DataColumn("distID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndistID)
            Me.columntransactionNo = New Global.System.Data.DataColumn("transactionNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransactionNo)
            Me.columntransactionDate = New Global.System.Data.DataColumn("transactionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransactionDate)
            Me.columnproductCode = New Global.System.Data.DataColumn("productCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproductCode)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnitemName = New Global.System.Data.DataColumn("itemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemName)
            Me.columnEmployeeName = New Global.System.Data.DataColumn("EmployeeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeName)
            Me.columnIDNumber = New Global.System.Data.DataColumn("IDNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDNumber)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columndistID}, true))
            Me.columndistID.AllowDBNull = false
            Me.columndistID.Unique = true
            Me.columntransactionNo.AllowDBNull = false
            Me.columntransactionNo.MaxLength = 45
            Me.columntransactionDate.AllowDBNull = false
            Me.columnproductCode.AllowDBNull = false
            Me.columnproductCode.MaxLength = 45
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 65
            Me.columnqty.AllowDBNull = false
            Me.columnitemName.MaxLength = 45
            Me.columnEmployeeName.MaxLength = 91
            Me.columnIDNumber.AllowDBNull = false
            Me.columnIDNumber.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newls_distributionRow() As ls_distributionRow
            Return CType(Me.NewRow,ls_distributionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ls_distributionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ls_distributionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ls_distributionRowChangedEvent) Is Nothing) Then
                RaiseEvent ls_distributionRowChanged(Me, New ls_distributionRowChangeEvent(CType(e.Row,ls_distributionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ls_distributionRowChangingEvent) Is Nothing) Then
                RaiseEvent ls_distributionRowChanging(Me, New ls_distributionRowChangeEvent(CType(e.Row,ls_distributionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ls_distributionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ls_distributionRowDeleted(Me, New ls_distributionRowChangeEvent(CType(e.Row,ls_distributionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ls_distributionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ls_distributionRowDeleting(Me, New ls_distributionRowChangeEvent(CType(e.Row,ls_distributionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removels_distributionRow(ByVal row As ls_distributionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ls_distributionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OnlineEnrolleesDataTable
        Inherits Global.System.Data.TypedTableBase(Of OnlineEnrolleesRow)
        
        Private columnoeID As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnfileAttachment As Global.System.Data.DataColumn
        
        Private columnenrolStatus As Global.System.Data.DataColumn
        
        Private columndownPayment As Global.System.Data.DataColumn
        
        Private columndownPaymentStat As Global.System.Data.DataColumn
        
        Private columntrack As Global.System.Data.DataColumn
        
        Private columnstrand As Global.System.Data.DataColumn
        
        Private columnStudentNumber1 As Global.System.Data.DataColumn
        
        Private columnFirstName1 As Global.System.Data.DataColumn
        
        Private columnMiddleName1 As Global.System.Data.DataColumn
        
        Private columnLastName1 As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnCivilStatus As Global.System.Data.DataColumn
        
        Private columnBirthPlace As Global.System.Data.DataColumn
        
        Private columnCitizenship As Global.System.Data.DataColumn
        
        Private columnReligion As Global.System.Data.DataColumn
        
        Private columnBloodType As Global.System.Data.DataColumn
        
        Private columnTelNumber As Global.System.Data.DataColumn
        
        Private columnMobileNumber As Global.System.Data.DataColumn
        
        Private columnHighSchool As Global.System.Data.DataColumn
        
        Private columnHSAddress As Global.System.Data.DataColumn
        
        Private columnCollege As Global.System.Data.DataColumn
        
        Private columnCAddress As Global.System.Data.DataColumn
        
        Private columnRequirements As Global.System.Data.DataColumn
        
        Private columnEncoder As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnAdmissionDate As Global.System.Data.DataColumn
        
        Private columnGraduationDate As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnGuardianContact As Global.System.Data.DataColumn
        
        Private columnGuardianAddress As Global.System.Data.DataColumn
        
        Private columnImagePath As Global.System.Data.DataColumn
        
        Private columnCourse1 As Global.System.Data.DataColumn
        
        Private columnElementary As Global.System.Data.DataColumn
        
        Private columnElemAddress As Global.System.Data.DataColumn
        
        Private columnGuardianRelationship As Global.System.Data.DataColumn
        
        Private columnGuardianTelNo As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnFather As Global.System.Data.DataColumn
        
        Private columnFOccupation As Global.System.Data.DataColumn
        
        Private columnMother As Global.System.Data.DataColumn
        
        Private columnMOccupation As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnPronoun As Global.System.Data.DataColumn
        
        Private columnPronoun2 As Global.System.Data.DataColumn
        
        Private columnPronoun3 As Global.System.Data.DataColumn
        
        Private columnEthnicity As Global.System.Data.DataColumn
        
        Private columnParentsMonthly As Global.System.Data.DataColumn
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnBrgy As Global.System.Data.DataColumn
        
        Private columnSitio As Global.System.Data.DataColumn
        
        Private columnsettingsID As Global.System.Data.DataColumn
        
        Private columnguardianOccupation As Global.System.Data.DataColumn
        
        Private columnelemSY As Global.System.Data.DataColumn
        
        Private columnelemAve As Global.System.Data.DataColumn
        
        Private columnelemGradDate As Global.System.Data.DataColumn
        
        Private columneligibility As Global.System.Data.DataColumn
        
        Private columnjhsAve As Global.System.Data.DataColumn
        
        Private columnjhsGradDate As Global.System.Data.DataColumn
        
        Private columnelemSchoolID As Global.System.Data.DataColumn
        
        Private columnjhsSchoolID As Global.System.Data.DataColumn
        
        Private columnpeptRating As Global.System.Data.DataColumn
        
        Private columnpeptExamDate As Global.System.Data.DataColumn
        
        Private columnalsRating As Global.System.Data.DataColumn
        
        Private columnalsTestingCenter As Global.System.Data.DataColumn
        
        Private columnnameExt As Global.System.Data.DataColumn
        
        Private columnsettingsID1 As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnSDS As Global.System.Data.DataColumn
        
        Private columnSchoolIDSHS As Global.System.Data.DataColumn
        
        Private columnSchoolIDJHS As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        Private columnRegistrarSHS As Global.System.Data.DataColumn
        
        Private columnRegistrarJHS As Global.System.Data.DataColumn
        
        Private columnGuidanceSHS As Global.System.Data.DataColumn
        
        Private columnGuidanceJHS As Global.System.Data.DataColumn
        
        Private columnmember1Prop As Global.System.Data.DataColumn
        
        Private columnmember2Prop As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        Private columnadas1 As Global.System.Data.DataColumn
        
        Private columnadas1Position As Global.System.Data.DataColumn
        
        Private columnsdsPosition As Global.System.Data.DataColumn
        
        Private columnregionAddress As Global.System.Data.DataColumn
        
        Private columnschoolLogo As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columndepedLogo As Global.System.Data.DataColumn
        
        Private columnregionalDirector As Global.System.Data.DataColumn
        
        Private columndirectorPosition As Global.System.Data.DataColumn
        
        Private columndivisionAddress As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OnlineEnrollees"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fileAttachmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfileAttachment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrolStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrolStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property downPaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndownPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property downPaymentStatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndownPaymentStat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumber1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CivilStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCivilStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthPlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CitizenshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCitizenship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReligionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReligion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BloodTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBloodType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MobileNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobileNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HighSchoolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHighSchool
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HSAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHSAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CollegeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCollege
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequirementsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequirements
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EncoderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEncoder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdmissionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdmissionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GraduationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGraduationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImagePathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImagePath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Course1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElementaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElementary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElemAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElemAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianRelationshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianRelationship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianTelNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianTelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FatherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFather
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMother
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PronounColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pronoun2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pronoun3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EthnicityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEthnicity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentsMonthlyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentsMonthly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BrgyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrgy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SitioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSitio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property guardianOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnguardianOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elemSYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelemSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elemAveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelemAve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elemGradDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelemGradDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eligibilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneligibility
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jhsAveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjhsAve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jhsGradDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjhsGradDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elemSchoolIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelemSchoolID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jhsSchoolIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjhsSchoolID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property peptRatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpeptRating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property peptExamDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpeptExamDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alsRatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalsRating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alsTestingCenterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalsTestingCenter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameExtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnameExt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsID1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SDSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSDS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolIDSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolIDSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolIDJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolIDJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrarJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuidanceSHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuidanceSHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuidanceJHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuidanceJHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property member1PropColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmember1Prop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property member2PropColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmember2Prop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adas1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnadas1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adas1PositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadas1Position
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sdsPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsdsPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regionAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregionAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property depedLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndepedLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regionalDirectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregionalDirector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property directorPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndirectorPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property divisionAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndivisionAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OnlineEnrolleesRow
            Get
                Return CType(Me.Rows(index),OnlineEnrolleesRow)
            End Get
        End Property
        
        Public Event OnlineEnrolleesRowChanging As OnlineEnrolleesRowChangeEventHandler
        
        Public Event OnlineEnrolleesRowChanged As OnlineEnrolleesRowChangeEventHandler
        
        Public Event OnlineEnrolleesRowDeleting As OnlineEnrolleesRowChangeEventHandler
        
        Public Event OnlineEnrolleesRowDeleted As OnlineEnrolleesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOnlineEnrolleesRow(ByVal row As OnlineEnrolleesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOnlineEnrolleesRow( _
                    ByVal oeID As UInteger,  _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Course As String,  _
                    ByVal YearLevel As String,  _
                    ByVal Semester As String,  _
                    ByVal SY As String,  _
                    ByVal fileAttachment As String,  _
                    ByVal enrolStatus As String,  _
                    ByVal downPayment As Double,  _
                    ByVal downPaymentStat As String,  _
                    ByVal track As String,  _
                    ByVal strand As String,  _
                    ByVal StudentNumber1 As String,  _
                    ByVal FirstName1 As String,  _
                    ByVal MiddleName1 As String,  _
                    ByVal LastName1 As String,  _
                    ByVal Sex As String,  _
                    ByVal CivilStatus As String,  _
                    ByVal BirthPlace As String,  _
                    ByVal Citizenship As String,  _
                    ByVal Religion As String,  _
                    ByVal BloodType As String,  _
                    ByVal TelNumber As String,  _
                    ByVal MobileNumber As String,  _
                    ByVal HighSchool As String,  _
                    ByVal HSAddress As String,  _
                    ByVal College As String,  _
                    ByVal CAddress As String,  _
                    ByVal Requirements As String,  _
                    ByVal Encoder As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal AdmissionDate As Date,  _
                    ByVal GraduationDate As String,  _
                    ByVal Guardian As String,  _
                    ByVal GuardianContact As String,  _
                    ByVal GuardianAddress As String,  _
                    ByVal ImagePath() As Byte,  _
                    ByVal Course1 As String,  _
                    ByVal Elementary As String,  _
                    ByVal ElemAddress As String,  _
                    ByVal GuardianRelationship As String,  _
                    ByVal GuardianTelNo As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Father As String,  _
                    ByVal FOccupation As String,  _
                    ByVal Mother As String,  _
                    ByVal MOccupation As String,  _
                    ByVal Age As String,  _
                    ByVal Title As String,  _
                    ByVal Pronoun As String,  _
                    ByVal Pronoun2 As String,  _
                    ByVal Pronoun3 As String,  _
                    ByVal Ethnicity As String,  _
                    ByVal ParentsMonthly As Double,  _
                    ByVal Province As String,  _
                    ByVal City As String,  _
                    ByVal Brgy As String,  _
                    ByVal Sitio As String,  _
                    ByVal settingsID As UInteger,  _
                    ByVal guardianOccupation As String,  _
                    ByVal elemSY As String,  _
                    ByVal elemAve As String,  _
                    ByVal elemGradDate As String,  _
                    ByVal eligibility As String,  _
                    ByVal jhsAve As String,  _
                    ByVal jhsGradDate As String,  _
                    ByVal elemSchoolID As String,  _
                    ByVal jhsSchoolID As String,  _
                    ByVal peptRating As String,  _
                    ByVal peptExamDate As String,  _
                    ByVal alsRating As String,  _
                    ByVal alsTestingCenter As String,  _
                    ByVal nameExt As String,  _
                    ByVal settingsID1 As UInteger,  _
                    ByVal Division As String,  _
                    ByVal SDS As String,  _
                    ByVal SchoolIDSHS As String,  _
                    ByVal SchoolIDJHS As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal PropertyCustodian As String,  _
                    ByVal RegistrarSHS As String,  _
                    ByVal RegistrarJHS As String,  _
                    ByVal GuidanceSHS As String,  _
                    ByVal GuidanceJHS As String,  _
                    ByVal member1Prop As String,  _
                    ByVal member2Prop As String,  _
                    ByVal _Region As String,  _
                    ByVal adas1 As String,  _
                    ByVal adas1Position As String,  _
                    ByVal sdsPosition As String,  _
                    ByVal regionAddress As String,  _
                    ByVal schoolLogo() As Byte,  _
                    ByVal letterHead() As Byte,  _
                    ByVal depedLogo() As Byte,  _
                    ByVal regionalDirector As String,  _
                    ByVal directorPosition As String,  _
                    ByVal divisionAddress As String) As OnlineEnrolleesRow
            Dim rowOnlineEnrolleesRow As OnlineEnrolleesRow = CType(Me.NewRow,OnlineEnrolleesRow)
            Dim columnValuesArray() As Object = New Object() {oeID, StudentNumber, FirstName, MiddleName, LastName, Course, YearLevel, Semester, SY, fileAttachment, enrolStatus, downPayment, downPaymentStat, track, strand, StudentNumber1, FirstName1, MiddleName1, LastName1, Sex, CivilStatus, BirthPlace, Citizenship, Religion, BloodType, TelNumber, MobileNumber, HighSchool, HSAddress, College, CAddress, Requirements, Encoder, BirthDate, AdmissionDate, GraduationDate, Guardian, GuardianContact, GuardianAddress, ImagePath, Course1, Elementary, ElemAddress, GuardianRelationship, GuardianTelNo, EmailAddress, Father, FOccupation, Mother, MOccupation, Age, Title, Pronoun, Pronoun2, Pronoun3, Ethnicity, ParentsMonthly, Province, City, Brgy, Sitio, settingsID, guardianOccupation, elemSY, elemAve, elemGradDate, eligibility, jhsAve, jhsGradDate, elemSchoolID, jhsSchoolID, peptRating, peptExamDate, alsRating, alsTestingCenter, nameExt, settingsID1, Division, SDS, SchoolIDSHS, SchoolIDJHS, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, PropertyCustodian, RegistrarSHS, RegistrarJHS, GuidanceSHS, GuidanceJHS, member1Prop, member2Prop, _Region, adas1, adas1Position, sdsPosition, regionAddress, schoolLogo, letterHead, depedLogo, regionalDirector, directorPosition, divisionAddress}
            rowOnlineEnrolleesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOnlineEnrolleesRow)
            Return rowOnlineEnrolleesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByoeIDStudentNumber1settingsID1(ByVal oeID As UInteger, ByVal StudentNumber1 As String, ByVal settingsID1 As UInteger) As OnlineEnrolleesRow
            Return CType(Me.Rows.Find(New Object() {oeID, StudentNumber1, settingsID1}),OnlineEnrolleesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OnlineEnrolleesDataTable = CType(MyBase.Clone,OnlineEnrolleesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OnlineEnrolleesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnoeID = MyBase.Columns("oeID")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnfileAttachment = MyBase.Columns("fileAttachment")
            Me.columnenrolStatus = MyBase.Columns("enrolStatus")
            Me.columndownPayment = MyBase.Columns("downPayment")
            Me.columndownPaymentStat = MyBase.Columns("downPaymentStat")
            Me.columntrack = MyBase.Columns("track")
            Me.columnstrand = MyBase.Columns("strand")
            Me.columnStudentNumber1 = MyBase.Columns("StudentNumber1")
            Me.columnFirstName1 = MyBase.Columns("FirstName1")
            Me.columnMiddleName1 = MyBase.Columns("MiddleName1")
            Me.columnLastName1 = MyBase.Columns("LastName1")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnCivilStatus = MyBase.Columns("CivilStatus")
            Me.columnBirthPlace = MyBase.Columns("BirthPlace")
            Me.columnCitizenship = MyBase.Columns("Citizenship")
            Me.columnReligion = MyBase.Columns("Religion")
            Me.columnBloodType = MyBase.Columns("BloodType")
            Me.columnTelNumber = MyBase.Columns("TelNumber")
            Me.columnMobileNumber = MyBase.Columns("MobileNumber")
            Me.columnHighSchool = MyBase.Columns("HighSchool")
            Me.columnHSAddress = MyBase.Columns("HSAddress")
            Me.columnCollege = MyBase.Columns("College")
            Me.columnCAddress = MyBase.Columns("CAddress")
            Me.columnRequirements = MyBase.Columns("Requirements")
            Me.columnEncoder = MyBase.Columns("Encoder")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnAdmissionDate = MyBase.Columns("AdmissionDate")
            Me.columnGraduationDate = MyBase.Columns("GraduationDate")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnGuardianContact = MyBase.Columns("GuardianContact")
            Me.columnGuardianAddress = MyBase.Columns("GuardianAddress")
            Me.columnImagePath = MyBase.Columns("ImagePath")
            Me.columnCourse1 = MyBase.Columns("Course1")
            Me.columnElementary = MyBase.Columns("Elementary")
            Me.columnElemAddress = MyBase.Columns("ElemAddress")
            Me.columnGuardianRelationship = MyBase.Columns("GuardianRelationship")
            Me.columnGuardianTelNo = MyBase.Columns("GuardianTelNo")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnFather = MyBase.Columns("Father")
            Me.columnFOccupation = MyBase.Columns("FOccupation")
            Me.columnMother = MyBase.Columns("Mother")
            Me.columnMOccupation = MyBase.Columns("MOccupation")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnPronoun = MyBase.Columns("Pronoun")
            Me.columnPronoun2 = MyBase.Columns("Pronoun2")
            Me.columnPronoun3 = MyBase.Columns("Pronoun3")
            Me.columnEthnicity = MyBase.Columns("Ethnicity")
            Me.columnParentsMonthly = MyBase.Columns("ParentsMonthly")
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnCity = MyBase.Columns("City")
            Me.columnBrgy = MyBase.Columns("Brgy")
            Me.columnSitio = MyBase.Columns("Sitio")
            Me.columnsettingsID = MyBase.Columns("settingsID")
            Me.columnguardianOccupation = MyBase.Columns("guardianOccupation")
            Me.columnelemSY = MyBase.Columns("elemSY")
            Me.columnelemAve = MyBase.Columns("elemAve")
            Me.columnelemGradDate = MyBase.Columns("elemGradDate")
            Me.columneligibility = MyBase.Columns("eligibility")
            Me.columnjhsAve = MyBase.Columns("jhsAve")
            Me.columnjhsGradDate = MyBase.Columns("jhsGradDate")
            Me.columnelemSchoolID = MyBase.Columns("elemSchoolID")
            Me.columnjhsSchoolID = MyBase.Columns("jhsSchoolID")
            Me.columnpeptRating = MyBase.Columns("peptRating")
            Me.columnpeptExamDate = MyBase.Columns("peptExamDate")
            Me.columnalsRating = MyBase.Columns("alsRating")
            Me.columnalsTestingCenter = MyBase.Columns("alsTestingCenter")
            Me.columnnameExt = MyBase.Columns("nameExt")
            Me.columnsettingsID1 = MyBase.Columns("settingsID1")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnSDS = MyBase.Columns("SDS")
            Me.columnSchoolIDSHS = MyBase.Columns("SchoolIDSHS")
            Me.columnSchoolIDJHS = MyBase.Columns("SchoolIDJHS")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
            Me.columnRegistrarSHS = MyBase.Columns("RegistrarSHS")
            Me.columnRegistrarJHS = MyBase.Columns("RegistrarJHS")
            Me.columnGuidanceSHS = MyBase.Columns("GuidanceSHS")
            Me.columnGuidanceJHS = MyBase.Columns("GuidanceJHS")
            Me.columnmember1Prop = MyBase.Columns("member1Prop")
            Me.columnmember2Prop = MyBase.Columns("member2Prop")
            Me.columnRegion = MyBase.Columns("Region")
            Me.columnadas1 = MyBase.Columns("adas1")
            Me.columnadas1Position = MyBase.Columns("adas1Position")
            Me.columnsdsPosition = MyBase.Columns("sdsPosition")
            Me.columnregionAddress = MyBase.Columns("regionAddress")
            Me.columnschoolLogo = MyBase.Columns("schoolLogo")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columndepedLogo = MyBase.Columns("depedLogo")
            Me.columnregionalDirector = MyBase.Columns("regionalDirector")
            Me.columndirectorPosition = MyBase.Columns("directorPosition")
            Me.columndivisionAddress = MyBase.Columns("divisionAddress")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnoeID = New Global.System.Data.DataColumn("oeID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoeID)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnfileAttachment = New Global.System.Data.DataColumn("fileAttachment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfileAttachment)
            Me.columnenrolStatus = New Global.System.Data.DataColumn("enrolStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrolStatus)
            Me.columndownPayment = New Global.System.Data.DataColumn("downPayment", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndownPayment)
            Me.columndownPaymentStat = New Global.System.Data.DataColumn("downPaymentStat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndownPaymentStat)
            Me.columntrack = New Global.System.Data.DataColumn("track", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrack)
            Me.columnstrand = New Global.System.Data.DataColumn("strand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrand)
            Me.columnStudentNumber1 = New Global.System.Data.DataColumn("StudentNumber1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber1)
            Me.columnFirstName1 = New Global.System.Data.DataColumn("FirstName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName1)
            Me.columnMiddleName1 = New Global.System.Data.DataColumn("MiddleName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName1)
            Me.columnLastName1 = New Global.System.Data.DataColumn("LastName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName1)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnCivilStatus = New Global.System.Data.DataColumn("CivilStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCivilStatus)
            Me.columnBirthPlace = New Global.System.Data.DataColumn("BirthPlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthPlace)
            Me.columnCitizenship = New Global.System.Data.DataColumn("Citizenship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCitizenship)
            Me.columnReligion = New Global.System.Data.DataColumn("Religion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReligion)
            Me.columnBloodType = New Global.System.Data.DataColumn("BloodType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBloodType)
            Me.columnTelNumber = New Global.System.Data.DataColumn("TelNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelNumber)
            Me.columnMobileNumber = New Global.System.Data.DataColumn("MobileNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobileNumber)
            Me.columnHighSchool = New Global.System.Data.DataColumn("HighSchool", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHighSchool)
            Me.columnHSAddress = New Global.System.Data.DataColumn("HSAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHSAddress)
            Me.columnCollege = New Global.System.Data.DataColumn("College", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCollege)
            Me.columnCAddress = New Global.System.Data.DataColumn("CAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAddress)
            Me.columnRequirements = New Global.System.Data.DataColumn("Requirements", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequirements)
            Me.columnEncoder = New Global.System.Data.DataColumn("Encoder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEncoder)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnAdmissionDate = New Global.System.Data.DataColumn("AdmissionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdmissionDate)
            Me.columnGraduationDate = New Global.System.Data.DataColumn("GraduationDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGraduationDate)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnGuardianContact = New Global.System.Data.DataColumn("GuardianContact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianContact)
            Me.columnGuardianAddress = New Global.System.Data.DataColumn("GuardianAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianAddress)
            Me.columnImagePath = New Global.System.Data.DataColumn("ImagePath", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImagePath)
            Me.columnCourse1 = New Global.System.Data.DataColumn("Course1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse1)
            Me.columnElementary = New Global.System.Data.DataColumn("Elementary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElementary)
            Me.columnElemAddress = New Global.System.Data.DataColumn("ElemAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElemAddress)
            Me.columnGuardianRelationship = New Global.System.Data.DataColumn("GuardianRelationship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianRelationship)
            Me.columnGuardianTelNo = New Global.System.Data.DataColumn("GuardianTelNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianTelNo)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnFather = New Global.System.Data.DataColumn("Father", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFather)
            Me.columnFOccupation = New Global.System.Data.DataColumn("FOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOccupation)
            Me.columnMother = New Global.System.Data.DataColumn("Mother", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMother)
            Me.columnMOccupation = New Global.System.Data.DataColumn("MOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOccupation)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnPronoun = New Global.System.Data.DataColumn("Pronoun", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun)
            Me.columnPronoun2 = New Global.System.Data.DataColumn("Pronoun2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun2)
            Me.columnPronoun3 = New Global.System.Data.DataColumn("Pronoun3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun3)
            Me.columnEthnicity = New Global.System.Data.DataColumn("Ethnicity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEthnicity)
            Me.columnParentsMonthly = New Global.System.Data.DataColumn("ParentsMonthly", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentsMonthly)
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnBrgy = New Global.System.Data.DataColumn("Brgy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrgy)
            Me.columnSitio = New Global.System.Data.DataColumn("Sitio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSitio)
            Me.columnsettingsID = New Global.System.Data.DataColumn("settingsID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID)
            Me.columnguardianOccupation = New Global.System.Data.DataColumn("guardianOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnguardianOccupation)
            Me.columnelemSY = New Global.System.Data.DataColumn("elemSY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelemSY)
            Me.columnelemAve = New Global.System.Data.DataColumn("elemAve", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelemAve)
            Me.columnelemGradDate = New Global.System.Data.DataColumn("elemGradDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelemGradDate)
            Me.columneligibility = New Global.System.Data.DataColumn("eligibility", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneligibility)
            Me.columnjhsAve = New Global.System.Data.DataColumn("jhsAve", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjhsAve)
            Me.columnjhsGradDate = New Global.System.Data.DataColumn("jhsGradDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjhsGradDate)
            Me.columnelemSchoolID = New Global.System.Data.DataColumn("elemSchoolID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelemSchoolID)
            Me.columnjhsSchoolID = New Global.System.Data.DataColumn("jhsSchoolID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjhsSchoolID)
            Me.columnpeptRating = New Global.System.Data.DataColumn("peptRating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpeptRating)
            Me.columnpeptExamDate = New Global.System.Data.DataColumn("peptExamDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpeptExamDate)
            Me.columnalsRating = New Global.System.Data.DataColumn("alsRating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalsRating)
            Me.columnalsTestingCenter = New Global.System.Data.DataColumn("alsTestingCenter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalsTestingCenter)
            Me.columnnameExt = New Global.System.Data.DataColumn("nameExt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnameExt)
            Me.columnsettingsID1 = New Global.System.Data.DataColumn("settingsID1", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID1)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnSDS = New Global.System.Data.DataColumn("SDS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSDS)
            Me.columnSchoolIDSHS = New Global.System.Data.DataColumn("SchoolIDSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolIDSHS)
            Me.columnSchoolIDJHS = New Global.System.Data.DataColumn("SchoolIDJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolIDJHS)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columnRegistrarSHS = New Global.System.Data.DataColumn("RegistrarSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarSHS)
            Me.columnRegistrarJHS = New Global.System.Data.DataColumn("RegistrarJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrarJHS)
            Me.columnGuidanceSHS = New Global.System.Data.DataColumn("GuidanceSHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuidanceSHS)
            Me.columnGuidanceJHS = New Global.System.Data.DataColumn("GuidanceJHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuidanceJHS)
            Me.columnmember1Prop = New Global.System.Data.DataColumn("member1Prop", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmember1Prop)
            Me.columnmember2Prop = New Global.System.Data.DataColumn("member2Prop", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmember2Prop)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnadas1 = New Global.System.Data.DataColumn("adas1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadas1)
            Me.columnadas1Position = New Global.System.Data.DataColumn("adas1Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadas1Position)
            Me.columnsdsPosition = New Global.System.Data.DataColumn("sdsPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsdsPosition)
            Me.columnregionAddress = New Global.System.Data.DataColumn("regionAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregionAddress)
            Me.columnschoolLogo = New Global.System.Data.DataColumn("schoolLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolLogo)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columndepedLogo = New Global.System.Data.DataColumn("depedLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndepedLogo)
            Me.columnregionalDirector = New Global.System.Data.DataColumn("regionalDirector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregionalDirector)
            Me.columndirectorPosition = New Global.System.Data.DataColumn("directorPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirectorPosition)
            Me.columndivisionAddress = New Global.System.Data.DataColumn("divisionAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndivisionAddress)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnoeID, Me.columnStudentNumber1, Me.columnsettingsID1}, true))
            Me.columnoeID.AllowDBNull = false
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFirstName.AllowDBNull = false
            Me.columnFirstName.MaxLength = 45
            Me.columnMiddleName.AllowDBNull = false
            Me.columnMiddleName.MaxLength = 45
            Me.columnLastName.AllowDBNull = false
            Me.columnLastName.MaxLength = 45
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 65
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnSemester.AllowDBNull = false
            Me.columnSemester.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnfileAttachment.AllowDBNull = false
            Me.columnfileAttachment.MaxLength = 255
            Me.columnenrolStatus.AllowDBNull = false
            Me.columnenrolStatus.MaxLength = 45
            Me.columndownPayment.AllowDBNull = false
            Me.columndownPaymentStat.AllowDBNull = false
            Me.columndownPaymentStat.MaxLength = 45
            Me.columntrack.AllowDBNull = false
            Me.columntrack.MaxLength = 100
            Me.columnstrand.AllowDBNull = false
            Me.columnstrand.MaxLength = 100
            Me.columnStudentNumber1.AllowDBNull = false
            Me.columnStudentNumber1.MaxLength = 45
            Me.columnFirstName1.MaxLength = 60
            Me.columnMiddleName1.MaxLength = 60
            Me.columnLastName1.MaxLength = 60
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnCivilStatus.AllowDBNull = false
            Me.columnCivilStatus.MaxLength = 45
            Me.columnBirthPlace.AllowDBNull = false
            Me.columnBirthPlace.MaxLength = 250
            Me.columnCitizenship.AllowDBNull = false
            Me.columnCitizenship.MaxLength = 45
            Me.columnReligion.AllowDBNull = false
            Me.columnReligion.MaxLength = 100
            Me.columnBloodType.AllowDBNull = false
            Me.columnBloodType.MaxLength = 45
            Me.columnTelNumber.AllowDBNull = false
            Me.columnTelNumber.MaxLength = 45
            Me.columnMobileNumber.AllowDBNull = false
            Me.columnMobileNumber.MaxLength = 45
            Me.columnHighSchool.AllowDBNull = false
            Me.columnHighSchool.MaxLength = 150
            Me.columnHSAddress.AllowDBNull = false
            Me.columnHSAddress.MaxLength = 150
            Me.columnCollege.AllowDBNull = false
            Me.columnCollege.MaxLength = 150
            Me.columnCAddress.AllowDBNull = false
            Me.columnCAddress.MaxLength = 150
            Me.columnRequirements.AllowDBNull = false
            Me.columnRequirements.MaxLength = 65535
            Me.columnEncoder.AllowDBNull = false
            Me.columnEncoder.MaxLength = 100
            Me.columnBirthDate.AllowDBNull = false
            Me.columnAdmissionDate.AllowDBNull = false
            Me.columnGraduationDate.AllowDBNull = false
            Me.columnGraduationDate.MaxLength = 45
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 150
            Me.columnGuardianContact.AllowDBNull = false
            Me.columnGuardianContact.MaxLength = 45
            Me.columnGuardianAddress.AllowDBNull = false
            Me.columnGuardianAddress.MaxLength = 250
            Me.columnCourse1.AllowDBNull = false
            Me.columnCourse1.MaxLength = 250
            Me.columnElementary.AllowDBNull = false
            Me.columnElementary.MaxLength = 150
            Me.columnElemAddress.AllowDBNull = false
            Me.columnElemAddress.MaxLength = 150
            Me.columnGuardianRelationship.AllowDBNull = false
            Me.columnGuardianRelationship.MaxLength = 65
            Me.columnGuardianTelNo.AllowDBNull = false
            Me.columnGuardianTelNo.MaxLength = 45
            Me.columnEmailAddress.AllowDBNull = false
            Me.columnEmailAddress.MaxLength = 65
            Me.columnFather.AllowDBNull = false
            Me.columnFather.MaxLength = 65
            Me.columnFOccupation.AllowDBNull = false
            Me.columnFOccupation.MaxLength = 65
            Me.columnMother.AllowDBNull = false
            Me.columnMother.MaxLength = 65
            Me.columnMOccupation.AllowDBNull = false
            Me.columnMOccupation.MaxLength = 65
            Me.columnAge.AllowDBNull = false
            Me.columnAge.MaxLength = 2
            Me.columnTitle.AllowDBNull = false
            Me.columnTitle.MaxLength = 45
            Me.columnPronoun.AllowDBNull = false
            Me.columnPronoun.MaxLength = 45
            Me.columnPronoun2.AllowDBNull = false
            Me.columnPronoun2.MaxLength = 45
            Me.columnPronoun3.AllowDBNull = false
            Me.columnPronoun3.MaxLength = 45
            Me.columnEthnicity.AllowDBNull = false
            Me.columnEthnicity.MaxLength = 100
            Me.columnParentsMonthly.AllowDBNull = false
            Me.columnProvince.AllowDBNull = false
            Me.columnProvince.MaxLength = 65
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 65
            Me.columnBrgy.AllowDBNull = false
            Me.columnBrgy.MaxLength = 65
            Me.columnSitio.AllowDBNull = false
            Me.columnSitio.MaxLength = 65
            Me.columnsettingsID.AllowDBNull = false
            Me.columnguardianOccupation.AllowDBNull = false
            Me.columnguardianOccupation.MaxLength = 150
            Me.columnelemSY.AllowDBNull = false
            Me.columnelemSY.MaxLength = 45
            Me.columnelemAve.AllowDBNull = false
            Me.columnelemAve.MaxLength = 45
            Me.columnelemGradDate.MaxLength = 65
            Me.columneligibility.AllowDBNull = false
            Me.columneligibility.MaxLength = 65
            Me.columnjhsAve.AllowDBNull = false
            Me.columnjhsAve.MaxLength = 45
            Me.columnjhsGradDate.AllowDBNull = false
            Me.columnjhsGradDate.MaxLength = 45
            Me.columnelemSchoolID.AllowDBNull = false
            Me.columnelemSchoolID.MaxLength = 45
            Me.columnjhsSchoolID.AllowDBNull = false
            Me.columnjhsSchoolID.MaxLength = 45
            Me.columnpeptRating.AllowDBNull = false
            Me.columnpeptRating.MaxLength = 45
            Me.columnpeptExamDate.AllowDBNull = false
            Me.columnpeptExamDate.MaxLength = 45
            Me.columnalsRating.AllowDBNull = false
            Me.columnalsRating.MaxLength = 45
            Me.columnalsTestingCenter.AllowDBNull = false
            Me.columnalsTestingCenter.MaxLength = 100
            Me.columnnameExt.AllowDBNull = false
            Me.columnnameExt.MaxLength = 45
            Me.columnsettingsID1.AllowDBNull = false
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 150
            Me.columnSDS.MaxLength = 65
            Me.columnSchoolIDSHS.AllowDBNull = false
            Me.columnSchoolIDSHS.MaxLength = 45
            Me.columnSchoolIDJHS.AllowDBNull = false
            Me.columnSchoolIDJHS.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 65
            Me.columnRegistrarSHS.AllowDBNull = false
            Me.columnRegistrarSHS.MaxLength = 65
            Me.columnRegistrarJHS.AllowDBNull = false
            Me.columnRegistrarJHS.MaxLength = 65
            Me.columnGuidanceSHS.AllowDBNull = false
            Me.columnGuidanceSHS.MaxLength = 65
            Me.columnGuidanceJHS.AllowDBNull = false
            Me.columnGuidanceJHS.MaxLength = 65
            Me.columnmember1Prop.AllowDBNull = false
            Me.columnmember1Prop.MaxLength = 65
            Me.columnmember2Prop.AllowDBNull = false
            Me.columnmember2Prop.MaxLength = 65
            Me.columnRegion.MaxLength = 45
            Me.columnadas1.AllowDBNull = false
            Me.columnadas1.MaxLength = 45
            Me.columnadas1Position.AllowDBNull = false
            Me.columnadas1Position.MaxLength = 65
            Me.columnsdsPosition.AllowDBNull = false
            Me.columnsdsPosition.MaxLength = 45
            Me.columnregionAddress.AllowDBNull = false
            Me.columnregionAddress.MaxLength = 150
            Me.columnregionalDirector.AllowDBNull = false
            Me.columnregionalDirector.MaxLength = 60
            Me.columndirectorPosition.AllowDBNull = false
            Me.columndirectorPosition.MaxLength = 65
            Me.columndivisionAddress.AllowDBNull = false
            Me.columndivisionAddress.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOnlineEnrolleesRow() As OnlineEnrolleesRow
            Return CType(Me.NewRow,OnlineEnrolleesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OnlineEnrolleesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OnlineEnrolleesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OnlineEnrolleesRowChangedEvent) Is Nothing) Then
                RaiseEvent OnlineEnrolleesRowChanged(Me, New OnlineEnrolleesRowChangeEvent(CType(e.Row,OnlineEnrolleesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OnlineEnrolleesRowChangingEvent) Is Nothing) Then
                RaiseEvent OnlineEnrolleesRowChanging(Me, New OnlineEnrolleesRowChangeEvent(CType(e.Row,OnlineEnrolleesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OnlineEnrolleesRowDeletedEvent) Is Nothing) Then
                RaiseEvent OnlineEnrolleesRowDeleted(Me, New OnlineEnrolleesRowChangeEvent(CType(e.Row,OnlineEnrolleesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OnlineEnrolleesRowDeletingEvent) Is Nothing) Then
                RaiseEvent OnlineEnrolleesRowDeleting(Me, New OnlineEnrolleesRowChangeEvent(CType(e.Row,OnlineEnrolleesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOnlineEnrolleesRow(ByVal row As OnlineEnrolleesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet2 = New DataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OnlineEnrolleesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class curriculumRow
        Inherits Global.System.Data.DataRow
        
        Private tablecurriculum As curriculumDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecurriculum = CType(Me.Table,curriculumDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tablecurriculum.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tablecurriculum.descriptionColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lecunit() As String
            Get
                Return CType(Me(Me.tablecurriculum.lecunitColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.lecunitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property labunit() As String
            Get
                Return CType(Me(Me.tablecurriculum.labunitColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.labunitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq() As String
            Get
                Return CType(Me(Me.tablecurriculum.prereqColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.prereqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tablecurriculum.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tablecurriculum.CourseColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemEffective() As String
            Get
                Return CType(Me(Me.tablecurriculum.SemEffectiveColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.SemEffectiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYEffective() As String
            Get
                Return CType(Me(Me.tablecurriculum.SYEffectiveColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.SYEffectiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Effectivity() As String
            Get
                Return CType(Me(Me.tablecurriculum.EffectivityColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.EffectivityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Return CType(Me(Me.tablecurriculum.SemesterColumn),String)
            End Get
            Set
                Me(Me.tablecurriculum.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectid() As UInteger
            Get
                Return CType(Me(Me.tablecurriculum.subjectidColumn),UInteger)
            End Get
            Set
                Me(Me.tablecurriculum.subjectidColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class installmentfeeRow
        Inherits Global.System.Data.DataRow
        
        Private tableinstallmentfee As installmentfeeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinstallmentfee = CType(Me.Table,installmentfeeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property installmentID() As UInteger
            Get
                Return CType(Me(Me.tableinstallmentfee.installmentIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableinstallmentfee.installmentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tableinstallmentfee.CourseColumn),String)
            End Get
            Set
                Me(Me.tableinstallmentfee.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tableinstallmentfee.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tableinstallmentfee.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan() As String
            Get
                Return CType(Me(Me.tableinstallmentfee.PlanColumn),String)
            End Get
            Set
                Me(Me.tableinstallmentfee.PlanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InstallmentFee() As Double
            Get
                Return CType(Me(Me.tableinstallmentfee.InstallmentFeeColumn),Double)
            End Get
            Set
                Me(Me.tableinstallmentfee.InstallmentFeeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class cashierAcctRow
        Inherits Global.System.Data.DataRow
        
        Private tablecashierAcct As cashierAcctDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecashierAcct = CType(Me.Table,cashierAcctDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property username() As String
            Get
                Return CType(Me(Me.tablecashierAcct.usernameColumn),String)
            End Get
            Set
                Me(Me.tablecashierAcct.usernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property password() As String
            Get
                Return CType(Me(Me.tablecashierAcct.passwordColumn),String)
            End Get
            Set
                Me(Me.tablecashierAcct.passwordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property position() As String
            Get
                Return CType(Me(Me.tablecashierAcct.positionColumn),String)
            End Get
            Set
                Me(Me.tablecashierAcct.positionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tablecashierAcct.emailColumn),String)
            End Get
            Set
                Me(Me.tablecashierAcct.emailColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class HonorableDismissalRow
        Inherits Global.System.Data.DataRow
        
        Private tableHonorableDismissal As HonorableDismissalDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHonorableDismissal = CType(Me.Table,HonorableDismissalDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableHonorableDismissal.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableHonorableDismissal.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Return CType(Me(Me.tableHonorableDismissal.TitleColumn),String)
            End Get
            Set
                Me(Me.tableHonorableDismissal.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun() As String
            Get
                Return CType(Me(Me.tableHonorableDismissal.PronounColumn),String)
            End Get
            Set
                Me(Me.tableHonorableDismissal.PronounColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun2() As String
            Get
                Return CType(Me(Me.tableHonorableDismissal.Pronoun2Column),String)
            End Get
            Set
                Me(Me.tableHonorableDismissal.Pronoun2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun3() As String
            Get
                Return CType(Me(Me.tableHonorableDismissal.Pronoun3Column),String)
            End Get
            Set
                Me(Me.tableHonorableDismissal.Pronoun3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudeName() As String
            Get
                Try 
                    Return CType(Me(Me.tableHonorableDismissal.StudeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudeName' in table 'HonorableDismissal' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHonorableDismissal.StudeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableHonorableDismissal.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'HonorableDismissal' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHonorableDismissal.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableHonorableDismissal.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'HonorableDismissal' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHonorableDismissal.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableHonorableDismissal.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'HonorableDismissal' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHonorableDismissal.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudeNameNull() As Boolean
            Return Me.IsNull(Me.tableHonorableDismissal.StudeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudeNameNull()
            Me(Me.tableHonorableDismissal.StudeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableHonorableDismissal.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableHonorableDismissal.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableHonorableDismissal.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableHonorableDismissal.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableHonorableDismissal.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableHonorableDismissal.SYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class get_majorRow
        Inherits Global.System.Data.DataRow
        
        Private tableget_major As get_majorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableget_major = CType(Me.Table,get_majorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Major() As String
            Get
                Return CType(Me(Me.tableget_major.MajorColumn),String)
            End Get
            Set
                Me(Me.tableget_major.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property courseid() As UInteger
            Get
                Return CType(Me(Me.tableget_major.courseidColumn),UInteger)
            End Get
            Set
                Me(Me.tableget_major.courseidColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GradingSheetRow
        Inherits Global.System.Data.DataRow
        
        Private tableGradingSheet As GradingSheetDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGradingSheet = CType(Me.Table,GradingSheetDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableGradingSheet.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradingSheet.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'GradingSheet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradingSheet.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableGradingSheet.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableGradingSheet.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tableGradingSheet.SYColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Return CType(Me(Me.tableGradingSheet.InstructorColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGrade() As String
            Get
                Return CType(Me(Me.tableGradingSheet.PGradeColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.PGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MGrade() As String
            Get
                Return CType(Me(Me.tableGradingSheet.MGradeColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.MGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PFinalGrade() As String
            Get
                Return CType(Me(Me.tableGradingSheet.PFinalGradeColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.PFinalGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGrade() As String
            Get
                Return CType(Me(Me.tableGradingSheet.FGradeColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.FGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Average() As String
            Get
                Return CType(Me(Me.tableGradingSheet.AverageColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.AverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tableGradingSheet.SemColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableGradingSheet.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableGradingSheet.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableGradingSheet.SexColumn),String)
            End Get
            Set
                Me(Me.tableGradingSheet.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGrade1() As Double
            Get
                Return CType(Me(Me.tableGradingSheet.PGrade1Column),Double)
            End Get
            Set
                Me(Me.tableGradingSheet.PGrade1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MGrade1() As Double
            Get
                Return CType(Me(Me.tableGradingSheet.MGrade1Column),Double)
            End Get
            Set
                Me(Me.tableGradingSheet.MGrade1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PFinalGrade1() As Double
            Get
                Return CType(Me(Me.tableGradingSheet.PFinalGrade1Column),Double)
            End Get
            Set
                Me(Me.tableGradingSheet.PFinalGrade1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGrade1() As Double
            Get
                Return CType(Me(Me.tableGradingSheet.FGrade1Column),Double)
            End Get
            Set
                Me(Me.tableGradingSheet.FGrade1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Average1() As Double
            Get
                Return CType(Me(Me.tableGradingSheet.Average1Column),Double)
            End Get
            Set
                Me(Me.tableGradingSheet.Average1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ethnicityRow() As ethnicityRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_1")),ethnicityRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property provinceRow() As provinceRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_11")),provinceRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_11"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CityRow() As CityRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_12")),CityRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_12"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrgyRow() As BrgyRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_13")),BrgyRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_13"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReligionRow() As ReligionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_14")),ReligionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_14"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableGradingSheet.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableGradingSheet.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class roomsRow
        Inherits Global.System.Data.DataRow
        
        Private tablerooms As roomsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerooms = CType(Me.Table,roomsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property roomID() As UInteger
            Get
                Return CType(Me(Me.tablerooms.roomIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablerooms.roomIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Room() As String
            Get
                Return CType(Me(Me.tablerooms.RoomColumn),String)
            End Get
            Set
                Me(Me.tablerooms.RoomColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class acctTrackingRow
        Inherits Global.System.Data.DataRow
        
        Private tableacctTracking As acctTrackingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableacctTracking = CType(Me.Table,acctTrackingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableacctTracking.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableacctTracking.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableacctTracking.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'acctTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableacctTracking.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tableacctTracking.CourseColumn),String)
            End Get
            Set
                Me(Me.tableacctTracking.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctTotal() As Double
            Get
                Return CType(Me(Me.tableacctTracking.AcctTotalColumn),Double)
            End Get
            Set
                Me(Me.tableacctTracking.AcctTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPayments() As Double
            Get
                Return CType(Me(Me.tableacctTracking.TotalPaymentsColumn),Double)
            End Get
            Set
                Me(Me.tableacctTracking.TotalPaymentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentBalance() As Double
            Get
                Return CType(Me(Me.tableacctTracking.CurrentBalanceColumn),Double)
            End Get
            Set
                Me(Me.tableacctTracking.CurrentBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tableacctTracking.SYColumn),String)
            End Get
            Set
                Me(Me.tableacctTracking.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableacctTracking.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'acctTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableacctTracking.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Discount() As Double
            Get
                Return CType(Me(Me.tableacctTracking.DiscountColumn),Double)
            End Get
            Set
                Me(Me.tableacctTracking.DiscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableacctTracking.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableacctTracking.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableacctTracking.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableacctTracking.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ethnicityRow
        Inherits Global.System.Data.DataRow
        
        Private tableethnicity As ethnicityDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableethnicity = CType(Me.Table,ethnicityDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ethnicity() As String
            Get
                Return CType(Me(Me.tableethnicity.EthnicityColumn),String)
            End Get
            Set
                Me(Me.tableethnicity.EthnicityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableethnicity.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableethnicity.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getgrades_reportRows() As grades_reportRow()
            If (Me.Table.ChildRelations("fk_grades_1") Is Nothing) Then
                Return New grades_reportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_grades_1")),grades_reportRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetGradingSheetRows() As GradingSheetRow()
            If (Me.Table.ChildRelations("FK_grades_1") Is Nothing) Then
                Return New GradingSheetRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_1")),GradingSheetRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRatingReportRows() As RatingReportRow()
            If (Me.Table.ChildRelations("FK_grades_15") Is Nothing) Then
                Return New RatingReportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_15")),RatingReportRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class provinceRow
        Inherits Global.System.Data.DataRow
        
        Private tableprovince As provinceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableprovince = CType(Me.Table,provinceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As String
            Get
                Return CType(Me(Me.tableprovince.ProvinceColumn),String)
            End Get
            Set
                Me(Me.tableprovince.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableprovince.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableprovince.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getgrades_reportRows() As grades_reportRow()
            If (Me.Table.ChildRelations("fk_grades_11") Is Nothing) Then
                Return New grades_reportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_grades_11")),grades_reportRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetGradingSheetRows() As GradingSheetRow()
            If (Me.Table.ChildRelations("FK_grades_11") Is Nothing) Then
                Return New GradingSheetRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_11")),GradingSheetRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRatingReportRows() As RatingReportRow()
            If (Me.Table.ChildRelations("FK_grades_16") Is Nothing) Then
                Return New RatingReportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_16")),RatingReportRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CityRow
        Inherits Global.System.Data.DataRow
        
        Private tableCity As CityDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCity = CType(Me.Table,CityDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableCity.CityColumn),String)
            End Get
            Set
                Me(Me.tableCity.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableCity.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableCity.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getgrades_reportRows() As grades_reportRow()
            If (Me.Table.ChildRelations("fk_grades_12") Is Nothing) Then
                Return New grades_reportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_grades_12")),grades_reportRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetGradingSheetRows() As GradingSheetRow()
            If (Me.Table.ChildRelations("FK_grades_12") Is Nothing) Then
                Return New GradingSheetRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_12")),GradingSheetRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRatingReportRows() As RatingReportRow()
            If (Me.Table.ChildRelations("FK_grades_17") Is Nothing) Then
                Return New RatingReportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_17")),RatingReportRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BrgyRow
        Inherits Global.System.Data.DataRow
        
        Private tableBrgy As BrgyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBrgy = CType(Me.Table,BrgyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Brgy() As String
            Get
                Return CType(Me(Me.tableBrgy.BrgyColumn),String)
            End Get
            Set
                Me(Me.tableBrgy.BrgyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableBrgy.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableBrgy.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getgrades_reportRows() As grades_reportRow()
            If (Me.Table.ChildRelations("fk_grades_13") Is Nothing) Then
                Return New grades_reportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_grades_13")),grades_reportRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetGradingSheetRows() As GradingSheetRow()
            If (Me.Table.ChildRelations("FK_grades_13") Is Nothing) Then
                Return New GradingSheetRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_13")),GradingSheetRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRatingReportRows() As RatingReportRow()
            If (Me.Table.ChildRelations("FK_grades_18") Is Nothing) Then
                Return New RatingReportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_18")),RatingReportRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class stude_specialreportsRow
        Inherits Global.System.Data.DataRow
        
        Private tablestude_specialreports As stude_specialreportsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestude_specialreports = CType(Me.Table,stude_specialreportsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablestude_specialreports.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablestude_specialreports.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudeName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestude_specialreports.StudeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudeName' in table 'stude_specialreports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestude_specialreports.StudeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tablestude_specialreports.SexColumn),String)
            End Get
            Set
                Me(Me.tablestude_specialreports.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ethnicity() As String
            Get
                Return CType(Me(Me.tablestude_specialreports.EthnicityColumn),String)
            End Get
            Set
                Me(Me.tablestude_specialreports.EthnicityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As String
            Get
                Return CType(Me(Me.tablestude_specialreports.ProvinceColumn),String)
            End Get
            Set
                Me(Me.tablestude_specialreports.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tablestude_specialreports.CityColumn),String)
            End Get
            Set
                Me(Me.tablestude_specialreports.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Brgy() As String
            Get
                Return CType(Me(Me.tablestude_specialreports.BrgyColumn),String)
            End Get
            Set
                Me(Me.tablestude_specialreports.BrgyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tablestude_specialreports.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'stude_specialreports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestude_specialreports.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tablestude_specialreports.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'stude_specialreports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestude_specialreports.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablestude_specialreports.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'stude_specialreports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestude_specialreports.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablestude_specialreports.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'stude_specialreports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestude_specialreports.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablestude_specialreports.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablestude_specialreports.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablestude_specialreports.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablestude_specialreports.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablestude_specialreports.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'stude_specialreports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestude_specialreports.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudeNameNull() As Boolean
            Return Me.IsNull(Me.tablestude_specialreports.StudeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudeNameNull()
            Me(Me.tablestude_specialreports.StudeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tablestude_specialreports.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tablestude_specialreports.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tablestude_specialreports.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tablestude_specialreports.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablestude_specialreports.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablestude_specialreports.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tablestude_specialreports.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tablestude_specialreports.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tablestude_specialreports.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tablestude_specialreports.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReligionRow
        Inherits Global.System.Data.DataRow
        
        Private tableReligion As ReligionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReligion = CType(Me.Table,ReligionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Religion() As String
            Get
                Return CType(Me(Me.tableReligion.ReligionColumn),String)
            End Get
            Set
                Me(Me.tableReligion.ReligionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableReligion.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableReligion.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getgrades_reportRows() As grades_reportRow()
            If (Me.Table.ChildRelations("fk_grades_14") Is Nothing) Then
                Return New grades_reportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_grades_14")),grades_reportRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetGradingSheetRows() As GradingSheetRow()
            If (Me.Table.ChildRelations("FK_grades_14") Is Nothing) Then
                Return New GradingSheetRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_14")),GradingSheetRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRatingReportRows() As RatingReportRow()
            If (Me.Table.ChildRelations("FK_grades_19") Is Nothing) Then
                Return New RatingReportRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_grades_19")),RatingReportRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Chart_SexRow
        Inherits Global.System.Data.DataRow
        
        Private tableChart_Sex As Chart_SexDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableChart_Sex = CType(Me.Table,Chart_SexDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableChart_Sex.SexColumn),String)
            End Get
            Set
                Me(Me.tableChart_Sex.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableChart_Sex.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'Chart_Sex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChart_Sex.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableChart_Sex.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'Chart_Sex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChart_Sex.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _count_Sex_() As Long
            Get
                Return CType(Me(Me.tableChart_Sex._count_Sex_Column),Long)
            End Get
            Set
                Me(Me.tableChart_Sex._count_Sex_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableChart_Sex.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'Chart_Sex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChart_Sex.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableChart_Sex.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'Chart_Sex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChart_Sex.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableChart_Sex.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableChart_Sex.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableChart_Sex.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableChart_Sex.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableChart_Sex.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'Chart_Sex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChart_Sex.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableChart_Sex.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableChart_Sex.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableChart_Sex.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableChart_Sex.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableChart_Sex.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tableChart_Sex.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableChart_Sex.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableChart_Sex.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableChart_Sex.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableChart_Sex.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EthnicityCountRow
        Inherits Global.System.Data.DataRow
        
        Private tableEthnicityCount As EthnicityCountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEthnicityCount = CType(Me.Table,EthnicityCountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ethnicity() As String
            Get
                Return CType(Me(Me.tableEthnicityCount.EthnicityColumn),String)
            End Get
            Set
                Me(Me.tableEthnicityCount.EthnicityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _count_Ethnicity_() As Long
            Get
                Return CType(Me(Me.tableEthnicityCount._count_Ethnicity_Column),Long)
            End Get
            Set
                Me(Me.tableEthnicityCount._count_Ethnicity_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableEthnicityCount.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'EthnicityCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEthnicityCount.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableEthnicityCount.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'EthnicityCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEthnicityCount.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableEthnicityCount.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableEthnicityCount.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableEthnicityCount.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableEthnicityCount.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableEthnicityCount.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'EthnicityCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEthnicityCount.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableEthnicityCount.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'EthnicityCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEthnicityCount.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableEthnicityCount.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'EthnicityCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEthnicityCount.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableEthnicityCount.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'EthnicityCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEthnicityCount.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableEthnicityCount.SexColumn),String)
            End Get
            Set
                Me(Me.tableEthnicityCount.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableEthnicityCount.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableEthnicityCount.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableEthnicityCount.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableEthnicityCount.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableEthnicityCount.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableEthnicityCount.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableEthnicityCount.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tableEthnicityCount.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableEthnicityCount.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableEthnicityCount.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableEthnicityCount.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableEthnicityCount.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class grades_reportRow
        Inherits Global.System.Data.DataRow
        
        Private tablegrades_report As grades_reportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablegrades_report = CType(Me.Table,grades_reportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablegrades_report.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudeName() As String
            Get
                Try 
                    Return CType(Me(Me.tablegrades_report.StudeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudeName' in table 'grades_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrades_report.StudeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Return CType(Me(Me.tablegrades_report.BirthDateColumn),Date)
            End Get
            Set
                Me(Me.tablegrades_report.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthPlace() As String
            Get
                Return CType(Me(Me.tablegrades_report.BirthPlaceColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.BirthPlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tablegrades_report.GuardianColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablegrades_report.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'grades_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrades_report.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tablegrades_report.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Average() As String
            Get
                Return CType(Me(Me.tablegrades_report.AverageColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.AverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tablegrades_report.SYColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablegrades_report.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'grades_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrades_report.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGrade() As String
            Get
                Return CType(Me(Me.tablegrades_report.PGradeColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.PGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MGrade() As String
            Get
                Return CType(Me(Me.tablegrades_report.MGradeColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.MGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PFinalGrade() As String
            Get
                Return CType(Me(Me.tablegrades_report.PFinalGradeColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.PFinalGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGrade() As String
            Get
                Return CType(Me(Me.tablegrades_report.FGradeColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.FGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adviser() As String
            Get
                Return CType(Me(Me.tablegrades_report.AdviserColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.AdviserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablegrades_report.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablegrades_report.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tablegrades_report.SexColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As String
            Get
                Return CType(Me(Me.tablegrades_report.AgeColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tablegrades_report.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'grades_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrades_report.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Track() As String
            Get
                Return CType(Me(Me.tablegrades_report.TrackColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.TrackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qualification() As String
            Get
                Return CType(Me(Me.tablegrades_report.QualificationColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.QualificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablegrades_report.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tablegrades_report.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tablegrades_report.DivisionColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Region() As String
            Get
                Return CType(Me(Me.tablegrades_report.RegionColumn),String)
            End Get
            Set
                Me(Me.tablegrades_report.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGrade1() As Double
            Get
                Return CType(Me(Me.tablegrades_report.PGrade1Column),Double)
            End Get
            Set
                Me(Me.tablegrades_report.PGrade1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MGrade1() As Double
            Get
                Return CType(Me(Me.tablegrades_report.MGrade1Column),Double)
            End Get
            Set
                Me(Me.tablegrades_report.MGrade1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PFinalGrade1() As Double
            Get
                Return CType(Me(Me.tablegrades_report.PFinalGrade1Column),Double)
            End Get
            Set
                Me(Me.tablegrades_report.PFinalGrade1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGrade1() As Double
            Get
                Return CType(Me(Me.tablegrades_report.FGrade1Column),Double)
            End Get
            Set
                Me(Me.tablegrades_report.FGrade1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Average1() As Double
            Get
                Return CType(Me(Me.tablegrades_report.Average1Column),Double)
            End Get
            Set
                Me(Me.tablegrades_report.Average1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ethnicityRow() As ethnicityRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_grades_1")),ethnicityRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_grades_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property provinceRow() As provinceRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_grades_11")),provinceRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_grades_11"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CityRow() As CityRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_grades_12")),CityRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_grades_12"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrgyRow() As BrgyRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_grades_13")),BrgyRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_grades_13"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReligionRow() As ReligionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_grades_14")),ReligionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_grades_14"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudeNameNull() As Boolean
            Return Me.IsNull(Me.tablegrades_report.StudeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudeNameNull()
            Me(Me.tablegrades_report.StudeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablegrades_report.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablegrades_report.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tablegrades_report.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tablegrades_report.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tablegrades_report.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tablegrades_report.SectionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class enrolmentCountSummaryRow
        Inherits Global.System.Data.DataRow
        
        Private tableenrolmentCountSummary As enrolmentCountSummaryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableenrolmentCountSummary = CType(Me.Table,enrolmentCountSummaryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableenrolmentCountSummary.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'enrolmentCountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableenrolmentCountSummary.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'enrolmentCountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableenrolmentCountSummary.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'enrolmentCountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sexCount() As Long
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.sexCountColumn),Long)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.sexCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableenrolmentCountSummary.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'enrolmentCountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Track() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.TrackColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.TrackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qualification() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.QualificationColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.QualificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableenrolmentCountSummary.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'enrolmentCountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableenrolmentCountSummary.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'enrolmentCountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sex() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.sexColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.sexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarJHS() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.RegistrarJHSColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.RegistrarJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarSHS() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.RegistrarSHSColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.RegistrarSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property classification() As String
            Get
                Return CType(Me(Me.tableenrolmentCountSummary.classificationColumn),String)
            End Get
            Set
                Me(Me.tableenrolmentCountSummary.classificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableenrolmentCountSummary.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tableenrolmentCountSummary.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableenrolmentCountSummary.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableenrolmentCountSummary.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableenrolmentCountSummary.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableenrolmentCountSummary.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableenrolmentCountSummary.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableenrolmentCountSummary.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableenrolmentCountSummary.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableenrolmentCountSummary.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableenrolmentCountSummary.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableenrolmentCountSummary.SectionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RatingReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableRatingReport As RatingReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRatingReport = CType(Me.Table,RatingReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableRatingReport.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudeName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRatingReport.StudeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudeName' in table 'RatingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRatingReport.StudeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableRatingReport.SexColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Return CType(Me(Me.tableRatingReport.BirthDateColumn),Date)
            End Get
            Set
                Me(Me.tableRatingReport.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As String
            Get
                Return CType(Me(Me.tableRatingReport.AgeColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthPlace() As String
            Get
                Return CType(Me(Me.tableRatingReport.BirthPlaceColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.BirthPlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableRatingReport.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableRatingReport.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'RatingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRatingReport.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tableRatingReport.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adviser() As String
            Get
                Return CType(Me(Me.tableRatingReport.AdviserColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.AdviserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableRatingReport.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'RatingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRatingReport.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Track() As String
            Get
                Return CType(Me(Me.tableRatingReport.TrackColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.TrackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableRatingReport.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGrade() As Double
            Get
                Return CType(Me(Me.tableRatingReport.PGradeColumn),Double)
            End Get
            Set
                Me(Me.tableRatingReport.PGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MGrade() As Double
            Get
                Return CType(Me(Me.tableRatingReport.MGradeColumn),Double)
            End Get
            Set
                Me(Me.tableRatingReport.MGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PFinalGrade() As Double
            Get
                Return CType(Me(Me.tableRatingReport.PFinalGradeColumn),Double)
            End Get
            Set
                Me(Me.tableRatingReport.PFinalGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGrade() As Double
            Get
                Return CType(Me(Me.tableRatingReport.FGradeColumn),Double)
            End Get
            Set
                Me(Me.tableRatingReport.FGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Average() As Double
            Get
                Return CType(Me(Me.tableRatingReport.AverageColumn),Double)
            End Get
            Set
                Me(Me.tableRatingReport.AverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tableRatingReport.SYColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableRatingReport.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableRatingReport.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableRatingReport.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableRatingReport.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tableRatingReport.DivisionColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableRatingReport.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'RatingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRatingReport.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableRatingReport.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'RatingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRatingReport.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tableRatingReport.SemColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strand() As String
            Get
                Return CType(Me(Me.tableRatingReport.strandColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.strandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property depedlogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableRatingReport.depedlogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'depedlogo' in table 'RatingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRatingReport.depedlogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableRatingReport.schoolLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolLogo' in table 'RatingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRatingReport.schoolLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property district() As String
            Get
                Return CType(Me(Me.tableRatingReport.districtColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.districtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property principalPre() As String
            Get
                Return CType(Me(Me.tableRatingReport.principalPreColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.principalPreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property principalGS() As String
            Get
                Return CType(Me(Me.tableRatingReport.principalGSColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.principalGSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property principalJHS() As String
            Get
                Return CType(Me(Me.tableRatingReport.principalJHSColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.principalJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property principalSHS() As String
            Get
                Return CType(Me(Me.tableRatingReport.principalSHSColumn),String)
            End Get
            Set
                Me(Me.tableRatingReport.principalSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ethnicityRow() As ethnicityRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_15")),ethnicityRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_15"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property provinceRow() As provinceRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_16")),provinceRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_16"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CityRow() As CityRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_17")),CityRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_17"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrgyRow() As BrgyRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_18")),BrgyRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_18"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReligionRow() As ReligionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_grades_19")),ReligionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_grades_19"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudeNameNull() As Boolean
            Return Me.IsNull(Me.tableRatingReport.StudeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudeNameNull()
            Me(Me.tableRatingReport.StudeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableRatingReport.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableRatingReport.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableRatingReport.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableRatingReport.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableRatingReport.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_RegionNull()
            Me(Me.tableRatingReport.RegionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableRatingReport.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableRatingReport.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdepedlogoNull() As Boolean
            Return Me.IsNull(Me.tableRatingReport.depedlogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdepedlogoNull()
            Me(Me.tableRatingReport.depedlogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolLogoNull() As Boolean
            Return Me.IsNull(Me.tableRatingReport.schoolLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolLogoNull()
            Me(Me.tableRatingReport.schoolLogoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class idCardRow
        Inherits Global.System.Data.DataRow
        
        Private tableidCard As idCardDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableidCard = CType(Me.Table,idCardDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableidCard.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableidCard.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableidCard.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'idCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableidCard.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property middleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableidCard.middleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'middleName' in table 'idCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableidCard.middleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableidCard.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'idCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableidCard.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableidCard.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableidCard.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableidCard.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'idCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableidCard.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableidCard.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'idCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableidCard.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableidCard.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableidCard.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableidCard.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableidCard.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableidCard.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableidCard.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableidCard.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableidCard.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableidCard.schoolLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolLogo' in table 'idCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableidCard.schoolLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property profImage() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableidCard.profImageColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'profImage' in table 'idCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableidCard.profImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianContact() As String
            Get
                Return CType(Me(Me.tableidCard.GuardianContactColumn),String)
            End Get
            Set
                Me(Me.tableidCard.GuardianContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableidCard.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableidCard.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableidCard.middleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmiddleNameNull()
            Me(Me.tableidCard.middleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableidCard.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableidCard.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableidCard.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tableidCard.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableidCard.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableidCard.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolLogoNull() As Boolean
            Return Me.IsNull(Me.tableidCard.schoolLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolLogoNull()
            Me(Me.tableidCard.schoolLogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprofImageNull() As Boolean
            Return Me.IsNull(Me.tableidCard.profImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprofImageNull()
            Me(Me.tableidCard.profImageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ls_distributionRow
        Inherits Global.System.Data.DataRow
        
        Private tablels_distribution As ls_distributionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablels_distribution = CType(Me.Table,ls_distributionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property distID() As UInteger
            Get
                Return CType(Me(Me.tablels_distribution.distIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablels_distribution.distIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transactionNo() As String
            Get
                Return CType(Me(Me.tablels_distribution.transactionNoColumn),String)
            End Get
            Set
                Me(Me.tablels_distribution.transactionNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transactionDate() As Date
            Get
                Return CType(Me(Me.tablels_distribution.transactionDateColumn),Date)
            End Get
            Set
                Me(Me.tablels_distribution.transactionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property productCode() As String
            Get
                Return CType(Me(Me.tablels_distribution.productCodeColumn),String)
            End Get
            Set
                Me(Me.tablels_distribution.productCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tablels_distribution.descriptionColumn),String)
            End Get
            Set
                Me(Me.tablels_distribution.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As UInteger
            Get
                Return CType(Me(Me.tablels_distribution.qtyColumn),UInteger)
            End Get
            Set
                Me(Me.tablels_distribution.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemName() As String
            Get
                Try 
                    Return CType(Me(Me.tablels_distribution.itemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'itemName' in table 'ls_distribution' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablels_distribution.itemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeName() As String
            Get
                Try 
                    Return CType(Me(Me.tablels_distribution.EmployeeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeName' in table 'ls_distribution' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablels_distribution.EmployeeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDNumber() As String
            Get
                Return CType(Me(Me.tablels_distribution.IDNumberColumn),String)
            End Get
            Set
                Me(Me.tablels_distribution.IDNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablels_distribution.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'ls_distribution' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablels_distribution.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsitemNameNull() As Boolean
            Return Me.IsNull(Me.tablels_distribution.itemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetitemNameNull()
            Me(Me.tablels_distribution.itemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNameNull() As Boolean
            Return Me.IsNull(Me.tablels_distribution.EmployeeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNameNull()
            Me(Me.tablels_distribution.EmployeeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tablels_distribution.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tablels_distribution.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OnlineEnrolleesRow
        Inherits Global.System.Data.DataRow
        
        Private tableOnlineEnrollees As OnlineEnrolleesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOnlineEnrollees = CType(Me.Table,OnlineEnrolleesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oeID() As UInteger
            Get
                Return CType(Me(Me.tableOnlineEnrollees.oeIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.oeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.MiddleNameColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.CourseColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.SemesterColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.SYColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fileAttachment() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.fileAttachmentColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.fileAttachmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrolStatus() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.enrolStatusColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.enrolStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property downPayment() As Double
            Get
                Return CType(Me(Me.tableOnlineEnrollees.downPaymentColumn),Double)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.downPaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property downPaymentStat() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.downPaymentStatColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.downPaymentStatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property track() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.trackColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.trackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strand() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.strandColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.strandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber1() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.StudentNumber1Column),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.StudentNumber1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.FirstName1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName1' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.FirstName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.MiddleName1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName1' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.MiddleName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.LastName1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName1' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.LastName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.SexColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CivilStatus() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.CivilStatusColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.CivilStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthPlace() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.BirthPlaceColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.BirthPlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Citizenship() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.CitizenshipColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.CitizenshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Religion() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.ReligionColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.ReligionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BloodType() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.BloodTypeColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.BloodTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelNumber() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.TelNumberColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.TelNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MobileNumber() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.MobileNumberColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.MobileNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HighSchool() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.HighSchoolColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.HighSchoolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HSAddress() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.HSAddressColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.HSAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property College() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.CollegeColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.CollegeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAddress() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.CAddressColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.CAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Requirements() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.RequirementsColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.RequirementsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Encoder() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.EncoderColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.EncoderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Return CType(Me(Me.tableOnlineEnrollees.BirthDateColumn),Date)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdmissionDate() As Date
            Get
                Return CType(Me(Me.tableOnlineEnrollees.AdmissionDateColumn),Date)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.AdmissionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GraduationDate() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.GraduationDateColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.GraduationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianContact() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.GuardianContactColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.GuardianContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianAddress() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.GuardianAddressColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.GuardianAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImagePath() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.ImagePathColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImagePath' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.ImagePathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course1() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.Course1Column),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.Course1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Elementary() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.ElementaryColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.ElementaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ElemAddress() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.ElemAddressColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.ElemAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianRelationship() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.GuardianRelationshipColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.GuardianRelationshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianTelNo() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.GuardianTelNoColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.GuardianTelNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.EmailAddressColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Father() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.FatherColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.FatherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOccupation() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.FOccupationColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.FOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mother() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.MotherColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.MotherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOccupation() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.MOccupationColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.MOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.AgeColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.TitleColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.PronounColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.PronounColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun2() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.Pronoun2Column),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.Pronoun2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun3() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.Pronoun3Column),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.Pronoun3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ethnicity() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.EthnicityColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.EthnicityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParentsMonthly() As Double
            Get
                Return CType(Me(Me.tableOnlineEnrollees.ParentsMonthlyColumn),Double)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.ParentsMonthlyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.ProvinceColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.CityColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Brgy() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.BrgyColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.BrgyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sitio() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.SitioColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SitioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID() As UInteger
            Get
                Return CType(Me(Me.tableOnlineEnrollees.settingsIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.settingsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property guardianOccupation() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.guardianOccupationColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.guardianOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elemSY() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.elemSYColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.elemSYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elemAve() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.elemAveColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.elemAveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elemGradDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.elemGradDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'elemGradDate' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.elemGradDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eligibility() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.eligibilityColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.eligibilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jhsAve() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.jhsAveColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.jhsAveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jhsGradDate() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.jhsGradDateColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.jhsGradDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elemSchoolID() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.elemSchoolIDColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.elemSchoolIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jhsSchoolID() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.jhsSchoolIDColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.jhsSchoolIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property peptRating() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.peptRatingColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.peptRatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property peptExamDate() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.peptExamDateColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.peptExamDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alsRating() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.alsRatingColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.alsRatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alsTestingCenter() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.alsTestingCenterColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.alsTestingCenterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nameExt() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.nameExtColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.nameExtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID1() As UInteger
            Get
                Return CType(Me(Me.tableOnlineEnrollees.settingsID1Column),UInteger)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.settingsID1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.DivisionColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SDS() As String
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.SDSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SDS' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SDSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolIDSHS() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.SchoolIDSHSColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SchoolIDSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolIDJHS() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.SchoolIDJHSColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SchoolIDJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.PropertyCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarSHS() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.RegistrarSHSColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.RegistrarSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrarJHS() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.RegistrarJHSColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.RegistrarJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuidanceSHS() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.GuidanceSHSColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.GuidanceSHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuidanceJHS() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.GuidanceJHSColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.GuidanceJHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property member1Prop() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.member1PropColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.member1PropColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property member2Prop() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.member2PropColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.member2PropColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adas1() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.adas1Column),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.adas1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adas1Position() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.adas1PositionColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.adas1PositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sdsPosition() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.sdsPositionColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.sdsPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regionAddress() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.regionAddressColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.regionAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.schoolLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolLogo' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.schoolLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property depedLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableOnlineEnrollees.depedLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'depedLogo' in table 'OnlineEnrollees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOnlineEnrollees.depedLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regionalDirector() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.regionalDirectorColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.regionalDirectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property directorPosition() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.directorPositionColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.directorPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property divisionAddress() As String
            Get
                Return CType(Me(Me.tableOnlineEnrollees.divisionAddressColumn),String)
            End Get
            Set
                Me(Me.tableOnlineEnrollees.divisionAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstName1Null() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.FirstName1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstName1Null()
            Me(Me.tableOnlineEnrollees.FirstName1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleName1Null() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.MiddleName1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleName1Null()
            Me(Me.tableOnlineEnrollees.MiddleName1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastName1Null() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.LastName1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastName1Null()
            Me(Me.tableOnlineEnrollees.LastName1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImagePathNull() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.ImagePathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImagePathNull()
            Me(Me.tableOnlineEnrollees.ImagePathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IselemGradDateNull() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.elemGradDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetelemGradDateNull()
            Me(Me.tableOnlineEnrollees.elemGradDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSDSNull() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.SDSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSDSNull()
            Me(Me.tableOnlineEnrollees.SDSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_RegionNull()
            Me(Me.tableOnlineEnrollees.RegionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolLogoNull() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.schoolLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolLogoNull()
            Me(Me.tableOnlineEnrollees.schoolLogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableOnlineEnrollees.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdepedLogoNull() As Boolean
            Return Me.IsNull(Me.tableOnlineEnrollees.depedLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdepedLogoNull()
            Me(Me.tableOnlineEnrollees.depedLogoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class curriculumRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As curriculumRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As curriculumRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As curriculumRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class installmentfeeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As installmentfeeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As installmentfeeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As installmentfeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class cashierAcctRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As cashierAcctRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As cashierAcctRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As cashierAcctRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class HonorableDismissalRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As HonorableDismissalRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As HonorableDismissalRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As HonorableDismissalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class get_majorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As get_majorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As get_majorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As get_majorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GradingSheetRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GradingSheetRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GradingSheetRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GradingSheetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class roomsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As roomsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As roomsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As roomsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class acctTrackingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As acctTrackingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As acctTrackingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As acctTrackingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ethnicityRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ethnicityRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ethnicityRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ethnicityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class provinceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As provinceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As provinceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As provinceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CityRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CityRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CityRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BrgyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BrgyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BrgyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BrgyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class stude_specialreportsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As stude_specialreportsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As stude_specialreportsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As stude_specialreportsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReligionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReligionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReligionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReligionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Chart_SexRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Chart_SexRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Chart_SexRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Chart_SexRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EthnicityCountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EthnicityCountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EthnicityCountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EthnicityCountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class grades_reportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As grades_reportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As grades_reportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As grades_reportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class enrolmentCountSummaryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As enrolmentCountSummaryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As enrolmentCountSummaryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As enrolmentCountSummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RatingReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RatingReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RatingReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RatingReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class idCardRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As idCardRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As idCardRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As idCardRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ls_distributionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ls_distributionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ls_distributionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ls_distributionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OnlineEnrolleesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OnlineEnrolleesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OnlineEnrolleesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OnlineEnrolleesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet2TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class curriculumTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "curriculum"
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("lecunit", "lecunit")
            tableMapping.ColumnMappings.Add("labunit", "labunit")
            tableMapping.ColumnMappings.Add("prereq", "prereq")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("SemEffective", "SemEffective")
            tableMapping.ColumnMappings.Add("SYEffective", "SYEffective")
            tableMapping.ColumnMappings.Add("Effectivity", "Effectivity")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("subjectid", "subjectid")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT s.subjectid, s.SubjectCode, s.description, s.lecunit, s.labunit, s.prereq,"& _ 
                " s.YearLevel, s.Semester, s.Course, s.SemEffective, s.SYEffective, s.Effectivity"& _ 
                " FROM subjects s"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.curriculumDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.curriculumDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.curriculumDataTable = New DataSet2.curriculumDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class installmentfeeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "installmentfee"
            tableMapping.ColumnMappings.Add("installmentID", "installmentID")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Plan", "Plan")
            tableMapping.ColumnMappings.Add("InstallmentFee", "InstallmentFee")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `bpsedu_srms`.`installmentfee` WHERE ((`installmentID` = @Original_in"& _ 
                "stallmentID) AND (`Course` = @Original_Course) AND (`YearLevel` = @Original_Year"& _ 
                "Level) AND (`Plan` = @Original_Plan) AND (`InstallmentFee` = @Original_Installme"& _ 
                "ntFee))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_installmentID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "installmentID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_YearLevel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "YearLevel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Plan"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Plan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_InstallmentFee"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "InstallmentFee"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `bpsedu_srms`.`installmentfee` (`Course`, `YearLevel`, `Plan`, `Insta"& _ 
                "llmentFee`) VALUES (@Course, @YearLevel, @Plan, @InstallmentFee)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@YearLevel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "YearLevel"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Plan"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Plan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@InstallmentFee"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "InstallmentFee"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `bpsedu_srms`.`installmentfee` SET `Course` = @Course, `YearLevel` = @Year"& _ 
                "Level, `Plan` = @Plan, `InstallmentFee` = @InstallmentFee WHERE ((`installmentID"& _ 
                "` = @Original_installmentID) AND (`Course` = @Original_Course) AND (`YearLevel` "& _ 
                "= @Original_YearLevel) AND (`Plan` = @Original_Plan) AND (`InstallmentFee` = @Or"& _ 
                "iginal_InstallmentFee))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@YearLevel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "YearLevel"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Plan"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Plan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@InstallmentFee"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "InstallmentFee"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_installmentID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "installmentID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_YearLevel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "YearLevel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Plan"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Plan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_InstallmentFee"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "InstallmentFee"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM installmentfee group by Plan order by Plan"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.installmentfeeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.installmentfeeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.installmentfeeDataTable = New DataSet2.installmentfeeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet2.installmentfeeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "installmentfee")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_installmentID As UInteger, ByVal Original_Course As String, ByVal Original_YearLevel As String, ByVal Original_Plan As String, ByVal Original_InstallmentFee As Double) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_installmentID,UInteger)
            If (Original_Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Course")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Course,String)
            End If
            If (Original_YearLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_YearLevel")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_YearLevel,String)
            End If
            If (Original_Plan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Plan")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Plan,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_InstallmentFee,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Course As String, ByVal YearLevel As String, ByVal Plan As String, ByVal InstallmentFee As Double) As Integer
            If (Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Course")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Course,String)
            End If
            If (YearLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("YearLevel")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(YearLevel,String)
            End If
            If (Plan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Plan")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Plan,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(InstallmentFee,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Course As String, ByVal YearLevel As String, ByVal Plan As String, ByVal InstallmentFee As Double, ByVal Original_installmentID As UInteger, ByVal Original_Course As String, ByVal Original_YearLevel As String, ByVal Original_Plan As String, ByVal Original_InstallmentFee As Double) As Integer
            If (Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Course")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Course,String)
            End If
            If (YearLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("YearLevel")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(YearLevel,String)
            End If
            If (Plan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Plan")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Plan,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(InstallmentFee,Double)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_installmentID,UInteger)
            If (Original_Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Course")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Course,String)
            End If
            If (Original_YearLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_YearLevel")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_YearLevel,String)
            End If
            If (Original_Plan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Plan")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Plan,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_InstallmentFee,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class cashierAcctTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "cashierAcct"
            tableMapping.ColumnMappings.Add("username", "username")
            tableMapping.ColumnMappings.Add("password", "password")
            tableMapping.ColumnMappings.Add("position", "position")
            tableMapping.ColumnMappings.Add("email", "email")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `bpsedu_srms`.`users` WHERE ((`username` = @Original_username) AND (`"& _ 
                "password` = @Original_password) AND (`position` = @Original_position) AND (`emai"& _ 
                "l` = @Original_email))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_username"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "username"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_position"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "position"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `bpsedu_srms`.`users` (`username`, `password`, `position`, `email`) V"& _ 
                "ALUES (@username, @password, @position, @email)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@username"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "username"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "password"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@position"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "position"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "email"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `bpsedu_srms`.`users` SET `username` = @username, `password` = @password, "& _ 
                "`position` = @position, `email` = @email WHERE ((`username` = @Original_username"& _ 
                ") AND (`password` = @Original_password) AND (`position` = @Original_position) AN"& _ 
                "D (`email` = @Original_email))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@username"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "username"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "password"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@position"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "position"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "email"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_username"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "username"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_position"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "position"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM users where position='Cashier'"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.cashierAcctDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.cashierAcctDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.cashierAcctDataTable = New DataSet2.cashierAcctDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet2.cashierAcctDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "cashierAcct")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_username As String, ByVal Original_password As String, ByVal Original_position As String, ByVal Original_email As String) As Integer
            If (Original_username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_username")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_username,String)
            End If
            If (Original_password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_password")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_password,String)
            End If
            If (Original_position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_position")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_position,String)
            End If
            If (Original_email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_email")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal username As String, ByVal password As String, ByVal position As String, ByVal email As String) As Integer
            If (username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("username")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(username,String)
            End If
            If (password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("password")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(password,String)
            End If
            If (position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("position")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(position,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal username As String, ByVal password As String, ByVal position As String, ByVal email As String, ByVal Original_username As String, ByVal Original_password As String, ByVal Original_position As String, ByVal Original_email As String) As Integer
            If (username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("username")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(username,String)
            End If
            If (password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("password")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(password,String)
            End If
            If (position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("position")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(position,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(email,String)
            End If
            If (Original_username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_username")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_username,String)
            End If
            If (Original_password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_password")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_password,String)
            End If
            If (Original_position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_position")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_position,String)
            End If
            If (Original_email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_email")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal password As String, ByVal position As String, ByVal email As String, ByVal Original_username As String, ByVal Original_password As String, ByVal Original_position As String, ByVal Original_email As String) As Integer
            Return Me.Update(Original_username, password, position, email, Original_username, Original_password, Original_position, Original_email)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class HonorableDismissalTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "HonorableDismissal"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("Pronoun", "Pronoun")
            tableMapping.ColumnMappings.Add("Pronoun2", "Pronoun2")
            tableMapping.ColumnMappings.Add("Pronoun3", "Pronoun3")
            tableMapping.ColumnMappings.Add("StudeName", "StudeName")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, p.Title, p.Pronoun, p.Pronoun2, p.Pronoun3, concat(p.Firs"& _ 
                "tName,' ',p.MiddleName,' ',p.LastName) as StudeName, s.Course, s.Semester, s.SY "& _ 
                "from studeprofile p join semesterstude s on p.StudentNumber=s.StudentNumber"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.HonorableDismissalDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.HonorableDismissalDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.HonorableDismissalDataTable = New DataSet2.HonorableDismissalDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class get_majorTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "get_major"
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("courseid", "courseid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `bpsedu_srms`.`course_table` WHERE ((`Major` = @Original_Major) AND ("& _ 
                "`courseid` = @Original_courseid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Major"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_courseid"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "courseid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `bpsedu_srms`.`course_table` SET `Major` = @Major WHERE ((`Major` = @Origi"& _ 
                "nal_Major) AND (`courseid` = @Original_courseid))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Major"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Major"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Major"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_courseid"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "courseid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Major, courseid FROM course_table where Major !='' GROUP BY Major ORDER BY"& _ 
                " Major"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.get_majorDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.get_majorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.get_majorDataTable = New DataSet2.get_majorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet2.get_majorDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "get_major")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GradingSheetTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GradingSheet"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Instructor", "Instructor")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("PGrade", "PGrade1")
            tableMapping.ColumnMappings.Add("MGrade", "MGrade1")
            tableMapping.ColumnMappings.Add("PFinalGrade", "PFinalGrade1")
            tableMapping.ColumnMappings.Add("FGrade", "FGrade1")
            tableMapping.ColumnMappings.Add("Average", "Average1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select g.Instructor, sp.StudentNumber, concat(sp.LastName,', ',sp.FirstName,' ',s"& _ 
                "p.MiddleName) as StudentName, sp.Sex, g.SubjectCode, g.Description, g.PGrade, g."& _ 
                "MGrade, g.PFinalGrade, g.FGrade, g.Average, g.SY, g.Sem, sr.SchoolName, sr.Schoo"& _ 
                "lAddress, sr.letterHead from grades g join studeprofile sp on sp.StudentNumber=g"& _ 
                ".StudentNumber join srms_settings sr on sp.settingsID=sr.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.GradingSheetDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.GradingSheetDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.GradingSheetDataTable = New DataSet2.GradingSheetDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class roomsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rooms"
            tableMapping.ColumnMappings.Add("roomID", "roomID")
            tableMapping.ColumnMappings.Add("Room", "Room")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `bpsedu_srms`.`rooms` WHERE ((`roomID` = @Original_roomID) AND (`Room"& _ 
                "` = @Original_Room))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_roomID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "roomID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Room"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Room"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `bpsedu_srms`.`rooms` (`Room`) VALUES (@Room)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Room"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Room"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `bpsedu_srms`.`rooms` SET `Room` = @Room WHERE ((`roomID` = @Original_room"& _ 
                "ID) AND (`Room` = @Original_Room))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Room"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Room"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_roomID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "roomID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Room"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Room"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from rooms order by Room"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.roomsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.roomsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.roomsDataTable = New DataSet2.roomsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet2.roomsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "rooms")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_roomID As UInteger, ByVal Original_Room As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_roomID,UInteger)
            If (Original_Room Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Room")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Room,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Room As String) As Integer
            If (Room Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Room")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Room,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Room As String, ByVal Original_roomID As UInteger, ByVal Original_Room As String) As Integer
            If (Room Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Room")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Room,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_roomID,UInteger)
            If (Original_Room Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Room")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_Room,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class acctTrackingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "acctTracking"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("AcctTotal", "AcctTotal")
            tableMapping.ColumnMappings.Add("TotalPayments", "TotalPayments")
            tableMapping.ColumnMappings.Add("CurrentBalance", "CurrentBalance")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("Discount", "Discount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select p.StudentNumber, concat(p.FirstName,' ',p.MiddleName,' ',p.LastName) as St"& _ 
                "udentName, p.Course, s.SY, s.AcctTotal, s.TotalPayments, s.CurrentBalance, s.Dis"& _ 
                "count, st.letterHead from studeprofile p join studeaccount s on p.StudentNumber="& _ 
                "s.StudentNumber join srms_settings st on p.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.acctTrackingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.acctTrackingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.acctTrackingDataTable = New DataSet2.acctTrackingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ethnicityTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ethnicity"
            tableMapping.ColumnMappings.Add("Ethnicity", "Ethnicity")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `bpsedu_srms`.`studeprofile` WHERE ((`Ethnicity` = @Original_Ethnicit"& _ 
                "y) AND (`StudentNumber` = @Original_StudentNumber))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Ethnicity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ethnicity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `bpsedu_srms`.`studeprofile` SET `Ethnicity` = @Ethnicity, `StudentNumber`"& _ 
                " = @StudentNumber WHERE ((`Ethnicity` = @Original_Ethnicity) AND (`StudentNumber"& _ 
                "` = @Original_StudentNumber))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Ethnicity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ethnicity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Ethnicity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ethnicity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Ethnicity, StudentNumber FROM studeprofile GROUP BY Ethnicity ORDER BY Eth"& _ 
                "nicity"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.ethnicityDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.ethnicityDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.ethnicityDataTable = New DataSet2.ethnicityDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet2.ethnicityDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "ethnicity")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Ethnicity As String, ByVal Original_StudentNumber As String) As Integer
            If (Original_Ethnicity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Ethnicity")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Ethnicity,String)
            End If
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentNumber,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Ethnicity As String, ByVal StudentNumber As String, ByVal Original_Ethnicity As String, ByVal Original_StudentNumber As String) As Integer
            If (Ethnicity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ethnicity")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Ethnicity,String)
            End If
            If (StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StudentNumber,String)
            End If
            If (Original_Ethnicity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Ethnicity")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_Ethnicity,String)
            End If
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_StudentNumber,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Ethnicity As String, ByVal Original_Ethnicity As String, ByVal Original_StudentNumber As String) As Integer
            Return Me.Update(Ethnicity, Original_StudentNumber, Original_Ethnicity, Original_StudentNumber)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class provinceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "province"
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `bpsedu_srms`.`studeprofile` WHERE ((`Province` = @Original_Province)"& _ 
                " AND (`StudentNumber` = @Original_StudentNumber))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Province"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Province"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `bpsedu_srms`.`studeprofile` SET `Province` = @Province, `StudentNumber` ="& _ 
                " @StudentNumber WHERE ((`Province` = @Original_Province) AND (`StudentNumber` = "& _ 
                "@Original_StudentNumber))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Province"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Province"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Province"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Province"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Province, StudentNumber FROM studeprofile GROUP BY Province ORDER BY Provi"& _ 
                "nce"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.provinceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.provinceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.provinceDataTable = New DataSet2.provinceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet2.provinceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "province")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Province As String, ByVal Original_StudentNumber As String) As Integer
            If (Original_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Province")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Province,String)
            End If
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentNumber,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Province As String, ByVal StudentNumber As String, ByVal Original_Province As String, ByVal Original_StudentNumber As String) As Integer
            If (Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Province,String)
            End If
            If (StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StudentNumber,String)
            End If
            If (Original_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_Province,String)
            End If
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_StudentNumber,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Province As String, ByVal Original_Province As String, ByVal Original_StudentNumber As String) As Integer
            Return Me.Update(Province, Original_StudentNumber, Original_Province, Original_StudentNumber)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CityTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "City"
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `bpsedu_srms`.`studeprofile` WHERE ((`City` = @Original_City) AND (`S"& _ 
                "tudentNumber` = @Original_StudentNumber))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `bpsedu_srms`.`studeprofile` SET `City` = @City, `StudentNumber` = @Studen"& _ 
                "tNumber WHERE ((`City` = @Original_City) AND (`StudentNumber` = @Original_Studen"& _ 
                "tNumber))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT City, StudentNumber FROM studeprofile GROUP BY City ORDER BY City"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.CityDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.CityDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.CityDataTable = New DataSet2.CityDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet2.CityDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "City")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BrgyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Brgy"
            tableMapping.ColumnMappings.Add("Brgy", "Brgy")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `bpsedu_srms`.`studeprofile` WHERE ((`Brgy` = @Original_Brgy) AND (`S"& _ 
                "tudentNumber` = @Original_StudentNumber))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Brgy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Brgy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `bpsedu_srms`.`studeprofile` SET `Brgy` = @Brgy, `StudentNumber` = @Studen"& _ 
                "tNumber WHERE ((`Brgy` = @Original_Brgy) AND (`StudentNumber` = @Original_Studen"& _ 
                "tNumber))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Brgy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Brgy"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Brgy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Brgy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Brgy, StudentNumber FROM studeprofile GROUP BY Brgy ORDER BY Brgy"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.BrgyDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.BrgyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.BrgyDataTable = New DataSet2.BrgyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet2.BrgyDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "Brgy")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class stude_specialreportsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "stude_specialreports"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudeName", "StudeName")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Ethnicity", "Ethnicity")
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("Brgy", "Brgy")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, concat(p.LastName,', ',p.FirstName) as StudeName, p.Sex, "& _ 
                "p.Ethnicity, p.Province, p.City, p.Brgy, ss.Course, ss.YearLevel, ss.Semester, s"& _ 
                "s.SY, sr.SchoolName, sr.SchoolAddress, sr.letterHead from studeprofile p join se"& _ 
                "mesterstude ss on p.StudentNumber=ss.StudentNumber join srms_settings sr on ss.s"& _ 
                "ettingsID=sr.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.stude_specialreportsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.stude_specialreportsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.stude_specialreportsDataTable = New DataSet2.stude_specialreportsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ReligionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Religion"
            tableMapping.ColumnMappings.Add("Religion", "Religion")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `bpsedu_srms`.`studeprofile` WHERE ((`Religion` = @Original_Religion)"& _ 
                " AND (`StudentNumber` = @Original_StudentNumber))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Religion"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Religion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `bpsedu_srms`.`studeprofile` SET `Religion` = @Religion, `StudentNumber` ="& _ 
                " @StudentNumber WHERE ((`Religion` = @Original_Religion) AND (`StudentNumber` = "& _ 
                "@Original_StudentNumber))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Religion"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Religion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Religion"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Religion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Religion, StudentNumber FROM studeprofile GROUP BY Religion ORDER BY Relig"& _ 
                "ion"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.ReligionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.ReligionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.ReligionDataTable = New DataSet2.ReligionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet2.ReligionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "Religion")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Chart_SexTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Chart_Sex"
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("count(Sex)", "count(Sex)")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.Sex, count(Sex), ss.YearLevel, ss.Section, ss.Semester, ss.SY, sr.School"& _ 
                "Name, sr.SchoolAddress, sr.letterHead from studeprofile p join semesterstude ss "& _ 
                "on p.StudentNumber=ss.StudentNumber join srms_settings sr on ss.settingsID=sr.se"& _ 
                "ttingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.Chart_SexDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.Chart_SexDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.Chart_SexDataTable = New DataSet2.Chart_SexDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EthnicityCountTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EthnicityCount"
            tableMapping.ColumnMappings.Add("Ethnicity", "Ethnicity")
            tableMapping.ColumnMappings.Add("count(Ethnicity)", "count(Ethnicity)")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.Ethnicity, count(Ethnicity), p.Sex, ss.Semester, ss.SY, ss.Course, ss.Ye"& _ 
                "arLevel, ss.Section, sr.SchoolName, sr.SchoolAddress, sr.letterHead from studepr"& _ 
                "ofile p join semesterstude ss on p.StudentNumber=ss.StudentNumber join srms_sett"& _ 
                "ings sr on ss.settingsID=sr.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.EthnicityCountDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.EthnicityCountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.EthnicityCountDataTable = New DataSet2.EthnicityCountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class grades_reportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "grades_report"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudeName", "StudeName")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("BirthPlace", "BirthPlace")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Adviser", "Adviser")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("Track", "Track")
            tableMapping.ColumnMappings.Add("Qualification", "Qualification")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("PGrade", "PGrade1")
            tableMapping.ColumnMappings.Add("MGrade", "MGrade1")
            tableMapping.ColumnMappings.Add("PFinalGrade", "PFinalGrade1")
            tableMapping.ColumnMappings.Add("FGrade", "FGrade1")
            tableMapping.ColumnMappings.Add("Average", "Average1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, concat(p.LastName,', ',p.FirstName,' ',p.MiddleName) as S"& _ 
                "tudeName, p.Sex, p.BirthDate, p.Age, p.BirthPlace, p.Guardian, ss.Course, ss.Yea"& _ 
                "rLevel, ss.Adviser, ss.Section, ss.Track, ss.Qualification, g.Description, g.PGr"& _ 
                "ade, g.MGrade, g.PFinalGrade, g.FGrade, g.Average, g.SY, sr.SchoolName, sr.Schoo"& _ 
                "lAddress, sr.SchoolHead, sr.sHeadPosition,sr.Division,sr.Region from studeprofil"& _ 
                "e p join semesterstude ss on p.StudentNumber=ss.StudentNumber join grades g on s"& _ 
                "s.StudentNumber=g.StudentNumber join srms_settings sr on ss.settingsID=sr.settin"& _ 
                "gsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.grades_reportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.grades_reportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.grades_reportDataTable = New DataSet2.grades_reportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class enrolmentCountSummaryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "enrolmentCountSummary"
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("sexCount", "sexCount")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Track", "Track")
            tableMapping.ColumnMappings.Add("Qualification", "Qualification")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("sex", "sex")
            tableMapping.ColumnMappings.Add("RegistrarJHS", "RegistrarJHS")
            tableMapping.ColumnMappings.Add("RegistrarSHS", "RegistrarSHS")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("classification", "classification")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select ss.YearLevel, p.sex, count(p.sex) as sexCount, p.classification, ss.Sectio"& _ 
                "n, ss.Course, ss.Track, ss.Qualification, ss.Semester, ss.SY, st.SchoolName, st."& _ 
                "SchoolAddress, st.letterHead, st.RegistrarJHS, st.RegistrarSHS, st.SchoolHead, s"& _ 
                "t.sHeadPosition from semesterstude ss join srms_settings st on ss.settingsID=st."& _ 
                "settingsID join studeprofile p on p.StudentNumber=ss.StudentNumber group by p.Se"& _ 
                "x"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.enrolmentCountSummaryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.enrolmentCountSummaryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.enrolmentCountSummaryDataTable = New DataSet2.enrolmentCountSummaryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RatingReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RatingReport"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudeName", "StudeName")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("BirthPlace", "BirthPlace")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Adviser", "Adviser")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("Track", "Track")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("PGrade", "PGrade")
            tableMapping.ColumnMappings.Add("MGrade", "MGrade")
            tableMapping.ColumnMappings.Add("PFinalGrade", "PFinalGrade")
            tableMapping.ColumnMappings.Add("FGrade", "FGrade")
            tableMapping.ColumnMappings.Add("Average", "Average")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("strand", "strand")
            tableMapping.ColumnMappings.Add("depedlogo", "depedlogo")
            tableMapping.ColumnMappings.Add("schoolLogo", "schoolLogo")
            tableMapping.ColumnMappings.Add("district", "district")
            tableMapping.ColumnMappings.Add("principalPre", "principalPre")
            tableMapping.ColumnMappings.Add("principalGS", "principalGS")
            tableMapping.ColumnMappings.Add("principalJHS", "principalJHS")
            tableMapping.ColumnMappings.Add("principalSHS", "principalSHS")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, concat(p.LastName,', ',p.FirstName,' ',p.MiddleName) as S"& _ 
                "tudeName, p.Sex, p.BirthDate, p.Age, p.BirthPlace, p.Guardian, ss.Course, g.Year"& _ 
                "Level, g.Adviser, ss.Section, g.Track, g.strand, g.Description, g.PGrade, g.MGra"& _ 
                "de, g.PFinalGrade, g.FGrade, g.Average, g.Sem, g.SY, sr.SchoolName, sr.SchoolAdd"& _ 
                "ress, sr.SchoolHead, sr.sHeadPosition,sr.Division,sr.Region, sr.letterHead, sr.d"& _ 
                "epedlogo, sr.schoolLogo, sr.district, sr.principalPre, sr.principalGS, sr.princi"& _ 
                "palJHS, sr.principalSHS from studeprofile p join semesterstude ss on p.StudentNu"& _ 
                "mber=ss.StudentNumber join grades g on ss.StudentNumber=g.StudentNumber join srm"& _ 
                "s_settings sr on ss.settingsID=sr.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.RatingReportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.RatingReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.RatingReportDataTable = New DataSet2.RatingReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class idCardTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "idCard"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("middleName", "middleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("schoolLogo", "schoolLogo")
            tableMapping.ColumnMappings.Add("profImage", "profImage")
            tableMapping.ColumnMappings.Add("GuardianContact", "GuardianContact")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, p.FirstName,MID(p.MiddleName,1,1) AS middleName, p.LastNa"& _ 
                "me, p.GuardianContact, p.Guardian, ss.YearLevel, ss.Section, st.SchoolHead, st.s"& _ 
                "HeadPosition, st.SchoolName, st.SchoolAddress, st.schoolLogo, pi.profImage from "& _ 
                "studeprofile p join semesterstude ss on p.StudentNumber=ss.StudentNumber join sr"& _ 
                "ms_settings st on st.settingsID=p.settingsID join profimage pi on p.StudentNumbe"& _ 
                "r=pi.StudentNumber"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.idCardDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.idCardDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.idCardDataTable = New DataSet2.idCardDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ls_distributionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ls_distribution"
            tableMapping.ColumnMappings.Add("distID", "distID")
            tableMapping.ColumnMappings.Add("transactionNo", "transactionNo")
            tableMapping.ColumnMappings.Add("transactionDate", "transactionDate")
            tableMapping.ColumnMappings.Add("productCode", "productCode")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("itemName", "itemName")
            tableMapping.ColumnMappings.Add("EmployeeName", "EmployeeName")
            tableMapping.ColumnMappings.Add("IDNumber", "IDNumber")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select d.distID, d.transactionNo, d.transactionDate, d.productCode, d.description"& _ 
                ", d.qty, d.itemName, concat (d.FirstName,' ',d.LastName) as EmployeeName, d.IDNu"& _ 
                "mber, st.letterHead from ls_distribution d join srms_settings st on d.settingsID"& _ 
                " = st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.ls_distributionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.ls_distributionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.ls_distributionDataTable = New DataSet2.ls_distributionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class OnlineEnrolleesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OnlineEnrollees"
            tableMapping.ColumnMappings.Add("oeID", "oeID")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("fileAttachment", "fileAttachment")
            tableMapping.ColumnMappings.Add("enrolStatus", "enrolStatus")
            tableMapping.ColumnMappings.Add("downPayment", "downPayment")
            tableMapping.ColumnMappings.Add("downPaymentStat", "downPaymentStat")
            tableMapping.ColumnMappings.Add("track", "track")
            tableMapping.ColumnMappings.Add("strand", "strand")
            tableMapping.ColumnMappings.Add("StudentNumber1", "StudentNumber1")
            tableMapping.ColumnMappings.Add("FirstName1", "FirstName1")
            tableMapping.ColumnMappings.Add("MiddleName1", "MiddleName1")
            tableMapping.ColumnMappings.Add("LastName1", "LastName1")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("CivilStatus", "CivilStatus")
            tableMapping.ColumnMappings.Add("BirthPlace", "BirthPlace")
            tableMapping.ColumnMappings.Add("Citizenship", "Citizenship")
            tableMapping.ColumnMappings.Add("Religion", "Religion")
            tableMapping.ColumnMappings.Add("BloodType", "BloodType")
            tableMapping.ColumnMappings.Add("TelNumber", "TelNumber")
            tableMapping.ColumnMappings.Add("MobileNumber", "MobileNumber")
            tableMapping.ColumnMappings.Add("HighSchool", "HighSchool")
            tableMapping.ColumnMappings.Add("HSAddress", "HSAddress")
            tableMapping.ColumnMappings.Add("College", "College")
            tableMapping.ColumnMappings.Add("CAddress", "CAddress")
            tableMapping.ColumnMappings.Add("Requirements", "Requirements")
            tableMapping.ColumnMappings.Add("Encoder", "Encoder")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("AdmissionDate", "AdmissionDate")
            tableMapping.ColumnMappings.Add("GraduationDate", "GraduationDate")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("GuardianContact", "GuardianContact")
            tableMapping.ColumnMappings.Add("GuardianAddress", "GuardianAddress")
            tableMapping.ColumnMappings.Add("ImagePath", "ImagePath")
            tableMapping.ColumnMappings.Add("Course1", "Course1")
            tableMapping.ColumnMappings.Add("Elementary", "Elementary")
            tableMapping.ColumnMappings.Add("ElemAddress", "ElemAddress")
            tableMapping.ColumnMappings.Add("GuardianRelationship", "GuardianRelationship")
            tableMapping.ColumnMappings.Add("GuardianTelNo", "GuardianTelNo")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Father", "Father")
            tableMapping.ColumnMappings.Add("FOccupation", "FOccupation")
            tableMapping.ColumnMappings.Add("Mother", "Mother")
            tableMapping.ColumnMappings.Add("MOccupation", "MOccupation")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("Pronoun", "Pronoun")
            tableMapping.ColumnMappings.Add("Pronoun2", "Pronoun2")
            tableMapping.ColumnMappings.Add("Pronoun3", "Pronoun3")
            tableMapping.ColumnMappings.Add("Ethnicity", "Ethnicity")
            tableMapping.ColumnMappings.Add("ParentsMonthly", "ParentsMonthly")
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("Brgy", "Brgy")
            tableMapping.ColumnMappings.Add("Sitio", "Sitio")
            tableMapping.ColumnMappings.Add("settingsID", "settingsID")
            tableMapping.ColumnMappings.Add("guardianOccupation", "guardianOccupation")
            tableMapping.ColumnMappings.Add("elemSY", "elemSY")
            tableMapping.ColumnMappings.Add("elemAve", "elemAve")
            tableMapping.ColumnMappings.Add("elemGradDate", "elemGradDate")
            tableMapping.ColumnMappings.Add("eligibility", "eligibility")
            tableMapping.ColumnMappings.Add("jhsAve", "jhsAve")
            tableMapping.ColumnMappings.Add("jhsGradDate", "jhsGradDate")
            tableMapping.ColumnMappings.Add("elemSchoolID", "elemSchoolID")
            tableMapping.ColumnMappings.Add("jhsSchoolID", "jhsSchoolID")
            tableMapping.ColumnMappings.Add("peptRating", "peptRating")
            tableMapping.ColumnMappings.Add("peptExamDate", "peptExamDate")
            tableMapping.ColumnMappings.Add("alsRating", "alsRating")
            tableMapping.ColumnMappings.Add("alsTestingCenter", "alsTestingCenter")
            tableMapping.ColumnMappings.Add("nameExt", "nameExt")
            tableMapping.ColumnMappings.Add("settingsID1", "settingsID1")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("SDS", "SDS")
            tableMapping.ColumnMappings.Add("SchoolIDSHS", "SchoolIDSHS")
            tableMapping.ColumnMappings.Add("SchoolIDJHS", "SchoolIDJHS")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            tableMapping.ColumnMappings.Add("RegistrarSHS", "RegistrarSHS")
            tableMapping.ColumnMappings.Add("RegistrarJHS", "RegistrarJHS")
            tableMapping.ColumnMappings.Add("GuidanceSHS", "GuidanceSHS")
            tableMapping.ColumnMappings.Add("GuidanceJHS", "GuidanceJHS")
            tableMapping.ColumnMappings.Add("member1Prop", "member1Prop")
            tableMapping.ColumnMappings.Add("member2Prop", "member2Prop")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("adas1", "adas1")
            tableMapping.ColumnMappings.Add("adas1Position", "adas1Position")
            tableMapping.ColumnMappings.Add("sdsPosition", "sdsPosition")
            tableMapping.ColumnMappings.Add("regionAddress", "regionAddress")
            tableMapping.ColumnMappings.Add("schoolLogo", "schoolLogo")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("depedLogo", "depedLogo")
            tableMapping.ColumnMappings.Add("regionalDirector", "regionalDirector")
            tableMapping.ColumnMappings.Add("directorPosition", "directorPosition")
            tableMapping.ColumnMappings.Add("divisionAddress", "divisionAddress")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.wisConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM online_enrollment o join studeprofile p on o.StudentNumber=p.Studen"& _ 
                "tNumber join srms_settings st on p.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet2.OnlineEnrolleesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet2.OnlineEnrolleesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet2.OnlineEnrolleesDataTable = New DataSet2.OnlineEnrolleesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _installmentfeeTableAdapter As installmentfeeTableAdapter
        
        Private _cashierAcctTableAdapter As cashierAcctTableAdapter
        
        Private _get_majorTableAdapter As get_majorTableAdapter
        
        Private _roomsTableAdapter As roomsTableAdapter
        
        Private _ethnicityTableAdapter As ethnicityTableAdapter
        
        Private _provinceTableAdapter As provinceTableAdapter
        
        Private _cityTableAdapter As CityTableAdapter
        
        Private _brgyTableAdapter As BrgyTableAdapter
        
        Private _religionTableAdapter As ReligionTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property installmentfeeTableAdapter() As installmentfeeTableAdapter
            Get
                Return Me._installmentfeeTableAdapter
            End Get
            Set
                Me._installmentfeeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property cashierAcctTableAdapter() As cashierAcctTableAdapter
            Get
                Return Me._cashierAcctTableAdapter
            End Get
            Set
                Me._cashierAcctTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property get_majorTableAdapter() As get_majorTableAdapter
            Get
                Return Me._get_majorTableAdapter
            End Get
            Set
                Me._get_majorTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property roomsTableAdapter() As roomsTableAdapter
            Get
                Return Me._roomsTableAdapter
            End Get
            Set
                Me._roomsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ethnicityTableAdapter() As ethnicityTableAdapter
            Get
                Return Me._ethnicityTableAdapter
            End Get
            Set
                Me._ethnicityTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property provinceTableAdapter() As provinceTableAdapter
            Get
                Return Me._provinceTableAdapter
            End Get
            Set
                Me._provinceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CityTableAdapter() As CityTableAdapter
            Get
                Return Me._cityTableAdapter
            End Get
            Set
                Me._cityTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BrgyTableAdapter() As BrgyTableAdapter
            Get
                Return Me._brgyTableAdapter
            End Get
            Set
                Me._brgyTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ReligionTableAdapter() As ReligionTableAdapter
            Get
                Return Me._religionTableAdapter
            End Get
            Set
                Me._religionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._installmentfeeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._installmentfeeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._installmentfeeTableAdapter.Connection
                End If
                If ((Not (Me._cashierAcctTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cashierAcctTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cashierAcctTableAdapter.Connection
                End If
                If ((Not (Me._get_majorTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._get_majorTableAdapter.Connection) Is Nothing)) Then
                    Return Me._get_majorTableAdapter.Connection
                End If
                If ((Not (Me._roomsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._roomsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._roomsTableAdapter.Connection
                End If
                If ((Not (Me._ethnicityTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._ethnicityTableAdapter.Connection) Is Nothing)) Then
                    Return Me._ethnicityTableAdapter.Connection
                End If
                If ((Not (Me._provinceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._provinceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._provinceTableAdapter.Connection
                End If
                If ((Not (Me._cityTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cityTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cityTableAdapter.Connection
                End If
                If ((Not (Me._brgyTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._brgyTableAdapter.Connection) Is Nothing)) Then
                    Return Me._brgyTableAdapter.Connection
                End If
                If ((Not (Me._religionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._religionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._religionTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._installmentfeeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cashierAcctTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._get_majorTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._roomsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._ethnicityTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._provinceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cityTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._brgyTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._religionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSet2, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._ethnicityTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ethnicity.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._ethnicityTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._religionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Religion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._religionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._brgyTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Brgy.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._brgyTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._provinceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.province.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._provinceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cityTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.City.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cityTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._get_majorTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.get_major.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._get_majorTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._installmentfeeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.installmentfee.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._installmentfeeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cashierAcctTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.cashierAcct.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cashierAcctTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._roomsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.rooms.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._roomsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSet2, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._ethnicityTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ethnicity.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._ethnicityTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._religionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Religion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._religionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._brgyTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Brgy.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._brgyTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._provinceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.province.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._provinceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cityTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.City.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cityTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._get_majorTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.get_major.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._get_majorTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._installmentfeeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.installmentfee.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._installmentfeeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cashierAcctTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.cashierAcct.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cashierAcctTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._roomsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.rooms.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._roomsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSet2, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._roomsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.rooms.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._roomsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cashierAcctTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.cashierAcct.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cashierAcctTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._installmentfeeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.installmentfee.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._installmentfeeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._get_majorTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.get_major.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._get_majorTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cityTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.City.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cityTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._provinceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.province.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._provinceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._brgyTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Brgy.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._brgyTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._religionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Religion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._religionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._ethnicityTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ethnicity.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._ethnicityTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSet2) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._installmentfeeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._installmentfeeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._cashierAcctTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cashierAcctTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._get_majorTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._get_majorTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._roomsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._roomsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._ethnicityTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._ethnicityTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._provinceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._provinceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._cityTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cityTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._brgyTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._brgyTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._religionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._religionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._installmentfeeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._installmentfeeTableAdapter, Me._installmentfeeTableAdapter.Connection)
                    Me._installmentfeeTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._installmentfeeTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._installmentfeeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._installmentfeeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._installmentfeeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cashierAcctTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cashierAcctTableAdapter, Me._cashierAcctTableAdapter.Connection)
                    Me._cashierAcctTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._cashierAcctTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._cashierAcctTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cashierAcctTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cashierAcctTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._get_majorTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._get_majorTableAdapter, Me._get_majorTableAdapter.Connection)
                    Me._get_majorTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._get_majorTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._get_majorTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._get_majorTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._get_majorTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._roomsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._roomsTableAdapter, Me._roomsTableAdapter.Connection)
                    Me._roomsTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._roomsTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._roomsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._roomsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._roomsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._ethnicityTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._ethnicityTableAdapter, Me._ethnicityTableAdapter.Connection)
                    Me._ethnicityTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._ethnicityTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._ethnicityTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._ethnicityTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._ethnicityTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._provinceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._provinceTableAdapter, Me._provinceTableAdapter.Connection)
                    Me._provinceTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._provinceTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._provinceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._provinceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._provinceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cityTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cityTableAdapter, Me._cityTableAdapter.Connection)
                    Me._cityTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._cityTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._cityTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cityTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cityTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._brgyTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._brgyTableAdapter, Me._brgyTableAdapter.Connection)
                    Me._brgyTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._brgyTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._brgyTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._brgyTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._brgyTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._religionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._religionTableAdapter, Me._religionTableAdapter.Connection)
                    Me._religionTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._religionTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._religionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._religionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._religionTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._installmentfeeTableAdapter) Is Nothing) Then
                    Me._installmentfeeTableAdapter.Connection = CType(revertConnections(Me._installmentfeeTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._installmentfeeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cashierAcctTableAdapter) Is Nothing) Then
                    Me._cashierAcctTableAdapter.Connection = CType(revertConnections(Me._cashierAcctTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._cashierAcctTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._get_majorTableAdapter) Is Nothing) Then
                    Me._get_majorTableAdapter.Connection = CType(revertConnections(Me._get_majorTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._get_majorTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._roomsTableAdapter) Is Nothing) Then
                    Me._roomsTableAdapter.Connection = CType(revertConnections(Me._roomsTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._roomsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._ethnicityTableAdapter) Is Nothing) Then
                    Me._ethnicityTableAdapter.Connection = CType(revertConnections(Me._ethnicityTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._ethnicityTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._provinceTableAdapter) Is Nothing) Then
                    Me._provinceTableAdapter.Connection = CType(revertConnections(Me._provinceTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._provinceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cityTableAdapter) Is Nothing) Then
                    Me._cityTableAdapter.Connection = CType(revertConnections(Me._cityTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._cityTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._brgyTableAdapter) Is Nothing) Then
                    Me._brgyTableAdapter.Connection = CType(revertConnections(Me._brgyTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._brgyTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._religionTableAdapter) Is Nothing) Then
                    Me._religionTableAdapter.Connection = CType(revertConnections(Me._religionTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._religionTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
